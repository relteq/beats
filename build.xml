<?xml version="1.0" encoding="UTF-8"?>

<project name="sirius" default="jar" basedir="."
		xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant">
	<property name="gen.src.dir" value="${basedir}/target/generated-sources"/>
	<property name="main.java.dir" value="${basedir}/src/main/java"/>
	<property name="jaxb.java.dir" value="${gen.src.dir}/xjc"/>
	<property name="test.java.dir" value="${basedir}/src/test/java"/>
	<property name="util.java.dir" value="${basedir}/src/util/java"/>
	<property name="classes.dir" value="${basedir}/target/classes"/>
	<property name="test.classes.dir" value="${basedir}/target/test-classes"/>
	<property name="util.classes.dir" value="${basedir}/target/util-classes"/>

	<property name="src.encoding" value="ISO-8859-1"/>
	<property name="javac.optimize" value="on"/>
	<property name="javac.debug" value="on"/>
	<property name="javac.deprecation" value="off"/>
	<property name="javac.version" value="1.6"/>
	<property name="javac.args" value=""/>
	<property name="javac.args.warnings" value="-Xlint:unchecked -Xlint:deprecation"/>

	<property name="ydoc.dir" value="${basedir}/yworks-uml-doclet-3.0_01-jdk1.5"/>
	<property name="doc.dir" value="${basedir}/target/generated-docs"/>

	<property name="jar.file" value="${basedir}/sirius.jar"/>
	<property name="schema.file" value="${basedir}/src/main/resources/sirius.xsd"/>


	<property name="lib.dir" value="${basedir}/lib"/>

	<property name="base.package" value="edu.berkeley.path.beats"/>

	<property name="torque.buildfile" value="build-torque.xml"/>

	<property file="ivy.properties"/>
	<property file="torque.properties"/>

	<path id="generate.lib.path">
		<fileset dir="${lib.dir}/jar/generate" includes="*.jar"/>
	</path>

	<path id="compile.lib.path">
		<fileset dir="${lib.dir}/jar/compile" includes="*.jar"/>
	</path>

	<path id="runtime.lib.path">
		<fileset dir="${lib.dir}/jar/runtime" includes="*.jar"/>
	</path>

	<path id="test.lib.path">
		<fileset dir="${lib.dir}/jar/test" includes="*.jar"/>
	</path>

	<target name="xjctask" depends="deps-generate">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="generate.lib.path"/>
	</target>

	<target name="all" depends="jar,doc,test"
			description="build a jar, generate documentation, and run tests"/>

	<target name="xsd2java" depends="xjctask">
		<mkdir dir="${jaxb.java.dir}"/>
		<xjc schema="${schema.file}"
				destdir="${jaxb.java.dir}"
				package="${base.package}.jaxb"
				readonly="yes" removeOldOutput="yes">
			<produces dir="${jaxb.java.dir}" includes="**/*.java"/>
		</xjc>
	</target>

	<target name="compile" depends="xsd2java,deps-compile,om">
		<mkdir dir="${classes.dir}"/>
		<path id="main.sourcepath">
			<pathelement location="${main.java.dir}"/>
			<pathelement location="${jaxb.java.dir}"/>
			<pathelement location="${torque.java.base.dir}"/>
			<pathelement location="${torque.java.dir}"/>
		</path>
		<javac encoding="${src.encoding}" includeantruntime="no"
				destdir="${classes.dir}"
				classpathref="compile.lib.path"
				sourcepathref="main.sourcepath"
				debug="${javac.debug}" optimize="${javac.optimize}"
				target="${javac.version}" source="${javac.version}"
				deprecation="${javac.deprecation}"
				nowarn="yes">
				<src path="${torque.java.base.dir}"/>
		</javac>
		<javac encoding="${src.encoding}" includeantruntime="no"
				destdir="${classes.dir}"
				classpathref="compile.lib.path"
				sourcepathref="main.sourcepath"
				debug="${javac.debug}" optimize="${javac.optimize}"
				target="${javac.version}" source="${javac.version}"
				deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}"/>
			<src path="${jaxb.java.dir}"/>
			<src path="${torque.java.dir}"/>
			<src path="${main.java.dir}"/>
		</javac>
	</target>

	<target name="resources">
		<antcall target="sql"/>
		<antcall target="version"/>
	</target>

	<target name="jar" depends="compile,resources,deps-runtime" description="build a jar">
		<manifestclasspath property="jar.classpath" jarfile="${jar.file}">
			<classpath refid="runtime.lib.path"/>
		</manifestclasspath>
		<jar jarfile="${jar.file}" basedir="${classes.dir}">
			<manifest>
				<attribute name="Main-Class" value="${base.package}.Runner"/>
				<attribute name="Class-Path" value="${jar.classpath}"/>
			</manifest>
			<zipfileset dir="${torque.sql.dir}" includes="**/*.sql" prefix="sql"/>
			<fileset dir="${basedir}/src/main/resources"/>
		</jar>
	</target>

	<target name="doc" depends="compile,doc-db" description="generate documentation">
		<javadoc
			encoding="${src.encoding}"
			author="yes" 
			use="yes" 
			version="yes"
			linksource="yes"
			access="protected" 
			destdir="${doc.dir}">
			<sourcefiles>
				<fileset dir="${main.java.dir}/edu/berkeley/path/beats/simulator"
					includes="Controller.java ObjectFactory.java Link.java Node.java
						Scenario.java SiriusStateTrajectory.java ScenarioElement.java
						Sensor.java Signal.java Event.java"/>
			</sourcefiles>
			<classpath>
				<pathelement location="${classes.dir}"/>
				<path refid="compile.lib.path"/>
			</classpath>
			<doclet
				name="ydoc.doclets.YStandard"
				path="${ydoc.dir}/lib/ydoc.jar:${ydoc.dir}/resources:${ydoc.dir}/doc:${classes.dir}" >
				<param name="-filterpath" value="${ydoc.dir}/lib/ydoc.jar"/>
				<param name="-filter" value="ydoc.filters.ExcludeFilter"/>
			</doclet>
		</javadoc>
	</target>

	<target name="clean" description="clean up">
		<delete file="${jar.file}"/>
		<delete dir="target"/>
		<delete dir="${torque.java.dir}"/>
		<delete dir="${lib.dir}"/>
	</target>

	<target name="deps-compile" depends="init-ivy">
		<ivy:retrieve conf="compile" log="${ivy.retrieve.log}"/>
	</target>

	<target name="deps-generate" depends="init-ivy">
		<ivy:retrieve conf="generate" log="${ivy.retrieve.log}"/>
	</target>

	<target name="deps-test" depends="init-ivy">
		<ivy:retrieve conf="test" log="${ivy.retrieve.log}"/>
	</target>

	<target name="deps-runtime" depends="init-ivy">
		<ivy:retrieve conf="runtime" log="${ivy.retrieve.log}"/>
	</target>

	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME"/>
	</condition>
	<property name="ivy.home" value="${user.home}/.ant"/>
	<property name="ivy.jar.dir" value="${ivy.home}/lib"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar"/>

	<target name="download-ivy">
		<mkdir dir="${ivy.jar.dir}"/>
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
				dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				uri="antlib:org.apache.ivy.ant"
				classpath="${ivy.jar.file}"/>
	</target>

	<path id="classpath.test">
		<pathelement location="${jar.file}"/>
		<path refid="test.lib.path"/>
	</path>

	<target name="compile-test" depends="deps-test,jar">
		<mkdir dir="${test.classes.dir}"/>
		<javac encoding="${src.encoding}" includeantruntime="no" debug="on"
				srcdir="${test.java.dir}"
				destdir="${test.classes.dir}"
				includes="**/*.java">
			<classpath refid="classpath.test"/>
		</javac>
	</target>

	<target name="test" description="run tests" depends="compile-test">
		<junit haltonfailure="on" filtertrace="no" reloading="false">
			<classpath>
				<pathelement location="${test.classes.dir}"/>
				<path refid="classpath.test"/>
			</classpath>
			<formatter type="plain" usefile="false"/>
			<batchtest>
				<fileset dir="${test.classes.dir}" includes="**/*.class"/>
			</batchtest>
		</junit>
	</target>

	<property name="torque.schema.file" value="${torque.schema.dir}/${torque.project}-schema.xml"/>

	<uptodate property="sql.uptodate"
			srcfile="${torque.schema.file}"
			targetfile="${torque.sql.dir}/.done"/>

	<target name="sql" depends="deps-generate" unless="sql.uptodate"
			description="generate sql from xml db schema">
		<ant antfile="${torque.buildfile}" target="sql-all">
			<property name="torque.database" value="derby"/>
			<property name="torque.sql.dir" value="${torque.sql.dir}/derby"/>
		</ant>
		<ant antfile="${torque.buildfile}" target="sql-all">
			<property name="torque.database" value="postgresql"/>
			<property name="torque.sql.dir" value="${torque.sql.dir}/postgresql"/>
		</ant>
		<ant antfile="${torque.buildfile}" target="sql-all">
			<property name="torque.database" value="oracle"/>
			<property name="torque.sql.dir" value="${torque.sql.dir}/oracle"/>
		</ant>
		<touch file="${torque.sql.dir}/.done"/>
	</target>

	<target name="doc-db" depends="deps-generate"
			description="generate documentation from xml db schema">
		<ant antfile="${torque.buildfile}" target="doc"/>
	</target>

	<target name="om" depends="deps-generate">
		<ant antfile="${torque.buildfile}" target="om"/>
	</target>

	<target name="compile-util" depends="deps-generate">
		<mkdir dir="${util.classes.dir}"/>
		<javac srcdir="${util.java.dir}"
				destdir="${util.classes.dir}"
				debug="${javac.debug}" includeantruntime="false"
				classpathref="generate.lib.path"/>
	</target>

	<target name="version" depends="compile-util">
		<java classname="${base.package}.VersionGatherer"
				output="${classes.dir}${file.separator}engine.version"
				logerror="true"
				failonerror="true">
			<classpath>
				<path refid="generate.lib.path"/>
				<pathelement location="${util.classes.dir}"/>
			</classpath>
		</java>
	</target>
</project>

