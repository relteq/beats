package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to NodeFamilies
 */
public abstract class BaseNodeFamilies extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final NodeFamiliesPeer peer =
        new NodeFamiliesPeer();


    /** The value for the id field */
    private Long id;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated Nodes
        if (collNodess != null)
        {
            for (int i = 0; i < collNodess.size(); i++)
            {
                ((Nodes) collNodess.get(i))
                        .setId(v);
            }
        }

        // update associated Links
        if (collLinkssRelatedByBegNodeId != null)
        {
            for (int i = 0; i < collLinkssRelatedByBegNodeId.size(); i++)
            {
                ((Links) collLinkssRelatedByBegNodeId.get(i))
                        .setBegNodeId(v);
            }
        }

        // update associated Links
        if (collLinkssRelatedByEndNodeId != null)
        {
            for (int i = 0; i < collLinkssRelatedByEndNodeId.size(); i++)
            {
                ((Links) collLinkssRelatedByEndNodeId.get(i))
                        .setEndNodeId(v);
            }
        }

        // update associated Signals
        if (collSignalss != null)
        {
            for (int i = 0; i < collSignalss.size(); i++)
            {
                ((Signals) collSignalss.get(i))
                        .setNodeId(v);
            }
        }
    }

       


    /**
     * Collection to store aggregation of collNodess
     */
    protected List collNodess;

    /**
     * Temporary storage of collNodess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNodess()
    {
        if (collNodess == null)
        {
            collNodess = new ArrayList();
        }
    }


    /**
     * Method called to associate a Nodes object to this object
     * through the Nodes foreign key attribute
     *
     * @param l Nodes
     * @throws TorqueException
     */
    public void addNodes(Nodes l) throws TorqueException
    {
        getNodess().add(l);
        l.setNodeFamilies((NodeFamilies) this);
    }

    /**
     * Method called to associate a Nodes object to this object
     * through the Nodes foreign key attribute using connection.
     *
     * @param l Nodes
     * @throws TorqueException
     */
    public void addNodes(Nodes l, Connection con) throws TorqueException
    {
        getNodess(con).add(l);
        l.setNodeFamilies((NodeFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collNodess
     */
    private Criteria lastNodessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodess(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNodess()
        throws TorqueException
    {
        if (collNodess == null)
        {
            collNodess = getNodess(new Criteria(10));
        }
        return collNodess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related Nodess from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNodess(Criteria criteria) throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                criteria.add(NodesPeer.ID, getId() );
                collNodess = NodesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NodesPeer.ID, getId());
                if (!lastNodessCriteria.equals(criteria))
                {
                    collNodess = NodesPeer.doSelect(criteria);
                }
            }
        }
        lastNodessCriteria = criteria;

        return collNodess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodess(Connection con) throws TorqueException
    {
        if (collNodess == null)
        {
            collNodess = getNodess(new Criteria(10), con);
        }
        return collNodess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related Nodess from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                 criteria.add(NodesPeer.ID, getId());
                 collNodess = NodesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NodesPeer.ID, getId());
                 if (!lastNodessCriteria.equals(criteria))
                 {
                     collNodess = NodesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNodessCriteria = criteria;

         return collNodess;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related Nodess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getNodessJoinNodeFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                criteria.add(NodesPeer.ID, getId());
                collNodess = NodesPeer.doSelectJoinNodeFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NodesPeer.ID, getId());
            if (!lastNodessCriteria.equals(criteria))
            {
                collNodess = NodesPeer.doSelectJoinNodeFamilies(criteria);
            }
        }
        lastNodessCriteria = criteria;

        return collNodess;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related Nodess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getNodessJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                criteria.add(NodesPeer.ID, getId());
                collNodess = NodesPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NodesPeer.ID, getId());
            if (!lastNodessCriteria.equals(criteria))
            {
                collNodess = NodesPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastNodessCriteria = criteria;

        return collNodess;
    }





    /**
     * Collection to store aggregation of collLinkssRelatedByBegNodeId
     */
    protected List collLinkssRelatedByBegNodeId;

    /**
     * Temporary storage of collLinkssRelatedByBegNodeId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkssRelatedByBegNodeId()
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            collLinkssRelatedByBegNodeId = new ArrayList();
        }
    }


    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinksRelatedByBegNodeId(Links l) throws TorqueException
    {
        getLinkssRelatedByBegNodeId().add(l);
        l.setNodeFamiliesRelatedByBegNodeId((NodeFamilies) this);
    }

    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute using connection.
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinksRelatedByBegNodeId(Links l, Connection con) throws TorqueException
    {
        getLinkssRelatedByBegNodeId(con).add(l);
        l.setNodeFamiliesRelatedByBegNodeId((NodeFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkssRelatedByBegNodeId
     */
    private Criteria lastLinkssRelatedByBegNodeIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkssRelatedByBegNodeId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkssRelatedByBegNodeId()
        throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            collLinkssRelatedByBegNodeId = getLinkssRelatedByBegNodeId(new Criteria(10));
        }
        return collLinkssRelatedByBegNodeId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByBegNodeId from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkssRelatedByBegNodeId(Criteria criteria) throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByBegNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.BEG_NODE_ID, getId() );
                collLinkssRelatedByBegNodeId = LinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinksPeer.BEG_NODE_ID, getId());
                if (!lastLinkssRelatedByBegNodeIdCriteria.equals(criteria))
                {
                    collLinkssRelatedByBegNodeId = LinksPeer.doSelect(criteria);
                }
            }
        }
        lastLinkssRelatedByBegNodeIdCriteria = criteria;

        return collLinkssRelatedByBegNodeId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkssRelatedByBegNodeId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkssRelatedByBegNodeId(Connection con) throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            collLinkssRelatedByBegNodeId = getLinkssRelatedByBegNodeId(new Criteria(10), con);
        }
        return collLinkssRelatedByBegNodeId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByBegNodeId from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkssRelatedByBegNodeId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByBegNodeId = new ArrayList();
            }
            else
            {
                 criteria.add(LinksPeer.BEG_NODE_ID, getId());
                 collLinkssRelatedByBegNodeId = LinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinksPeer.BEG_NODE_ID, getId());
                 if (!lastLinkssRelatedByBegNodeIdCriteria.equals(criteria))
                 {
                     collLinkssRelatedByBegNodeId = LinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkssRelatedByBegNodeIdCriteria = criteria;

         return collLinkssRelatedByBegNodeId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByBegNodeId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getLinkssRelatedByBegNodeIdJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByBegNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.BEG_NODE_ID, getId());
                collLinkssRelatedByBegNodeId = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.BEG_NODE_ID, getId());
            if (!lastLinkssRelatedByBegNodeIdCriteria.equals(criteria))
            {
                collLinkssRelatedByBegNodeId = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastLinkssRelatedByBegNodeIdCriteria = criteria;

        return collLinkssRelatedByBegNodeId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByBegNodeId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getLinkssRelatedByBegNodeIdJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByBegNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.BEG_NODE_ID, getId());
                collLinkssRelatedByBegNodeId = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.BEG_NODE_ID, getId());
            if (!lastLinkssRelatedByBegNodeIdCriteria.equals(criteria))
            {
                collLinkssRelatedByBegNodeId = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkssRelatedByBegNodeIdCriteria = criteria;

        return collLinkssRelatedByBegNodeId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByBegNodeId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getLinkssRelatedByBegNodeIdJoinNodeFamiliesRelatedByEndNodeId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkssRelatedByBegNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByBegNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.BEG_NODE_ID, getId());
                collLinkssRelatedByBegNodeId = LinksPeer.doSelectJoinNodeFamiliesRelatedByEndNodeId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.BEG_NODE_ID, getId());
            if (!lastLinkssRelatedByBegNodeIdCriteria.equals(criteria))
            {
                collLinkssRelatedByBegNodeId = LinksPeer.doSelectJoinNodeFamiliesRelatedByEndNodeId(criteria);
            }
        }
        lastLinkssRelatedByBegNodeIdCriteria = criteria;

        return collLinkssRelatedByBegNodeId;
    }





    /**
     * Collection to store aggregation of collLinkssRelatedByEndNodeId
     */
    protected List collLinkssRelatedByEndNodeId;

    /**
     * Temporary storage of collLinkssRelatedByEndNodeId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkssRelatedByEndNodeId()
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            collLinkssRelatedByEndNodeId = new ArrayList();
        }
    }


    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinksRelatedByEndNodeId(Links l) throws TorqueException
    {
        getLinkssRelatedByEndNodeId().add(l);
        l.setNodeFamiliesRelatedByEndNodeId((NodeFamilies) this);
    }

    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute using connection.
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinksRelatedByEndNodeId(Links l, Connection con) throws TorqueException
    {
        getLinkssRelatedByEndNodeId(con).add(l);
        l.setNodeFamiliesRelatedByEndNodeId((NodeFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkssRelatedByEndNodeId
     */
    private Criteria lastLinkssRelatedByEndNodeIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkssRelatedByEndNodeId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkssRelatedByEndNodeId()
        throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            collLinkssRelatedByEndNodeId = getLinkssRelatedByEndNodeId(new Criteria(10));
        }
        return collLinkssRelatedByEndNodeId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByEndNodeId from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkssRelatedByEndNodeId(Criteria criteria) throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByEndNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.END_NODE_ID, getId() );
                collLinkssRelatedByEndNodeId = LinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinksPeer.END_NODE_ID, getId());
                if (!lastLinkssRelatedByEndNodeIdCriteria.equals(criteria))
                {
                    collLinkssRelatedByEndNodeId = LinksPeer.doSelect(criteria);
                }
            }
        }
        lastLinkssRelatedByEndNodeIdCriteria = criteria;

        return collLinkssRelatedByEndNodeId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkssRelatedByEndNodeId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkssRelatedByEndNodeId(Connection con) throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            collLinkssRelatedByEndNodeId = getLinkssRelatedByEndNodeId(new Criteria(10), con);
        }
        return collLinkssRelatedByEndNodeId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByEndNodeId from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkssRelatedByEndNodeId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByEndNodeId = new ArrayList();
            }
            else
            {
                 criteria.add(LinksPeer.END_NODE_ID, getId());
                 collLinkssRelatedByEndNodeId = LinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinksPeer.END_NODE_ID, getId());
                 if (!lastLinkssRelatedByEndNodeIdCriteria.equals(criteria))
                 {
                     collLinkssRelatedByEndNodeId = LinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkssRelatedByEndNodeIdCriteria = criteria;

         return collLinkssRelatedByEndNodeId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByEndNodeId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getLinkssRelatedByEndNodeIdJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByEndNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.END_NODE_ID, getId());
                collLinkssRelatedByEndNodeId = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.END_NODE_ID, getId());
            if (!lastLinkssRelatedByEndNodeIdCriteria.equals(criteria))
            {
                collLinkssRelatedByEndNodeId = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastLinkssRelatedByEndNodeIdCriteria = criteria;

        return collLinkssRelatedByEndNodeId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByEndNodeId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getLinkssRelatedByEndNodeIdJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByEndNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.END_NODE_ID, getId());
                collLinkssRelatedByEndNodeId = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.END_NODE_ID, getId());
            if (!lastLinkssRelatedByEndNodeIdCriteria.equals(criteria))
            {
                collLinkssRelatedByEndNodeId = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkssRelatedByEndNodeIdCriteria = criteria;

        return collLinkssRelatedByEndNodeId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related LinkssRelatedByEndNodeId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getLinkssRelatedByEndNodeIdJoinNodeFamiliesRelatedByBegNodeId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkssRelatedByEndNodeId == null)
        {
            if (isNew())
            {
               collLinkssRelatedByEndNodeId = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.END_NODE_ID, getId());
                collLinkssRelatedByEndNodeId = LinksPeer.doSelectJoinNodeFamiliesRelatedByBegNodeId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.END_NODE_ID, getId());
            if (!lastLinkssRelatedByEndNodeIdCriteria.equals(criteria))
            {
                collLinkssRelatedByEndNodeId = LinksPeer.doSelectJoinNodeFamiliesRelatedByBegNodeId(criteria);
            }
        }
        lastLinkssRelatedByEndNodeIdCriteria = criteria;

        return collLinkssRelatedByEndNodeId;
    }













    /**
     * Collection to store aggregation of collSignalss
     */
    protected List collSignalss;

    /**
     * Temporary storage of collSignalss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalss()
    {
        if (collSignalss == null)
        {
            collSignalss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Signals object to this object
     * through the Signals foreign key attribute
     *
     * @param l Signals
     * @throws TorqueException
     */
    public void addSignals(Signals l) throws TorqueException
    {
        getSignalss().add(l);
        l.setNodeFamilies((NodeFamilies) this);
    }

    /**
     * Method called to associate a Signals object to this object
     * through the Signals foreign key attribute using connection.
     *
     * @param l Signals
     * @throws TorqueException
     */
    public void addSignals(Signals l, Connection con) throws TorqueException
    {
        getSignalss(con).add(l);
        l.setNodeFamilies((NodeFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collSignalss
     */
    private Criteria lastSignalssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalss()
        throws TorqueException
    {
        if (collSignalss == null)
        {
            collSignalss = getSignalss(new Criteria(10));
        }
        return collSignalss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related Signalss from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalss(Criteria criteria) throws TorqueException
    {
        if (collSignalss == null)
        {
            if (isNew())
            {
               collSignalss = new ArrayList();
            }
            else
            {
                criteria.add(SignalsPeer.NODE_ID, getId() );
                collSignalss = SignalsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalsPeer.NODE_ID, getId());
                if (!lastSignalssCriteria.equals(criteria))
                {
                    collSignalss = SignalsPeer.doSelect(criteria);
                }
            }
        }
        lastSignalssCriteria = criteria;

        return collSignalss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalss(Connection con) throws TorqueException
    {
        if (collSignalss == null)
        {
            collSignalss = getSignalss(new Criteria(10), con);
        }
        return collSignalss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies has previously
     * been saved, it will retrieve related Signalss from storage.
     * If this NodeFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalss == null)
        {
            if (isNew())
            {
               collSignalss = new ArrayList();
            }
            else
            {
                 criteria.add(SignalsPeer.NODE_ID, getId());
                 collSignalss = SignalsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalsPeer.NODE_ID, getId());
                 if (!lastSignalssCriteria.equals(criteria))
                 {
                     collSignalss = SignalsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalssCriteria = criteria;

         return collSignalss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related Signalss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getSignalssJoinNodeFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collSignalss == null)
        {
            if (isNew())
            {
               collSignalss = new ArrayList();
            }
            else
            {
                criteria.add(SignalsPeer.NODE_ID, getId());
                collSignalss = SignalsPeer.doSelectJoinNodeFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalsPeer.NODE_ID, getId());
            if (!lastSignalssCriteria.equals(criteria))
            {
                collSignalss = SignalsPeer.doSelectJoinNodeFamilies(criteria);
            }
        }
        lastSignalssCriteria = criteria;

        return collSignalss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this NodeFamilies is new, it will return
     * an empty collection; or if this NodeFamilies has previously
     * been saved, it will retrieve related Signalss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in NodeFamilies.
     */
    protected List getSignalssJoinSignalSets(Criteria criteria)
        throws TorqueException
    {
        if (collSignalss == null)
        {
            if (isNew())
            {
               collSignalss = new ArrayList();
            }
            else
            {
                criteria.add(SignalsPeer.NODE_ID, getId());
                collSignalss = SignalsPeer.doSelectJoinSignalSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalsPeer.NODE_ID, getId());
            if (!lastSignalssCriteria.equals(criteria))
            {
                collSignalss = SignalsPeer.doSelectJoinSignalSets(criteria);
            }
        }
        lastSignalssCriteria = criteria;

        return collSignalss;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(NodeFamiliesPeer.ID))
        {
            return getId();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (NodeFamiliesPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(NodeFamiliesPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    NodeFamiliesPeer.doInsert((NodeFamilies) this, con);
                    setNew(false);
                }
                else
                {
                    NodeFamiliesPeer.doUpdate((NodeFamilies) this, con);
                }
            }


            if (collNodess != null)
            {
                for (int i = 0; i < collNodess.size(); i++)
                {
                    ((Nodes) collNodess.get(i)).save(con);
                }
            }

            if (collLinkssRelatedByBegNodeId != null)
            {
                for (int i = 0; i < collLinkssRelatedByBegNodeId.size(); i++)
                {
                    ((Links) collLinkssRelatedByBegNodeId.get(i)).save(con);
                }
            }

            if (collLinkssRelatedByEndNodeId != null)
            {
                for (int i = 0; i < collLinkssRelatedByEndNodeId.size(); i++)
                {
                    ((Links) collLinkssRelatedByEndNodeId.get(i)).save(con);
                }
            }

            if (collSignalss != null)
            {
                for (int i = 0; i < collSignalss.size(); i++)
                {
                    ((Signals) collSignalss.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public NodeFamilies copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public NodeFamilies copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public NodeFamilies copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new NodeFamilies(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public NodeFamilies copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new NodeFamilies(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected NodeFamilies copyInto(NodeFamilies copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected NodeFamilies copyInto(NodeFamilies copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected NodeFamilies copyInto(NodeFamilies copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNodess = getNodess();
        if (vNodess != null)
        {
            for (int i = 0; i < vNodess.size(); i++)
            {
                Nodes obj = (Nodes) vNodess.get(i);
                copyObj.addNodes(obj.copy());
            }
        }
        else
        {
            copyObj.collNodess = null;
        }


        List vLinkssRelatedByBegNodeId = getLinkssRelatedByBegNodeId();
        if (vLinkssRelatedByBegNodeId != null)
        {
            for (int i = 0; i < vLinkssRelatedByBegNodeId.size(); i++)
            {
                Links obj = (Links) vLinkssRelatedByBegNodeId.get(i);
                copyObj.addLinksRelatedByBegNodeId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkssRelatedByBegNodeId = null;
        }


        List vLinkssRelatedByEndNodeId = getLinkssRelatedByEndNodeId();
        if (vLinkssRelatedByEndNodeId != null)
        {
            for (int i = 0; i < vLinkssRelatedByEndNodeId.size(); i++)
            {
                Links obj = (Links) vLinkssRelatedByEndNodeId.get(i);
                copyObj.addLinksRelatedByEndNodeId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkssRelatedByEndNodeId = null;
        }


        List vSignalss = getSignalss();
        if (vSignalss != null)
        {
            for (int i = 0; i < vSignalss.size(); i++)
            {
                Signals obj = (Signals) vSignalss.get(i);
                copyObj.addSignals(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalss = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected NodeFamilies copyInto(NodeFamilies copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNodess = getNodess(con);
        if (vNodess != null)
        {
            for (int i = 0; i < vNodess.size(); i++)
            {
                Nodes obj = (Nodes) vNodess.get(i);
                copyObj.addNodes(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNodess = null;
        }


        List vLinkssRelatedByBegNodeId = getLinkssRelatedByBegNodeId(con);
        if (vLinkssRelatedByBegNodeId != null)
        {
            for (int i = 0; i < vLinkssRelatedByBegNodeId.size(); i++)
            {
                Links obj = (Links) vLinkssRelatedByBegNodeId.get(i);
                copyObj.addLinksRelatedByBegNodeId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkssRelatedByBegNodeId = null;
        }


        List vLinkssRelatedByEndNodeId = getLinkssRelatedByEndNodeId(con);
        if (vLinkssRelatedByEndNodeId != null)
        {
            for (int i = 0; i < vLinkssRelatedByEndNodeId.size(); i++)
            {
                Links obj = (Links) vLinkssRelatedByEndNodeId.get(i);
                copyObj.addLinksRelatedByEndNodeId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkssRelatedByEndNodeId = null;
        }


        List vSignalss = getSignalss(con);
        if (vSignalss != null)
        {
            for (int i = 0; i < vSignalss.size(); i++)
            {
                Signals obj = (Signals) vSignalss.get(i);
                copyObj.addSignals(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalss = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public NodeFamiliesPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return NodeFamiliesPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("NodeFamilies:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        return(str.toString());
    }
}
