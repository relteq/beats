package com.relteq.sirius.om.map;

import java.util.Date;
import java.math.BigDecimal;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.DatabaseMap;
import org.apache.torque.map.TableMap;
import org.apache.torque.map.ColumnMap;
import org.apache.torque.map.InheritanceMap;

/**
  *  This class was autogenerated by Torque on:
  *
  * [Wed Nov 14 14:25:09 PST 2012]
  *
  */
public class FundamentalDiagramsMapBuilder implements MapBuilder
{
    /**
     * The name of this class
     */
    public static final String CLASS_NAME =
        "com.relteq.sirius.om.map.FundamentalDiagramsMapBuilder";

    /**
     * The database map.
     */
    private DatabaseMap dbMap = null;

    /**
     * Tells us if this DatabaseMapBuilder is built so that we
     * don't have to re-build it every time.
     *
     * @return true if this DatabaseMapBuilder is built
     */
    public boolean isBuilt()
    {
        return (dbMap != null);
    }

    /**
     * Gets the databasemap this map builder built.
     *
     * @return the databasemap
     */
    public DatabaseMap getDatabaseMap()
    {
        return this.dbMap;
    }

    /**
     * The doBuild() method builds the DatabaseMap
     *
     * @throws TorqueException
     */
    public synchronized void doBuild() throws TorqueException
    {
        if ( isBuilt() ) {
            return;
        }
        dbMap = Torque.getDatabaseMap("sirius");

        dbMap.addTable("fundamental_diagrams");
        TableMap tMap = dbMap.getTable("fundamental_diagrams");
        tMap.setJavaName("FundamentalDiagrams");
        tMap.setOMClass( com.relteq.sirius.om.FundamentalDiagrams.class );
        tMap.setPeerClass( com.relteq.sirius.om.FundamentalDiagramsPeer.class );
        tMap.setPrimaryKeyMethod("none");

        ColumnMap cMap = null;


  // ------------- Column: fundamental_diagram_profile_id --------------------
        cMap = new ColumnMap( "fundamental_diagram_profile_id", tMap);
        cMap.setType( new Long(0) );
        cMap.setTorqueType( "BIGINT" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "FundamentalDiagramProfileId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setForeignKey("fundamental_diagram_profiles", "id");
        cMap.setPosition(1);
        tMap.addColumn(cMap);
  // ------------- Column: number --------------------
        cMap = new ColumnMap( "number", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "Number" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Order of the fundamental diagram");
        cMap.setInheritance("false");
        cMap.setPosition(2);
        tMap.addColumn(cMap);
  // ------------- Column: free_flow_speed --------------------
        cMap = new ColumnMap( "free_flow_speed", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "FreeFlowSpeed" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Free flow speed in m/s.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(3);
        tMap.addColumn(cMap);
  // ------------- Column: critical_speed --------------------
        cMap = new ColumnMap( "critical_speed", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "CriticalSpeed" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Critical speed in m/s.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(4);
        tMap.addColumn(cMap);
  // ------------- Column: congestion_wave_speed --------------------
        cMap = new ColumnMap( "congestion_wave_speed", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "CongestionWaveSpeed" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Congestion wave speed in m/s.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(5);
        tMap.addColumn(cMap);
  // ------------- Column: capacity --------------------
        cMap = new ColumnMap( "capacity", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Capacity" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Maximum flow per lane in vehicles per second per lane (vphl).");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(6);
        tMap.addColumn(cMap);
  // ------------- Column: jam_density --------------------
        cMap = new ColumnMap( "jam_density", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "JamDensity" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Maximum density per lane in vehicles per meter per lane (vphl). Optional - used for trapezoidal fundamental diagrams.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(7);
        tMap.addColumn(cMap);
  // ------------- Column: capacity_drop --------------------
        cMap = new ColumnMap( "capacity_drop", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "CapacityDrop" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Capacity drop in vphl. Optional.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(8);
        tMap.addColumn(cMap);
  // ------------- Column: capacity_std --------------------
        cMap = new ColumnMap( "capacity_std", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "CapacityStd" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Expression of uncertainty in capacity in vehicles per second per lane. Optional.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(9);
        tMap.addColumn(cMap);
  // ------------- Column: free_flow_speed_std --------------------
        cMap = new ColumnMap( "free_flow_speed_std", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "FreeFlowSpeedStd" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Expression of uncertainty in free flow speed in m/s. Optional.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(10);
        tMap.addColumn(cMap);
  // ------------- Column: congestion_wave_speed_std --------------------
        cMap = new ColumnMap( "congestion_wave_speed_std", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "CongestionWaveSpeedStd" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Expression of uncertainty in congestion wave speed in m/s. Optional.");
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(11);
        tMap.addColumn(cMap);
  // ------------- Column: created --------------------
        cMap = new ColumnMap( "created", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "DATE" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Created" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setPosition(12);
        tMap.addColumn(cMap);
  // ------------- Column: modified --------------------
        cMap = new ColumnMap( "modified", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "DATE" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Modified" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setPosition(13);
        tMap.addColumn(cMap);
  // ------------- Column: created_by --------------------
        cMap = new ColumnMap( "created_by", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "CreatedBy" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setSize( 64 );
        cMap.setPosition(14);
        tMap.addColumn(cMap);
  // ------------- Column: modified_by --------------------
        cMap = new ColumnMap( "modified_by", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "ModifiedBy" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setSize( 64 );
        cMap.setPosition(15);
        tMap.addColumn(cMap);
  // ------------- Column: modstamp --------------------
        cMap = new ColumnMap( "modstamp", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "TIMESTAMP" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Modstamp" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setPosition(16);
        tMap.addColumn(cMap);
        tMap.setUseInheritance(false);
    }
}
