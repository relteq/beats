package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to FundamentalDiagrams
 */
public abstract class BaseFundamentalDiagrams extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final FundamentalDiagramsPeer peer =
        new FundamentalDiagramsPeer();


    /** The value for the fundamentalDiagramProfileId field */
    private Long fundamentalDiagramProfileId;

    /** The value for the number field */
    private Integer number;

    /** The value for the freeFlowSpeed field */
    private BigDecimal freeFlowSpeed;

    /** The value for the criticalSpeed field */
    private BigDecimal criticalSpeed;

    /** The value for the congestionWaveSpeed field */
    private BigDecimal congestionWaveSpeed;

    /** The value for the capacity field */
    private BigDecimal capacity;

    /** The value for the jamDensity field */
    private BigDecimal jamDensity;

    /** The value for the capacityDrop field */
    private BigDecimal capacityDrop;

    /** The value for the capacityStd field */
    private BigDecimal capacityStd;

    /** The value for the freeFlowSpeedStd field */
    private BigDecimal freeFlowSpeedStd;

    /** The value for the congestionWaveSpeedStd field */
    private BigDecimal congestionWaveSpeedStd;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the FundamentalDiagramProfileId
     *
     * @return Long
     */
    public Long getFundamentalDiagramProfileId()
    {
        return fundamentalDiagramProfileId;
    }


    /**
     * Set the value of FundamentalDiagramProfileId
     *
     * @param v new value
     */
    public void setFundamentalDiagramProfileId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.fundamentalDiagramProfileId, v))
        {
            this.fundamentalDiagramProfileId = v;
            setModified(true);
        }


        if (aFundamentalDiagramProfiles != null && !ObjectUtils.equals(aFundamentalDiagramProfiles.getId(), v))
        {
            aFundamentalDiagramProfiles = null;
        }

    }

    /**
     * Get the Number
     *
     * @return Integer
     */
    public Integer getNumber()
    {
        return number;
    }


    /**
     * Set the value of Number
     *
     * @param v new value
     */
    public void setNumber(Integer v) 
    {

        if (!ObjectUtils.equals(this.number, v))
        {
            this.number = v;
            setModified(true);
        }


    }

    /**
     * Get the FreeFlowSpeed
     *
     * @return BigDecimal
     */
    public BigDecimal getFreeFlowSpeed()
    {
        return freeFlowSpeed;
    }


    /**
     * Set the value of FreeFlowSpeed
     *
     * @param v new value
     */
    public void setFreeFlowSpeed(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.freeFlowSpeed, v))
        {
            this.freeFlowSpeed = v;
            setModified(true);
        }


    }

    /**
     * Get the CriticalSpeed
     *
     * @return BigDecimal
     */
    public BigDecimal getCriticalSpeed()
    {
        return criticalSpeed;
    }


    /**
     * Set the value of CriticalSpeed
     *
     * @param v new value
     */
    public void setCriticalSpeed(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.criticalSpeed, v))
        {
            this.criticalSpeed = v;
            setModified(true);
        }


    }

    /**
     * Get the CongestionWaveSpeed
     *
     * @return BigDecimal
     */
    public BigDecimal getCongestionWaveSpeed()
    {
        return congestionWaveSpeed;
    }


    /**
     * Set the value of CongestionWaveSpeed
     *
     * @param v new value
     */
    public void setCongestionWaveSpeed(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.congestionWaveSpeed, v))
        {
            this.congestionWaveSpeed = v;
            setModified(true);
        }


    }

    /**
     * Get the Capacity
     *
     * @return BigDecimal
     */
    public BigDecimal getCapacity()
    {
        return capacity;
    }


    /**
     * Set the value of Capacity
     *
     * @param v new value
     */
    public void setCapacity(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.capacity, v))
        {
            this.capacity = v;
            setModified(true);
        }


    }

    /**
     * Get the JamDensity
     *
     * @return BigDecimal
     */
    public BigDecimal getJamDensity()
    {
        return jamDensity;
    }


    /**
     * Set the value of JamDensity
     *
     * @param v new value
     */
    public void setJamDensity(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.jamDensity, v))
        {
            this.jamDensity = v;
            setModified(true);
        }


    }

    /**
     * Get the CapacityDrop
     *
     * @return BigDecimal
     */
    public BigDecimal getCapacityDrop()
    {
        return capacityDrop;
    }


    /**
     * Set the value of CapacityDrop
     *
     * @param v new value
     */
    public void setCapacityDrop(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.capacityDrop, v))
        {
            this.capacityDrop = v;
            setModified(true);
        }


    }

    /**
     * Get the CapacityStd
     *
     * @return BigDecimal
     */
    public BigDecimal getCapacityStd()
    {
        return capacityStd;
    }


    /**
     * Set the value of CapacityStd
     *
     * @param v new value
     */
    public void setCapacityStd(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.capacityStd, v))
        {
            this.capacityStd = v;
            setModified(true);
        }


    }

    /**
     * Get the FreeFlowSpeedStd
     *
     * @return BigDecimal
     */
    public BigDecimal getFreeFlowSpeedStd()
    {
        return freeFlowSpeedStd;
    }


    /**
     * Set the value of FreeFlowSpeedStd
     *
     * @param v new value
     */
    public void setFreeFlowSpeedStd(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.freeFlowSpeedStd, v))
        {
            this.freeFlowSpeedStd = v;
            setModified(true);
        }


    }

    /**
     * Get the CongestionWaveSpeedStd
     *
     * @return BigDecimal
     */
    public BigDecimal getCongestionWaveSpeedStd()
    {
        return congestionWaveSpeedStd;
    }


    /**
     * Set the value of CongestionWaveSpeedStd
     *
     * @param v new value
     */
    public void setCongestionWaveSpeedStd(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.congestionWaveSpeedStd, v))
        {
            this.congestionWaveSpeedStd = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private FundamentalDiagramProfiles aFundamentalDiagramProfiles;

    /**
     * Declares an association between this object and a FundamentalDiagramProfiles object
     *
     * @param v FundamentalDiagramProfiles
     * @throws TorqueException
     */
    public void setFundamentalDiagramProfiles(FundamentalDiagramProfiles v) throws TorqueException
    {
        if (v == null)
        {
            setFundamentalDiagramProfileId((Long) null);
        }
        else
        {
            setFundamentalDiagramProfileId(v.getId());
        }
        aFundamentalDiagramProfiles = v;
    }


    /**
     * Returns the associated FundamentalDiagramProfiles object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated FundamentalDiagramProfiles object
     * @throws TorqueException
     */
    public FundamentalDiagramProfiles getFundamentalDiagramProfiles()
        throws TorqueException
    {
        if (aFundamentalDiagramProfiles == null && (!ObjectUtils.equals(this.fundamentalDiagramProfileId, null)))
        {
            aFundamentalDiagramProfiles = FundamentalDiagramProfilesPeer.retrieveByPK(SimpleKey.keyFor(this.fundamentalDiagramProfileId));
        }
        return aFundamentalDiagramProfiles;
    }

    /**
     * Return the associated FundamentalDiagramProfiles object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated FundamentalDiagramProfiles object
     * @throws TorqueException
     */
    public FundamentalDiagramProfiles getFundamentalDiagramProfiles(Connection connection)
        throws TorqueException
    {
        if (aFundamentalDiagramProfiles == null && (!ObjectUtils.equals(this.fundamentalDiagramProfileId, null)))
        {
            aFundamentalDiagramProfiles = FundamentalDiagramProfilesPeer.retrieveByPK(SimpleKey.keyFor(this.fundamentalDiagramProfileId), connection);
        }
        return aFundamentalDiagramProfiles;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setFundamentalDiagramProfilesKey(ObjectKey key) throws TorqueException
    {

        setFundamentalDiagramProfileId(new Long(((NumberKey) key).longValue()));
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("FundamentalDiagramProfileId");
            fieldNames.add("Number");
            fieldNames.add("FreeFlowSpeed");
            fieldNames.add("CriticalSpeed");
            fieldNames.add("CongestionWaveSpeed");
            fieldNames.add("Capacity");
            fieldNames.add("JamDensity");
            fieldNames.add("CapacityDrop");
            fieldNames.add("CapacityStd");
            fieldNames.add("FreeFlowSpeedStd");
            fieldNames.add("CongestionWaveSpeedStd");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("FundamentalDiagramProfileId"))
        {
            return getFundamentalDiagramProfileId();
        }
        if (name.equals("Number"))
        {
            return getNumber();
        }
        if (name.equals("FreeFlowSpeed"))
        {
            return getFreeFlowSpeed();
        }
        if (name.equals("CriticalSpeed"))
        {
            return getCriticalSpeed();
        }
        if (name.equals("CongestionWaveSpeed"))
        {
            return getCongestionWaveSpeed();
        }
        if (name.equals("Capacity"))
        {
            return getCapacity();
        }
        if (name.equals("JamDensity"))
        {
            return getJamDensity();
        }
        if (name.equals("CapacityDrop"))
        {
            return getCapacityDrop();
        }
        if (name.equals("CapacityStd"))
        {
            return getCapacityStd();
        }
        if (name.equals("FreeFlowSpeedStd"))
        {
            return getFreeFlowSpeedStd();
        }
        if (name.equals("CongestionWaveSpeedStd"))
        {
            return getCongestionWaveSpeedStd();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("FundamentalDiagramProfileId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFundamentalDiagramProfileId((Long) value);
            return true;
        }
        if (name.equals("Number"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNumber((Integer) value);
            return true;
        }
        if (name.equals("FreeFlowSpeed"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFreeFlowSpeed((BigDecimal) value);
            return true;
        }
        if (name.equals("CriticalSpeed"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCriticalSpeed((BigDecimal) value);
            return true;
        }
        if (name.equals("CongestionWaveSpeed"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCongestionWaveSpeed((BigDecimal) value);
            return true;
        }
        if (name.equals("Capacity"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCapacity((BigDecimal) value);
            return true;
        }
        if (name.equals("JamDensity"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setJamDensity((BigDecimal) value);
            return true;
        }
        if (name.equals("CapacityDrop"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCapacityDrop((BigDecimal) value);
            return true;
        }
        if (name.equals("CapacityStd"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCapacityStd((BigDecimal) value);
            return true;
        }
        if (name.equals("FreeFlowSpeedStd"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFreeFlowSpeedStd((BigDecimal) value);
            return true;
        }
        if (name.equals("CongestionWaveSpeedStd"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCongestionWaveSpeedStd((BigDecimal) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(FundamentalDiagramsPeer.FUNDAMENTAL_DIAGRAM_PROFILE_ID))
        {
            return getFundamentalDiagramProfileId();
        }
        if (name.equals(FundamentalDiagramsPeer.NUMBER))
        {
            return getNumber();
        }
        if (name.equals(FundamentalDiagramsPeer.FREE_FLOW_SPEED))
        {
            return getFreeFlowSpeed();
        }
        if (name.equals(FundamentalDiagramsPeer.CRITICAL_SPEED))
        {
            return getCriticalSpeed();
        }
        if (name.equals(FundamentalDiagramsPeer.CONGESTION_WAVE_SPEED))
        {
            return getCongestionWaveSpeed();
        }
        if (name.equals(FundamentalDiagramsPeer.CAPACITY))
        {
            return getCapacity();
        }
        if (name.equals(FundamentalDiagramsPeer.JAM_DENSITY))
        {
            return getJamDensity();
        }
        if (name.equals(FundamentalDiagramsPeer.CAPACITY_DROP))
        {
            return getCapacityDrop();
        }
        if (name.equals(FundamentalDiagramsPeer.CAPACITY_STD))
        {
            return getCapacityStd();
        }
        if (name.equals(FundamentalDiagramsPeer.FREE_FLOW_SPEED_STD))
        {
            return getFreeFlowSpeedStd();
        }
        if (name.equals(FundamentalDiagramsPeer.CONGESTION_WAVE_SPEED_STD))
        {
            return getCongestionWaveSpeedStd();
        }
        if (name.equals(FundamentalDiagramsPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(FundamentalDiagramsPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(FundamentalDiagramsPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(FundamentalDiagramsPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(FundamentalDiagramsPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (FundamentalDiagramsPeer.FUNDAMENTAL_DIAGRAM_PROFILE_ID.equals(name))
        {
            return setByName("FundamentalDiagramProfileId", value);
        }
      if (FundamentalDiagramsPeer.NUMBER.equals(name))
        {
            return setByName("Number", value);
        }
      if (FundamentalDiagramsPeer.FREE_FLOW_SPEED.equals(name))
        {
            return setByName("FreeFlowSpeed", value);
        }
      if (FundamentalDiagramsPeer.CRITICAL_SPEED.equals(name))
        {
            return setByName("CriticalSpeed", value);
        }
      if (FundamentalDiagramsPeer.CONGESTION_WAVE_SPEED.equals(name))
        {
            return setByName("CongestionWaveSpeed", value);
        }
      if (FundamentalDiagramsPeer.CAPACITY.equals(name))
        {
            return setByName("Capacity", value);
        }
      if (FundamentalDiagramsPeer.JAM_DENSITY.equals(name))
        {
            return setByName("JamDensity", value);
        }
      if (FundamentalDiagramsPeer.CAPACITY_DROP.equals(name))
        {
            return setByName("CapacityDrop", value);
        }
      if (FundamentalDiagramsPeer.CAPACITY_STD.equals(name))
        {
            return setByName("CapacityStd", value);
        }
      if (FundamentalDiagramsPeer.FREE_FLOW_SPEED_STD.equals(name))
        {
            return setByName("FreeFlowSpeedStd", value);
        }
      if (FundamentalDiagramsPeer.CONGESTION_WAVE_SPEED_STD.equals(name))
        {
            return setByName("CongestionWaveSpeedStd", value);
        }
      if (FundamentalDiagramsPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (FundamentalDiagramsPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (FundamentalDiagramsPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (FundamentalDiagramsPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (FundamentalDiagramsPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getFundamentalDiagramProfileId();
        }
        if (pos == 1)
        {
            return getNumber();
        }
        if (pos == 2)
        {
            return getFreeFlowSpeed();
        }
        if (pos == 3)
        {
            return getCriticalSpeed();
        }
        if (pos == 4)
        {
            return getCongestionWaveSpeed();
        }
        if (pos == 5)
        {
            return getCapacity();
        }
        if (pos == 6)
        {
            return getJamDensity();
        }
        if (pos == 7)
        {
            return getCapacityDrop();
        }
        if (pos == 8)
        {
            return getCapacityStd();
        }
        if (pos == 9)
        {
            return getFreeFlowSpeedStd();
        }
        if (pos == 10)
        {
            return getCongestionWaveSpeedStd();
        }
        if (pos == 11)
        {
            return getCreated();
        }
        if (pos == 12)
        {
            return getModified();
        }
        if (pos == 13)
        {
            return getCreatedBy();
        }
        if (pos == 14)
        {
            return getModifiedBy();
        }
        if (pos == 15)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("FundamentalDiagramProfileId", value);
        }
    if (position == 1)
        {
            return setByName("Number", value);
        }
    if (position == 2)
        {
            return setByName("FreeFlowSpeed", value);
        }
    if (position == 3)
        {
            return setByName("CriticalSpeed", value);
        }
    if (position == 4)
        {
            return setByName("CongestionWaveSpeed", value);
        }
    if (position == 5)
        {
            return setByName("Capacity", value);
        }
    if (position == 6)
        {
            return setByName("JamDensity", value);
        }
    if (position == 7)
        {
            return setByName("CapacityDrop", value);
        }
    if (position == 8)
        {
            return setByName("CapacityStd", value);
        }
    if (position == 9)
        {
            return setByName("FreeFlowSpeedStd", value);
        }
    if (position == 10)
        {
            return setByName("CongestionWaveSpeedStd", value);
        }
    if (position == 11)
        {
            return setByName("Created", value);
        }
    if (position == 12)
        {
            return setByName("Modified", value);
        }
    if (position == 13)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 14)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 15)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(FundamentalDiagramsPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    FundamentalDiagramsPeer.doInsert((FundamentalDiagrams) this, con);
                    setNew(false);
                }
                else
                {
                    FundamentalDiagramsPeer.doUpdate((FundamentalDiagrams) this, con);
                }
            }

            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setFundamentalDiagramProfileId(new Long(((NumberKey)keys[0]).longValue()));
        setNumber(new Integer(((NumberKey)keys[1]).intValue()));
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param fundamentalDiagramProfileId Long
     * @param number Integer
     */
    public void setPrimaryKey( Long fundamentalDiagramProfileId, Integer number)
        throws TorqueException
    {
        setFundamentalDiagramProfileId(fundamentalDiagramProfileId);
        setNumber(number);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getFundamentalDiagramProfileId());
        pks[1] = SimpleKey.keyFor(getNumber());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public FundamentalDiagrams copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public FundamentalDiagrams copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public FundamentalDiagrams copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new FundamentalDiagrams(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public FundamentalDiagrams copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new FundamentalDiagrams(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected FundamentalDiagrams copyInto(FundamentalDiagrams copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected FundamentalDiagrams copyInto(FundamentalDiagrams copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected FundamentalDiagrams copyInto(FundamentalDiagrams copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setFundamentalDiagramProfileId(fundamentalDiagramProfileId);
        copyObj.setNumber(number);
        copyObj.setFreeFlowSpeed(freeFlowSpeed);
        copyObj.setCriticalSpeed(criticalSpeed);
        copyObj.setCongestionWaveSpeed(congestionWaveSpeed);
        copyObj.setCapacity(capacity);
        copyObj.setJamDensity(jamDensity);
        copyObj.setCapacityDrop(capacityDrop);
        copyObj.setCapacityStd(capacityStd);
        copyObj.setFreeFlowSpeedStd(freeFlowSpeedStd);
        copyObj.setCongestionWaveSpeedStd(congestionWaveSpeedStd);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setFundamentalDiagramProfileId((Long)null);
        copyObj.setNumber((Integer)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected FundamentalDiagrams copyInto(FundamentalDiagrams copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setFundamentalDiagramProfileId(fundamentalDiagramProfileId);
        copyObj.setNumber(number);
        copyObj.setFreeFlowSpeed(freeFlowSpeed);
        copyObj.setCriticalSpeed(criticalSpeed);
        copyObj.setCongestionWaveSpeed(congestionWaveSpeed);
        copyObj.setCapacity(capacity);
        copyObj.setJamDensity(jamDensity);
        copyObj.setCapacityDrop(capacityDrop);
        copyObj.setCapacityStd(capacityStd);
        copyObj.setFreeFlowSpeedStd(freeFlowSpeedStd);
        copyObj.setCongestionWaveSpeedStd(congestionWaveSpeedStd);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setFundamentalDiagramProfileId((Long)null);
        copyObj.setNumber((Integer)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public FundamentalDiagramsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return FundamentalDiagramsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("FundamentalDiagrams:\n");
        str.append("FundamentalDiagramProfileId = ")
           .append(getFundamentalDiagramProfileId())
           .append("\n");
        str.append("Number = ")
           .append(getNumber())
           .append("\n");
        str.append("FreeFlowSpeed = ")
           .append(getFreeFlowSpeed())
           .append("\n");
        str.append("CriticalSpeed = ")
           .append(getCriticalSpeed())
           .append("\n");
        str.append("CongestionWaveSpeed = ")
           .append(getCongestionWaveSpeed())
           .append("\n");
        str.append("Capacity = ")
           .append(getCapacity())
           .append("\n");
        str.append("JamDensity = ")
           .append(getJamDensity())
           .append("\n");
        str.append("CapacityDrop = ")
           .append(getCapacityDrop())
           .append("\n");
        str.append("CapacityStd = ")
           .append(getCapacityStd())
           .append("\n");
        str.append("FreeFlowSpeedStd = ")
           .append(getFreeFlowSpeedStd())
           .append("\n");
        str.append("CongestionWaveSpeedStd = ")
           .append(getCongestionWaveSpeedStd())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
