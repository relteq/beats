package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to DataSources
 */
public abstract class BaseDataSources extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final DataSourcesPeer peer =
        new DataSourcesPeer();


    /** The value for the id field */
    private Long id;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated Sensors
        if (collSensorss != null)
        {
            for (int i = 0; i < collSensorss.size(); i++)
            {
                ((Sensors) collSensorss.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated SimulationRuns
        if (collSimulationRunss != null)
        {
            for (int i = 0; i < collSimulationRunss.size(); i++)
            {
                ((SimulationRuns) collSimulationRunss.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated LinkDataTotal
        if (collLinkDataTotals != null)
        {
            for (int i = 0; i < collLinkDataTotals.size(); i++)
            {
                ((LinkDataTotal) collLinkDataTotals.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated LinkDataDetailed
        if (collLinkDataDetaileds != null)
        {
            for (int i = 0; i < collLinkDataDetaileds.size(); i++)
            {
                ((LinkDataDetailed) collLinkDataDetaileds.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated LinkPerformanceTotal
        if (collLinkPerformanceTotals != null)
        {
            for (int i = 0; i < collLinkPerformanceTotals.size(); i++)
            {
                ((LinkPerformanceTotal) collLinkPerformanceTotals.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated LinkPerformanceDetailed
        if (collLinkPerformanceDetaileds != null)
        {
            for (int i = 0; i < collLinkPerformanceDetaileds.size(); i++)
            {
                ((LinkPerformanceDetailed) collLinkPerformanceDetaileds.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated RoutePerformanceTotal
        if (collRoutePerformanceTotals != null)
        {
            for (int i = 0; i < collRoutePerformanceTotals.size(); i++)
            {
                ((RoutePerformanceTotal) collRoutePerformanceTotals.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated SignalData
        if (collSignalDatas != null)
        {
            for (int i = 0; i < collSignalDatas.size(); i++)
            {
                ((SignalData) collSignalDatas.get(i))
                        .setDataSourceId(v);
            }
        }

        // update associated SignalPhasePerformance
        if (collSignalPhasePerformances != null)
        {
            for (int i = 0; i < collSignalPhasePerformances.size(); i++)
            {
                ((SignalPhasePerformance) collSignalPhasePerformances.get(i))
                        .setDataSourceId(v);
            }
        }
    }

       


    /**
     * Collection to store aggregation of collSensorss
     */
    protected List collSensorss;

    /**
     * Temporary storage of collSensorss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSensorss()
    {
        if (collSensorss == null)
        {
            collSensorss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Sensors object to this object
     * through the Sensors foreign key attribute
     *
     * @param l Sensors
     * @throws TorqueException
     */
    public void addSensors(Sensors l) throws TorqueException
    {
        getSensorss().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a Sensors object to this object
     * through the Sensors foreign key attribute using connection.
     *
     * @param l Sensors
     * @throws TorqueException
     */
    public void addSensors(Sensors l, Connection con) throws TorqueException
    {
        getSensorss(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collSensorss
     */
    private Criteria lastSensorssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSensorss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSensorss()
        throws TorqueException
    {
        if (collSensorss == null)
        {
            collSensorss = getSensorss(new Criteria(10));
        }
        return collSensorss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related Sensorss from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSensorss(Criteria criteria) throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.DATA_SOURCE_ID, getId() );
                collSensorss = SensorsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
                if (!lastSensorssCriteria.equals(criteria))
                {
                    collSensorss = SensorsPeer.doSelect(criteria);
                }
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSensorss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSensorss(Connection con) throws TorqueException
    {
        if (collSensorss == null)
        {
            collSensorss = getSensorss(new Criteria(10), con);
        }
        return collSensorss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related Sensorss from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSensorss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                 criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
                 collSensorss = SensorsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
                 if (!lastSensorssCriteria.equals(criteria))
                 {
                     collSensorss = SensorsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSensorssCriteria = criteria;

         return collSensorss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related Sensorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSensorssJoinSensorSets(Criteria criteria)
        throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
                collSensorss = SensorsPeer.doSelectJoinSensorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
            if (!lastSensorssCriteria.equals(criteria))
            {
                collSensorss = SensorsPeer.doSelectJoinSensorSets(criteria);
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related Sensorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSensorssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
                collSensorss = SensorsPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
            if (!lastSensorssCriteria.equals(criteria))
            {
                collSensorss = SensorsPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related Sensorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSensorssJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
                collSensorss = SensorsPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorsPeer.DATA_SOURCE_ID, getId());
            if (!lastSensorssCriteria.equals(criteria))
            {
                collSensorss = SensorsPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }





    /**
     * Collection to store aggregation of collSimulationRunss
     */
    protected List collSimulationRunss;

    /**
     * Temporary storage of collSimulationRunss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSimulationRunss()
    {
        if (collSimulationRunss == null)
        {
            collSimulationRunss = new ArrayList();
        }
    }


    /**
     * Method called to associate a SimulationRuns object to this object
     * through the SimulationRuns foreign key attribute
     *
     * @param l SimulationRuns
     * @throws TorqueException
     */
    public void addSimulationRuns(SimulationRuns l) throws TorqueException
    {
        getSimulationRunss().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a SimulationRuns object to this object
     * through the SimulationRuns foreign key attribute using connection.
     *
     * @param l SimulationRuns
     * @throws TorqueException
     */
    public void addSimulationRuns(SimulationRuns l, Connection con) throws TorqueException
    {
        getSimulationRunss(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collSimulationRunss
     */
    private Criteria lastSimulationRunssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSimulationRunss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSimulationRunss()
        throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            collSimulationRunss = getSimulationRunss(new Criteria(10));
        }
        return collSimulationRunss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSimulationRunss(Criteria criteria) throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId() );
                collSimulationRunss = SimulationRunsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
                if (!lastSimulationRunssCriteria.equals(criteria))
                {
                    collSimulationRunss = SimulationRunsPeer.doSelect(criteria);
                }
            }
        }
        lastSimulationRunssCriteria = criteria;

        return collSimulationRunss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSimulationRunss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSimulationRunss(Connection con) throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            collSimulationRunss = getSimulationRunss(new Criteria(10), con);
        }
        return collSimulationRunss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSimulationRunss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                 criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
                 collSimulationRunss = SimulationRunsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
                 if (!lastSimulationRunssCriteria.equals(criteria))
                 {
                     collSimulationRunss = SimulationRunsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSimulationRunssCriteria = criteria;

         return collSimulationRunss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSimulationRunssJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
                collSimulationRunss = SimulationRunsPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
            if (!lastSimulationRunssCriteria.equals(criteria))
            {
                collSimulationRunss = SimulationRunsPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSimulationRunssCriteria = criteria;

        return collSimulationRunss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSimulationRunssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
                collSimulationRunss = SimulationRunsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SimulationRunsPeer.DATA_SOURCE_ID, getId());
            if (!lastSimulationRunssCriteria.equals(criteria))
            {
                collSimulationRunss = SimulationRunsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastSimulationRunssCriteria = criteria;

        return collSimulationRunss;
    }





    /**
     * Collection to store aggregation of collLinkDataTotals
     */
    protected List collLinkDataTotals;

    /**
     * Temporary storage of collLinkDataTotals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataTotals()
    {
        if (collLinkDataTotals == null)
        {
            collLinkDataTotals = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataTotal object to this object
     * through the LinkDataTotal foreign key attribute
     *
     * @param l LinkDataTotal
     * @throws TorqueException
     */
    public void addLinkDataTotal(LinkDataTotal l) throws TorqueException
    {
        getLinkDataTotals().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a LinkDataTotal object to this object
     * through the LinkDataTotal foreign key attribute using connection.
     *
     * @param l LinkDataTotal
     * @throws TorqueException
     */
    public void addLinkDataTotal(LinkDataTotal l, Connection con) throws TorqueException
    {
        getLinkDataTotals(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataTotals
     */
    private Criteria lastLinkDataTotalsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataTotals(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataTotals()
        throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            collLinkDataTotals = getLinkDataTotals(new Criteria(10));
        }
        return collLinkDataTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataTotals(Criteria criteria) throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId() );
                collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
                if (!lastLinkDataTotalsCriteria.equals(criteria))
                {
                    collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataTotalsCriteria = criteria;

        return collLinkDataTotals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataTotals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataTotals(Connection con) throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            collLinkDataTotals = getLinkDataTotals(new Criteria(10), con);
        }
        return collLinkDataTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataTotals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
                 collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
                 if (!lastLinkDataTotalsCriteria.equals(criteria))
                 {
                     collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataTotalsCriteria = criteria;

         return collLinkDataTotals;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataTotalsJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataTotalsCriteria.equals(criteria))
            {
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkDataTotalsCriteria = criteria;

        return collLinkDataTotals;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataTotalsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataTotalPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataTotalsCriteria.equals(criteria))
            {
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataTotalsCriteria = criteria;

        return collLinkDataTotals;
    }





    /**
     * Collection to store aggregation of collLinkDataDetaileds
     */
    protected List collLinkDataDetaileds;

    /**
     * Temporary storage of collLinkDataDetaileds to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataDetaileds()
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailed(LinkDataDetailed l) throws TorqueException
    {
        getLinkDataDetaileds().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute using connection.
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailed(LinkDataDetailed l, Connection con) throws TorqueException
    {
        getLinkDataDetaileds(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataDetaileds
     */
    private Criteria lastLinkDataDetailedsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetaileds(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataDetaileds()
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = getLinkDataDetaileds(new Criteria(10));
        }
        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataDetaileds(Criteria criteria) throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId() );
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                if (!lastLinkDataDetailedsCriteria.equals(criteria))
                {
                    collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetaileds(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetaileds(Connection con) throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = getLinkDataDetaileds(new Criteria(10), con);
        }
        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetaileds(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                 collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                 if (!lastLinkDataDetailedsCriteria.equals(criteria))
                 {
                     collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataDetailedsCriteria = criteria;

         return collLinkDataDetaileds;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataDetailedsJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataDetailedsJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataDetailedsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataDetailedsJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkDataDetailedsJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }





    /**
     * Collection to store aggregation of collLinkPerformanceTotals
     */
    protected List collLinkPerformanceTotals;

    /**
     * Temporary storage of collLinkPerformanceTotals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkPerformanceTotals()
    {
        if (collLinkPerformanceTotals == null)
        {
            collLinkPerformanceTotals = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkPerformanceTotal object to this object
     * through the LinkPerformanceTotal foreign key attribute
     *
     * @param l LinkPerformanceTotal
     * @throws TorqueException
     */
    public void addLinkPerformanceTotal(LinkPerformanceTotal l) throws TorqueException
    {
        getLinkPerformanceTotals().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a LinkPerformanceTotal object to this object
     * through the LinkPerformanceTotal foreign key attribute using connection.
     *
     * @param l LinkPerformanceTotal
     * @throws TorqueException
     */
    public void addLinkPerformanceTotal(LinkPerformanceTotal l, Connection con) throws TorqueException
    {
        getLinkPerformanceTotals(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collLinkPerformanceTotals
     */
    private Criteria lastLinkPerformanceTotalsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceTotals(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkPerformanceTotals()
        throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            collLinkPerformanceTotals = getLinkPerformanceTotals(new Criteria(10));
        }
        return collLinkPerformanceTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkPerformanceTotals(Criteria criteria) throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId() );
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
                if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
                {
                    collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria);
                }
            }
        }
        lastLinkPerformanceTotalsCriteria = criteria;

        return collLinkPerformanceTotals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceTotals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceTotals(Connection con) throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            collLinkPerformanceTotals = getLinkPerformanceTotals(new Criteria(10), con);
        }
        return collLinkPerformanceTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceTotals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                 criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
                 collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
                 if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
                 {
                     collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkPerformanceTotalsCriteria = criteria;

         return collLinkPerformanceTotals;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkPerformanceTotalsJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
            {
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkPerformanceTotalsCriteria = criteria;

        return collLinkPerformanceTotals;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkPerformanceTotalsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceTotalPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
            {
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkPerformanceTotalsCriteria = criteria;

        return collLinkPerformanceTotals;
    }





    /**
     * Collection to store aggregation of collLinkPerformanceDetaileds
     */
    protected List collLinkPerformanceDetaileds;

    /**
     * Temporary storage of collLinkPerformanceDetaileds to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkPerformanceDetaileds()
    {
        if (collLinkPerformanceDetaileds == null)
        {
            collLinkPerformanceDetaileds = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailed(LinkPerformanceDetailed l) throws TorqueException
    {
        getLinkPerformanceDetaileds().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute using connection.
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailed(LinkPerformanceDetailed l, Connection con) throws TorqueException
    {
        getLinkPerformanceDetaileds(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collLinkPerformanceDetaileds
     */
    private Criteria lastLinkPerformanceDetailedsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetaileds(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkPerformanceDetaileds()
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            collLinkPerformanceDetaileds = getLinkPerformanceDetaileds(new Criteria(10));
        }
        return collLinkPerformanceDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkPerformanceDetaileds(Criteria criteria) throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId() );
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
                {
                    collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetaileds(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetaileds(Connection con) throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            collLinkPerformanceDetaileds = getLinkPerformanceDetaileds(new Criteria(10), con);
        }
        return collLinkPerformanceDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetaileds(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                 criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                 collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                 if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
                 {
                     collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkPerformanceDetailedsCriteria = criteria;

         return collLinkPerformanceDetaileds;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkPerformanceDetailedsJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkPerformanceDetailedsJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkPerformanceDetailedsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getLinkPerformanceDetailedsJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DATA_SOURCE_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }





    /**
     * Collection to store aggregation of collRoutePerformanceTotals
     */
    protected List collRoutePerformanceTotals;

    /**
     * Temporary storage of collRoutePerformanceTotals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRoutePerformanceTotals()
    {
        if (collRoutePerformanceTotals == null)
        {
            collRoutePerformanceTotals = new ArrayList();
        }
    }


    /**
     * Method called to associate a RoutePerformanceTotal object to this object
     * through the RoutePerformanceTotal foreign key attribute
     *
     * @param l RoutePerformanceTotal
     * @throws TorqueException
     */
    public void addRoutePerformanceTotal(RoutePerformanceTotal l) throws TorqueException
    {
        getRoutePerformanceTotals().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a RoutePerformanceTotal object to this object
     * through the RoutePerformanceTotal foreign key attribute using connection.
     *
     * @param l RoutePerformanceTotal
     * @throws TorqueException
     */
    public void addRoutePerformanceTotal(RoutePerformanceTotal l, Connection con) throws TorqueException
    {
        getRoutePerformanceTotals(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collRoutePerformanceTotals
     */
    private Criteria lastRoutePerformanceTotalsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRoutePerformanceTotals(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getRoutePerformanceTotals()
        throws TorqueException
    {
        if (collRoutePerformanceTotals == null)
        {
            collRoutePerformanceTotals = getRoutePerformanceTotals(new Criteria(10));
        }
        return collRoutePerformanceTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related RoutePerformanceTotals from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getRoutePerformanceTotals(Criteria criteria) throws TorqueException
    {
        if (collRoutePerformanceTotals == null)
        {
            if (isNew())
            {
               collRoutePerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId() );
                collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
                if (!lastRoutePerformanceTotalsCriteria.equals(criteria))
                {
                    collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelect(criteria);
                }
            }
        }
        lastRoutePerformanceTotalsCriteria = criteria;

        return collRoutePerformanceTotals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRoutePerformanceTotals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRoutePerformanceTotals(Connection con) throws TorqueException
    {
        if (collRoutePerformanceTotals == null)
        {
            collRoutePerformanceTotals = getRoutePerformanceTotals(new Criteria(10), con);
        }
        return collRoutePerformanceTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related RoutePerformanceTotals from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRoutePerformanceTotals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRoutePerformanceTotals == null)
        {
            if (isNew())
            {
               collRoutePerformanceTotals = new ArrayList();
            }
            else
            {
                 criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
                 collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
                 if (!lastRoutePerformanceTotalsCriteria.equals(criteria))
                 {
                     collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRoutePerformanceTotalsCriteria = criteria;

         return collRoutePerformanceTotals;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related RoutePerformanceTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getRoutePerformanceTotalsJoinRoutes(Criteria criteria)
        throws TorqueException
    {
        if (collRoutePerformanceTotals == null)
        {
            if (isNew())
            {
               collRoutePerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
                collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelectJoinRoutes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
            if (!lastRoutePerformanceTotalsCriteria.equals(criteria))
            {
                collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelectJoinRoutes(criteria);
            }
        }
        lastRoutePerformanceTotalsCriteria = criteria;

        return collRoutePerformanceTotals;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related RoutePerformanceTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getRoutePerformanceTotalsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collRoutePerformanceTotals == null)
        {
            if (isNew())
            {
               collRoutePerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
                collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RoutePerformanceTotalPeer.DATA_SOURCE_ID, getId());
            if (!lastRoutePerformanceTotalsCriteria.equals(criteria))
            {
                collRoutePerformanceTotals = RoutePerformanceTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastRoutePerformanceTotalsCriteria = criteria;

        return collRoutePerformanceTotals;
    }





    /**
     * Collection to store aggregation of collSignalDatas
     */
    protected List collSignalDatas;

    /**
     * Temporary storage of collSignalDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalDatas()
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalData object to this object
     * through the SignalData foreign key attribute
     *
     * @param l SignalData
     * @throws TorqueException
     */
    public void addSignalData(SignalData l) throws TorqueException
    {
        getSignalDatas().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a SignalData object to this object
     * through the SignalData foreign key attribute using connection.
     *
     * @param l SignalData
     * @throws TorqueException
     */
    public void addSignalData(SignalData l, Connection con) throws TorqueException
    {
        getSignalDatas(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collSignalDatas
     */
    private Criteria lastSignalDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalDatas()
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = getSignalDatas(new Criteria(10));
        }
        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related SignalDatas from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalDatas(Criteria criteria) throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId() );
                collSignalDatas = SignalDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
                if (!lastSignalDatasCriteria.equals(criteria))
                {
                    collSignalDatas = SignalDataPeer.doSelect(criteria);
                }
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalDatas(Connection con) throws TorqueException
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = getSignalDatas(new Criteria(10), con);
        }
        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related SignalDatas from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                 criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
                 collSignalDatas = SignalDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
                 if (!lastSignalDatasCriteria.equals(criteria))
                 {
                     collSignalDatas = SignalDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalDatasCriteria = criteria;

         return collSignalDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSignalDatasJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinSignals(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSignalDatasJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSignalDatasJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.DATA_SOURCE_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }





    /**
     * Collection to store aggregation of collSignalPhasePerformances
     */
    protected List collSignalPhasePerformances;

    /**
     * Temporary storage of collSignalPhasePerformances to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalPhasePerformances()
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalPhasePerformance object to this object
     * through the SignalPhasePerformance foreign key attribute
     *
     * @param l SignalPhasePerformance
     * @throws TorqueException
     */
    public void addSignalPhasePerformance(SignalPhasePerformance l) throws TorqueException
    {
        getSignalPhasePerformances().add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * Method called to associate a SignalPhasePerformance object to this object
     * through the SignalPhasePerformance foreign key attribute using connection.
     *
     * @param l SignalPhasePerformance
     * @throws TorqueException
     */
    public void addSignalPhasePerformance(SignalPhasePerformance l, Connection con) throws TorqueException
    {
        getSignalPhasePerformances(con).add(l);
        l.setDataSources((DataSources) this);
    }

    /**
     * The criteria used to select the current contents of collSignalPhasePerformances
     */
    private Criteria lastSignalPhasePerformancesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalPhasePerformances(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalPhasePerformances()
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = getSignalPhasePerformances(new Criteria(10));
        }
        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalPhasePerformances(Criteria criteria) throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId() );
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
                if (!lastSignalPhasePerformancesCriteria.equals(criteria))
                {
                    collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria);
                }
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalPhasePerformances(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalPhasePerformances(Connection con) throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = getSignalPhasePerformances(new Criteria(10), con);
        }
        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     * If this DataSources is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalPhasePerformances(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                 criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
                 collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
                 if (!lastSignalPhasePerformancesCriteria.equals(criteria))
                 {
                     collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalPhasePerformancesCriteria = criteria;

         return collSignalPhasePerformances;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSignalPhasePerformancesJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinSignals(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSignalPhasePerformancesJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinNetworks(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DataSources is new, it will return
     * an empty collection; or if this DataSources has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DataSources.
     */
    protected List getSignalPhasePerformancesJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.DATA_SOURCE_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(DataSourcesPeer.ID))
        {
            return getId();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (DataSourcesPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(DataSourcesPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    DataSourcesPeer.doInsert((DataSources) this, con);
                    setNew(false);
                }
                else
                {
                    DataSourcesPeer.doUpdate((DataSources) this, con);
                }
            }


            if (collSensorss != null)
            {
                for (int i = 0; i < collSensorss.size(); i++)
                {
                    ((Sensors) collSensorss.get(i)).save(con);
                }
            }

            if (collSimulationRunss != null)
            {
                for (int i = 0; i < collSimulationRunss.size(); i++)
                {
                    ((SimulationRuns) collSimulationRunss.get(i)).save(con);
                }
            }

            if (collLinkDataTotals != null)
            {
                for (int i = 0; i < collLinkDataTotals.size(); i++)
                {
                    ((LinkDataTotal) collLinkDataTotals.get(i)).save(con);
                }
            }

            if (collLinkDataDetaileds != null)
            {
                for (int i = 0; i < collLinkDataDetaileds.size(); i++)
                {
                    ((LinkDataDetailed) collLinkDataDetaileds.get(i)).save(con);
                }
            }

            if (collLinkPerformanceTotals != null)
            {
                for (int i = 0; i < collLinkPerformanceTotals.size(); i++)
                {
                    ((LinkPerformanceTotal) collLinkPerformanceTotals.get(i)).save(con);
                }
            }

            if (collLinkPerformanceDetaileds != null)
            {
                for (int i = 0; i < collLinkPerformanceDetaileds.size(); i++)
                {
                    ((LinkPerformanceDetailed) collLinkPerformanceDetaileds.get(i)).save(con);
                }
            }

            if (collRoutePerformanceTotals != null)
            {
                for (int i = 0; i < collRoutePerformanceTotals.size(); i++)
                {
                    ((RoutePerformanceTotal) collRoutePerformanceTotals.get(i)).save(con);
                }
            }

            if (collSignalDatas != null)
            {
                for (int i = 0; i < collSignalDatas.size(); i++)
                {
                    ((SignalData) collSignalDatas.get(i)).save(con);
                }
            }

            if (collSignalPhasePerformances != null)
            {
                for (int i = 0; i < collSignalPhasePerformances.size(); i++)
                {
                    ((SignalPhasePerformance) collSignalPhasePerformances.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public DataSources copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public DataSources copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public DataSources copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new DataSources(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public DataSources copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new DataSources(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected DataSources copyInto(DataSources copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected DataSources copyInto(DataSources copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected DataSources copyInto(DataSources copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vSensorss = getSensorss();
        if (vSensorss != null)
        {
            for (int i = 0; i < vSensorss.size(); i++)
            {
                Sensors obj = (Sensors) vSensorss.get(i);
                copyObj.addSensors(obj.copy());
            }
        }
        else
        {
            copyObj.collSensorss = null;
        }


        List vSimulationRunss = getSimulationRunss();
        if (vSimulationRunss != null)
        {
            for (int i = 0; i < vSimulationRunss.size(); i++)
            {
                SimulationRuns obj = (SimulationRuns) vSimulationRunss.get(i);
                copyObj.addSimulationRuns(obj.copy());
            }
        }
        else
        {
            copyObj.collSimulationRunss = null;
        }


        List vLinkDataTotals = getLinkDataTotals();
        if (vLinkDataTotals != null)
        {
            for (int i = 0; i < vLinkDataTotals.size(); i++)
            {
                LinkDataTotal obj = (LinkDataTotal) vLinkDataTotals.get(i);
                copyObj.addLinkDataTotal(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataTotals = null;
        }


        List vLinkDataDetaileds = getLinkDataDetaileds();
        if (vLinkDataDetaileds != null)
        {
            for (int i = 0; i < vLinkDataDetaileds.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetaileds.get(i);
                copyObj.addLinkDataDetailed(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataDetaileds = null;
        }


        List vLinkPerformanceTotals = getLinkPerformanceTotals();
        if (vLinkPerformanceTotals != null)
        {
            for (int i = 0; i < vLinkPerformanceTotals.size(); i++)
            {
                LinkPerformanceTotal obj = (LinkPerformanceTotal) vLinkPerformanceTotals.get(i);
                copyObj.addLinkPerformanceTotal(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkPerformanceTotals = null;
        }


        List vLinkPerformanceDetaileds = getLinkPerformanceDetaileds();
        if (vLinkPerformanceDetaileds != null)
        {
            for (int i = 0; i < vLinkPerformanceDetaileds.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetaileds.get(i);
                copyObj.addLinkPerformanceDetailed(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetaileds = null;
        }


        List vRoutePerformanceTotals = getRoutePerformanceTotals();
        if (vRoutePerformanceTotals != null)
        {
            for (int i = 0; i < vRoutePerformanceTotals.size(); i++)
            {
                RoutePerformanceTotal obj = (RoutePerformanceTotal) vRoutePerformanceTotals.get(i);
                copyObj.addRoutePerformanceTotal(obj.copy());
            }
        }
        else
        {
            copyObj.collRoutePerformanceTotals = null;
        }


        List vSignalDatas = getSignalDatas();
        if (vSignalDatas != null)
        {
            for (int i = 0; i < vSignalDatas.size(); i++)
            {
                SignalData obj = (SignalData) vSignalDatas.get(i);
                copyObj.addSignalData(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalDatas = null;
        }


        List vSignalPhasePerformances = getSignalPhasePerformances();
        if (vSignalPhasePerformances != null)
        {
            for (int i = 0; i < vSignalPhasePerformances.size(); i++)
            {
                SignalPhasePerformance obj = (SignalPhasePerformance) vSignalPhasePerformances.get(i);
                copyObj.addSignalPhasePerformance(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalPhasePerformances = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected DataSources copyInto(DataSources copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vSensorss = getSensorss(con);
        if (vSensorss != null)
        {
            for (int i = 0; i < vSensorss.size(); i++)
            {
                Sensors obj = (Sensors) vSensorss.get(i);
                copyObj.addSensors(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSensorss = null;
        }


        List vSimulationRunss = getSimulationRunss(con);
        if (vSimulationRunss != null)
        {
            for (int i = 0; i < vSimulationRunss.size(); i++)
            {
                SimulationRuns obj = (SimulationRuns) vSimulationRunss.get(i);
                copyObj.addSimulationRuns(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSimulationRunss = null;
        }


        List vLinkDataTotals = getLinkDataTotals(con);
        if (vLinkDataTotals != null)
        {
            for (int i = 0; i < vLinkDataTotals.size(); i++)
            {
                LinkDataTotal obj = (LinkDataTotal) vLinkDataTotals.get(i);
                copyObj.addLinkDataTotal(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataTotals = null;
        }


        List vLinkDataDetaileds = getLinkDataDetaileds(con);
        if (vLinkDataDetaileds != null)
        {
            for (int i = 0; i < vLinkDataDetaileds.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetaileds.get(i);
                copyObj.addLinkDataDetailed(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataDetaileds = null;
        }


        List vLinkPerformanceTotals = getLinkPerformanceTotals(con);
        if (vLinkPerformanceTotals != null)
        {
            for (int i = 0; i < vLinkPerformanceTotals.size(); i++)
            {
                LinkPerformanceTotal obj = (LinkPerformanceTotal) vLinkPerformanceTotals.get(i);
                copyObj.addLinkPerformanceTotal(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkPerformanceTotals = null;
        }


        List vLinkPerformanceDetaileds = getLinkPerformanceDetaileds(con);
        if (vLinkPerformanceDetaileds != null)
        {
            for (int i = 0; i < vLinkPerformanceDetaileds.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetaileds.get(i);
                copyObj.addLinkPerformanceDetailed(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetaileds = null;
        }


        List vRoutePerformanceTotals = getRoutePerformanceTotals(con);
        if (vRoutePerformanceTotals != null)
        {
            for (int i = 0; i < vRoutePerformanceTotals.size(); i++)
            {
                RoutePerformanceTotal obj = (RoutePerformanceTotal) vRoutePerformanceTotals.get(i);
                copyObj.addRoutePerformanceTotal(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRoutePerformanceTotals = null;
        }


        List vSignalDatas = getSignalDatas(con);
        if (vSignalDatas != null)
        {
            for (int i = 0; i < vSignalDatas.size(); i++)
            {
                SignalData obj = (SignalData) vSignalDatas.get(i);
                copyObj.addSignalData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalDatas = null;
        }


        List vSignalPhasePerformances = getSignalPhasePerformances(con);
        if (vSignalPhasePerformances != null)
        {
            for (int i = 0; i < vSignalPhasePerformances.size(); i++)
            {
                SignalPhasePerformance obj = (SignalPhasePerformance) vSignalPhasePerformances.get(i);
                copyObj.addSignalPhasePerformance(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalPhasePerformances = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DataSourcesPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return DataSourcesPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("DataSources:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        return(str.toString());
    }
}
