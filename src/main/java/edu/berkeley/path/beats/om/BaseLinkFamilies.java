package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to LinkFamilies
 */
public abstract class BaseLinkFamilies extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final LinkFamiliesPeer peer =
        new LinkFamiliesPeer();


    /** The value for the id field */
    private Long id;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated Links
        if (collLinkss != null)
        {
            for (int i = 0; i < collLinkss.size(); i++)
            {
                ((Links) collLinkss.get(i))
                        .setId(v);
            }
        }

        // update associated LinkTurnRestrictions
        if (collLinkTurnRestrictionssRelatedByFromLinkId != null)
        {
            for (int i = 0; i < collLinkTurnRestrictionssRelatedByFromLinkId.size(); i++)
            {
                ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByFromLinkId.get(i))
                        .setFromLinkId(v);
            }
        }

        // update associated LinkTurnRestrictions
        if (collLinkTurnRestrictionssRelatedByToLinkId != null)
        {
            for (int i = 0; i < collLinkTurnRestrictionssRelatedByToLinkId.size(); i++)
            {
                ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByToLinkId.get(i))
                        .setToLinkId(v);
            }
        }

        // update associated NetworkConnections
        if (collNetworkConnectionssRelatedByFromLinkId != null)
        {
            for (int i = 0; i < collNetworkConnectionssRelatedByFromLinkId.size(); i++)
            {
                ((NetworkConnections) collNetworkConnectionssRelatedByFromLinkId.get(i))
                        .setFromLinkId(v);
            }
        }

        // update associated NetworkConnections
        if (collNetworkConnectionssRelatedByToLinkId != null)
        {
            for (int i = 0; i < collNetworkConnectionssRelatedByToLinkId.size(); i++)
            {
                ((NetworkConnections) collNetworkConnectionssRelatedByToLinkId.get(i))
                        .setToLinkId(v);
            }
        }

        // update associated DestinationNetworks
        if (collDestinationNetworkss != null)
        {
            for (int i = 0; i < collDestinationNetworkss.size(); i++)
            {
                ((DestinationNetworks) collDestinationNetworkss.get(i))
                        .setDestinationLinkId(v);
            }
        }

        // update associated DestinationNetworkLinks
        if (collDestinationNetworkLinkss != null)
        {
            for (int i = 0; i < collDestinationNetworkLinkss.size(); i++)
            {
                ((DestinationNetworkLinks) collDestinationNetworkLinkss.get(i))
                        .setLinkId(v);
            }
        }

        // update associated RouteLinks
        if (collRouteLinkss != null)
        {
            for (int i = 0; i < collRouteLinkss.size(); i++)
            {
                ((RouteLinks) collRouteLinkss.get(i))
                        .setLinkId(v);
            }
        }

        // update associated InitialDensities
        if (collInitialDensitiessRelatedByLinkId != null)
        {
            for (int i = 0; i < collInitialDensitiessRelatedByLinkId.size(); i++)
            {
                ((InitialDensities) collInitialDensitiessRelatedByLinkId.get(i))
                        .setLinkId(v);
            }
        }

        // update associated InitialDensities
        if (collInitialDensitiessRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < collInitialDensitiessRelatedByDestinationLinkId.size(); i++)
            {
                ((InitialDensities) collInitialDensitiessRelatedByDestinationLinkId.get(i))
                        .setDestinationLinkId(v);
            }
        }

        // update associated WeavingFactors
        if (collWeavingFactorssRelatedByInLinkId != null)
        {
            for (int i = 0; i < collWeavingFactorssRelatedByInLinkId.size(); i++)
            {
                ((WeavingFactors) collWeavingFactorssRelatedByInLinkId.get(i))
                        .setInLinkId(v);
            }
        }

        // update associated WeavingFactors
        if (collWeavingFactorssRelatedByOutLinkId != null)
        {
            for (int i = 0; i < collWeavingFactorssRelatedByOutLinkId.size(); i++)
            {
                ((WeavingFactors) collWeavingFactorssRelatedByOutLinkId.get(i))
                        .setOutLinkId(v);
            }
        }

        // update associated SplitRatios
        if (collSplitRatiossRelatedByInLinkId != null)
        {
            for (int i = 0; i < collSplitRatiossRelatedByInLinkId.size(); i++)
            {
                ((SplitRatios) collSplitRatiossRelatedByInLinkId.get(i))
                        .setInLinkId(v);
            }
        }

        // update associated SplitRatios
        if (collSplitRatiossRelatedByOutLinkId != null)
        {
            for (int i = 0; i < collSplitRatiossRelatedByOutLinkId.size(); i++)
            {
                ((SplitRatios) collSplitRatiossRelatedByOutLinkId.get(i))
                        .setOutLinkId(v);
            }
        }

        // update associated FundamentalDiagramProfiles
        if (collFundamentalDiagramProfiless != null)
        {
            for (int i = 0; i < collFundamentalDiagramProfiless.size(); i++)
            {
                ((FundamentalDiagramProfiles) collFundamentalDiagramProfiless.get(i))
                        .setLinkId(v);
            }
        }

        // update associated DemandProfiles
        if (collDemandProfilessRelatedByOriginLinkId != null)
        {
            for (int i = 0; i < collDemandProfilessRelatedByOriginLinkId.size(); i++)
            {
                ((DemandProfiles) collDemandProfilessRelatedByOriginLinkId.get(i))
                        .setOriginLinkId(v);
            }
        }

        // update associated DemandProfiles
        if (collDemandProfilessRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < collDemandProfilessRelatedByDestinationLinkId.size(); i++)
            {
                ((DemandProfiles) collDemandProfilessRelatedByDestinationLinkId.get(i))
                        .setDestinationLinkId(v);
            }
        }

        // update associated DownstreamBoundaryCapacityProfiles
        if (collDownstreamBoundaryCapacityProfiless != null)
        {
            for (int i = 0; i < collDownstreamBoundaryCapacityProfiless.size(); i++)
            {
                ((DownstreamBoundaryCapacityProfiles) collDownstreamBoundaryCapacityProfiless.get(i))
                        .setLinkId(v);
            }
        }

        // update associated Sensors
        if (collSensorss != null)
        {
            for (int i = 0; i < collSensorss.size(); i++)
            {
                ((Sensors) collSensorss.get(i))
                        .setLinkId(v);
            }
        }

        // update associated PhaseLinks
        if (collPhaseLinkss != null)
        {
            for (int i = 0; i < collPhaseLinkss.size(); i++)
            {
                ((PhaseLinks) collPhaseLinkss.get(i))
                        .setLinkId(v);
            }
        }

        // update associated EventSplitRatios
        if (collEventSplitRatiossRelatedByInLinkId != null)
        {
            for (int i = 0; i < collEventSplitRatiossRelatedByInLinkId.size(); i++)
            {
                ((EventSplitRatios) collEventSplitRatiossRelatedByInLinkId.get(i))
                        .setInLinkId(v);
            }
        }

        // update associated EventSplitRatios
        if (collEventSplitRatiossRelatedByOutLinkId != null)
        {
            for (int i = 0; i < collEventSplitRatiossRelatedByOutLinkId.size(); i++)
            {
                ((EventSplitRatios) collEventSplitRatiossRelatedByOutLinkId.get(i))
                        .setOutLinkId(v);
            }
        }

        // update associated LinkDataDetailed
        if (collLinkDataDetailedsRelatedByLinkId != null)
        {
            for (int i = 0; i < collLinkDataDetailedsRelatedByLinkId.size(); i++)
            {
                ((LinkDataDetailed) collLinkDataDetailedsRelatedByLinkId.get(i))
                        .setLinkId(v);
            }
        }

        // update associated LinkDataDetailed
        if (collLinkDataDetailedsRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < collLinkDataDetailedsRelatedByDestinationLinkId.size(); i++)
            {
                ((LinkDataDetailed) collLinkDataDetailedsRelatedByDestinationLinkId.get(i))
                        .setDestinationLinkId(v);
            }
        }

        // update associated LinkPerformanceDetailed
        if (collLinkPerformanceDetailedsRelatedByLinkId != null)
        {
            for (int i = 0; i < collLinkPerformanceDetailedsRelatedByLinkId.size(); i++)
            {
                ((LinkPerformanceDetailed) collLinkPerformanceDetailedsRelatedByLinkId.get(i))
                        .setLinkId(v);
            }
        }

        // update associated LinkPerformanceDetailed
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < collLinkPerformanceDetailedsRelatedByDestinationLinkId.size(); i++)
            {
                ((LinkPerformanceDetailed) collLinkPerformanceDetailedsRelatedByDestinationLinkId.get(i))
                        .setDestinationLinkId(v);
            }
        }
    }

       


    /**
     * Collection to store aggregation of collLinkss
     */
    protected List collLinkss;

    /**
     * Temporary storage of collLinkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkss()
    {
        if (collLinkss == null)
        {
            collLinkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinks(Links l) throws TorqueException
    {
        getLinkss().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute using connection.
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinks(Links l, Connection con) throws TorqueException
    {
        getLinkss(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkss
     */
    private Criteria lastLinkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkss()
        throws TorqueException
    {
        if (collLinkss == null)
        {
            collLinkss = getLinkss(new Criteria(10));
        }
        return collLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related Linkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkss(Criteria criteria) throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.ID, getId() );
                collLinkss = LinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinksPeer.ID, getId());
                if (!lastLinkssCriteria.equals(criteria))
                {
                    collLinkss = LinksPeer.doSelect(criteria);
                }
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkss(Connection con) throws TorqueException
    {
        if (collLinkss == null)
        {
            collLinkss = getLinkss(new Criteria(10), con);
        }
        return collLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related Linkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                 criteria.add(LinksPeer.ID, getId());
                 collLinkss = LinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinksPeer.ID, getId());
                 if (!lastLinkssCriteria.equals(criteria))
                 {
                     collLinkss = LinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkssCriteria = criteria;

         return collLinkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.ID, getId());
                collLinkss = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkssJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.ID, getId());
                collLinkss = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkssJoinNodeFamiliesRelatedByBegNodeId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.ID, getId());
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByBegNodeId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByBegNodeId(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkssJoinNodeFamiliesRelatedByEndNodeId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.ID, getId());
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByEndNodeId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByEndNodeId(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }





    /**
     * Collection to store aggregation of collLinkTurnRestrictionssRelatedByFromLinkId
     */
    protected List collLinkTurnRestrictionssRelatedByFromLinkId;

    /**
     * Temporary storage of collLinkTurnRestrictionssRelatedByFromLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkTurnRestrictionssRelatedByFromLinkId()
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            collLinkTurnRestrictionssRelatedByFromLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByFromLinkId(LinkTurnRestrictions l) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByFromLinkId().add(l);
        l.setLinkFamiliesRelatedByFromLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute using connection.
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByFromLinkId(LinkTurnRestrictions l, Connection con) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByFromLinkId(con).add(l);
        l.setLinkFamiliesRelatedByFromLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkTurnRestrictionssRelatedByFromLinkId
     */
    private Criteria lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByFromLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByFromLinkId()
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            collLinkTurnRestrictionssRelatedByFromLinkId = getLinkTurnRestrictionssRelatedByFromLinkId(new Criteria(10));
        }
        return collLinkTurnRestrictionssRelatedByFromLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByFromLinkId(Criteria criteria) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId() );
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
                if (!lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria.equals(criteria))
                {
                    collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelect(criteria);
                }
            }
        }
        lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByFromLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByFromLinkId(Connection con) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            collLinkTurnRestrictionssRelatedByFromLinkId = getLinkTurnRestrictionssRelatedByFromLinkId(new Criteria(10), con);
        }
        return collLinkTurnRestrictionssRelatedByFromLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByFromLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
                 collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
                 if (!lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria.equals(criteria))
                 {
                     collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria = criteria;

         return collLinkTurnRestrictionssRelatedByFromLinkId;
     }



















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkTurnRestrictionssRelatedByFromLinkIdJoinNetworksRelatedByFromNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkTurnRestrictionssRelatedByFromLinkIdJoinLinkFamiliesRelatedByToLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkTurnRestrictionssRelatedByFromLinkIdJoinNetworksRelatedByToNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.FROM_LINK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByFromLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByFromLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromLinkId;
    }





    /**
     * Collection to store aggregation of collLinkTurnRestrictionssRelatedByToLinkId
     */
    protected List collLinkTurnRestrictionssRelatedByToLinkId;

    /**
     * Temporary storage of collLinkTurnRestrictionssRelatedByToLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkTurnRestrictionssRelatedByToLinkId()
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            collLinkTurnRestrictionssRelatedByToLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByToLinkId(LinkTurnRestrictions l) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByToLinkId().add(l);
        l.setLinkFamiliesRelatedByToLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute using connection.
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByToLinkId(LinkTurnRestrictions l, Connection con) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByToLinkId(con).add(l);
        l.setLinkFamiliesRelatedByToLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkTurnRestrictionssRelatedByToLinkId
     */
    private Criteria lastLinkTurnRestrictionssRelatedByToLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByToLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByToLinkId()
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            collLinkTurnRestrictionssRelatedByToLinkId = getLinkTurnRestrictionssRelatedByToLinkId(new Criteria(10));
        }
        return collLinkTurnRestrictionssRelatedByToLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByToLinkId(Criteria criteria) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId() );
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
                if (!lastLinkTurnRestrictionssRelatedByToLinkIdCriteria.equals(criteria))
                {
                    collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelect(criteria);
                }
            }
        }
        lastLinkTurnRestrictionssRelatedByToLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByToLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByToLinkId(Connection con) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            collLinkTurnRestrictionssRelatedByToLinkId = getLinkTurnRestrictionssRelatedByToLinkId(new Criteria(10), con);
        }
        return collLinkTurnRestrictionssRelatedByToLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByToLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
                 collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
                 if (!lastLinkTurnRestrictionssRelatedByToLinkIdCriteria.equals(criteria))
                 {
                     collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkTurnRestrictionssRelatedByToLinkIdCriteria = criteria;

         return collLinkTurnRestrictionssRelatedByToLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkTurnRestrictionssRelatedByToLinkIdJoinLinkFamiliesRelatedByFromLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByToLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkTurnRestrictionssRelatedByToLinkIdJoinNetworksRelatedByFromNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByToLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkTurnRestrictionssRelatedByToLinkIdJoinNetworksRelatedByToNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.TO_LINK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByToLinkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByToLinkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToLinkId;
    }





    /**
     * Collection to store aggregation of collNetworkConnectionssRelatedByFromLinkId
     */
    protected List collNetworkConnectionssRelatedByFromLinkId;

    /**
     * Temporary storage of collNetworkConnectionssRelatedByFromLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkConnectionssRelatedByFromLinkId()
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByFromLinkId(NetworkConnections l) throws TorqueException
    {
        getNetworkConnectionssRelatedByFromLinkId().add(l);
        l.setLinkFamiliesRelatedByFromLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute using connection.
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByFromLinkId(NetworkConnections l, Connection con) throws TorqueException
    {
        getNetworkConnectionssRelatedByFromLinkId(con).add(l);
        l.setLinkFamiliesRelatedByFromLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkConnectionssRelatedByFromLinkId
     */
    private Criteria lastNetworkConnectionssRelatedByFromLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByFromLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByFromLinkId()
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            collNetworkConnectionssRelatedByFromLinkId = getNetworkConnectionssRelatedByFromLinkId(new Criteria(10));
        }
        return collNetworkConnectionssRelatedByFromLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByFromLinkId(Criteria criteria) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId() );
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                if (!lastNetworkConnectionssRelatedByFromLinkIdCriteria.equals(criteria))
                {
                    collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkConnectionssRelatedByFromLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByFromLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByFromLinkId(Connection con) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            collNetworkConnectionssRelatedByFromLinkId = getNetworkConnectionssRelatedByFromLinkId(new Criteria(10), con);
        }
        return collNetworkConnectionssRelatedByFromLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByFromLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                 collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                 if (!lastNetworkConnectionssRelatedByFromLinkIdCriteria.equals(criteria))
                 {
                     collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkConnectionssRelatedByFromLinkIdCriteria = criteria;

         return collNetworkConnectionssRelatedByFromLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByFromLinkIdJoinNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByFromLinkIdJoinNetworksRelatedByFromNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByFromLinkIdJoinLinkFamiliesRelatedByToLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByFromLinkIdJoinNetworksRelatedByToNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromLinkId;
    }





    /**
     * Collection to store aggregation of collNetworkConnectionssRelatedByToLinkId
     */
    protected List collNetworkConnectionssRelatedByToLinkId;

    /**
     * Temporary storage of collNetworkConnectionssRelatedByToLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkConnectionssRelatedByToLinkId()
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            collNetworkConnectionssRelatedByToLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByToLinkId(NetworkConnections l) throws TorqueException
    {
        getNetworkConnectionssRelatedByToLinkId().add(l);
        l.setLinkFamiliesRelatedByToLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute using connection.
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByToLinkId(NetworkConnections l, Connection con) throws TorqueException
    {
        getNetworkConnectionssRelatedByToLinkId(con).add(l);
        l.setLinkFamiliesRelatedByToLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkConnectionssRelatedByToLinkId
     */
    private Criteria lastNetworkConnectionssRelatedByToLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByToLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByToLinkId()
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            collNetworkConnectionssRelatedByToLinkId = getNetworkConnectionssRelatedByToLinkId(new Criteria(10));
        }
        return collNetworkConnectionssRelatedByToLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByToLinkId(Criteria criteria) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId() );
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                if (!lastNetworkConnectionssRelatedByToLinkIdCriteria.equals(criteria))
                {
                    collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkConnectionssRelatedByToLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByToLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByToLinkId(Connection con) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            collNetworkConnectionssRelatedByToLinkId = getNetworkConnectionssRelatedByToLinkId(new Criteria(10), con);
        }
        return collNetworkConnectionssRelatedByToLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByToLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                 collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                 if (!lastNetworkConnectionssRelatedByToLinkIdCriteria.equals(criteria))
                 {
                     collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkConnectionssRelatedByToLinkIdCriteria = criteria;

         return collNetworkConnectionssRelatedByToLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByToLinkIdJoinNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByToLinkIdJoinLinkFamiliesRelatedByFromLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByToLinkIdJoinNetworksRelatedByFromNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getNetworkConnectionssRelatedByToLinkIdJoinNetworksRelatedByToNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToLinkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToLinkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_LINK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToLinkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToLinkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToLinkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToLinkId;
    }





    /**
     * Collection to store aggregation of collDestinationNetworkss
     */
    protected List collDestinationNetworkss;

    /**
     * Temporary storage of collDestinationNetworkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDestinationNetworkss()
    {
        if (collDestinationNetworkss == null)
        {
            collDestinationNetworkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DestinationNetworks object to this object
     * through the DestinationNetworks foreign key attribute
     *
     * @param l DestinationNetworks
     * @throws TorqueException
     */
    public void addDestinationNetworks(DestinationNetworks l) throws TorqueException
    {
        getDestinationNetworkss().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a DestinationNetworks object to this object
     * through the DestinationNetworks foreign key attribute using connection.
     *
     * @param l DestinationNetworks
     * @throws TorqueException
     */
    public void addDestinationNetworks(DestinationNetworks l, Connection con) throws TorqueException
    {
        getDestinationNetworkss(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collDestinationNetworkss
     */
    private Criteria lastDestinationNetworkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDestinationNetworkss()
        throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            collDestinationNetworkss = getDestinationNetworkss(new Criteria(10));
        }
        return collDestinationNetworkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDestinationNetworkss(Criteria criteria) throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId() );
                collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
                if (!lastDestinationNetworkssCriteria.equals(criteria))
                {
                    collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria);
                }
            }
        }
        lastDestinationNetworkssCriteria = criteria;

        return collDestinationNetworkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkss(Connection con) throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            collDestinationNetworkss = getDestinationNetworkss(new Criteria(10), con);
        }
        return collDestinationNetworkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                 criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
                 collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
                 if (!lastDestinationNetworkssCriteria.equals(criteria))
                 {
                     collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDestinationNetworkssCriteria = criteria;

         return collDestinationNetworkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDestinationNetworkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
            if (!lastDestinationNetworkssCriteria.equals(criteria))
            {
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastDestinationNetworkssCriteria = criteria;

        return collDestinationNetworkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDestinationNetworkssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworksPeer.DESTINATION_LINK_ID, getId());
            if (!lastDestinationNetworkssCriteria.equals(criteria))
            {
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinProjects(criteria);
            }
        }
        lastDestinationNetworkssCriteria = criteria;

        return collDestinationNetworkss;
    }





    /**
     * Collection to store aggregation of collDestinationNetworkLinkss
     */
    protected List collDestinationNetworkLinkss;

    /**
     * Temporary storage of collDestinationNetworkLinkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDestinationNetworkLinkss()
    {
        if (collDestinationNetworkLinkss == null)
        {
            collDestinationNetworkLinkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DestinationNetworkLinks object to this object
     * through the DestinationNetworkLinks foreign key attribute
     *
     * @param l DestinationNetworkLinks
     * @throws TorqueException
     */
    public void addDestinationNetworkLinks(DestinationNetworkLinks l) throws TorqueException
    {
        getDestinationNetworkLinkss().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a DestinationNetworkLinks object to this object
     * through the DestinationNetworkLinks foreign key attribute using connection.
     *
     * @param l DestinationNetworkLinks
     * @throws TorqueException
     */
    public void addDestinationNetworkLinks(DestinationNetworkLinks l, Connection con) throws TorqueException
    {
        getDestinationNetworkLinkss(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collDestinationNetworkLinkss
     */
    private Criteria lastDestinationNetworkLinkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkLinkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDestinationNetworkLinkss()
        throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            collDestinationNetworkLinkss = getDestinationNetworkLinkss(new Criteria(10));
        }
        return collDestinationNetworkLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDestinationNetworkLinkss(Criteria criteria) throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId() );
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
                if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
                {
                    collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria);
                }
            }
        }
        lastDestinationNetworkLinkssCriteria = criteria;

        return collDestinationNetworkLinkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkLinkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkLinkss(Connection con) throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            collDestinationNetworkLinkss = getDestinationNetworkLinkss(new Criteria(10), con);
        }
        return collDestinationNetworkLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkLinkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                 criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
                 collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
                 if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
                 {
                     collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDestinationNetworkLinkssCriteria = criteria;

         return collDestinationNetworkLinkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDestinationNetworkLinkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
            if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
            {
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastDestinationNetworkLinkssCriteria = criteria;

        return collDestinationNetworkLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDestinationNetworkLinkssJoinDestinationNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkLinksPeer.LINK_ID, getId());
            if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
            {
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        lastDestinationNetworkLinkssCriteria = criteria;

        return collDestinationNetworkLinkss;
    }





    /**
     * Collection to store aggregation of collRouteLinkss
     */
    protected List collRouteLinkss;

    /**
     * Temporary storage of collRouteLinkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRouteLinkss()
    {
        if (collRouteLinkss == null)
        {
            collRouteLinkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a RouteLinks object to this object
     * through the RouteLinks foreign key attribute
     *
     * @param l RouteLinks
     * @throws TorqueException
     */
    public void addRouteLinks(RouteLinks l) throws TorqueException
    {
        getRouteLinkss().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a RouteLinks object to this object
     * through the RouteLinks foreign key attribute using connection.
     *
     * @param l RouteLinks
     * @throws TorqueException
     */
    public void addRouteLinks(RouteLinks l, Connection con) throws TorqueException
    {
        getRouteLinkss(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collRouteLinkss
     */
    private Criteria lastRouteLinkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRouteLinkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getRouteLinkss()
        throws TorqueException
    {
        if (collRouteLinkss == null)
        {
            collRouteLinkss = getRouteLinkss(new Criteria(10));
        }
        return collRouteLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related RouteLinkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getRouteLinkss(Criteria criteria) throws TorqueException
    {
        if (collRouteLinkss == null)
        {
            if (isNew())
            {
               collRouteLinkss = new ArrayList();
            }
            else
            {
                criteria.add(RouteLinksPeer.LINK_ID, getId() );
                collRouteLinkss = RouteLinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RouteLinksPeer.LINK_ID, getId());
                if (!lastRouteLinkssCriteria.equals(criteria))
                {
                    collRouteLinkss = RouteLinksPeer.doSelect(criteria);
                }
            }
        }
        lastRouteLinkssCriteria = criteria;

        return collRouteLinkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRouteLinkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRouteLinkss(Connection con) throws TorqueException
    {
        if (collRouteLinkss == null)
        {
            collRouteLinkss = getRouteLinkss(new Criteria(10), con);
        }
        return collRouteLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related RouteLinkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRouteLinkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRouteLinkss == null)
        {
            if (isNew())
            {
               collRouteLinkss = new ArrayList();
            }
            else
            {
                 criteria.add(RouteLinksPeer.LINK_ID, getId());
                 collRouteLinkss = RouteLinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RouteLinksPeer.LINK_ID, getId());
                 if (!lastRouteLinkssCriteria.equals(criteria))
                 {
                     collRouteLinkss = RouteLinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRouteLinkssCriteria = criteria;

         return collRouteLinkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related RouteLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getRouteLinkssJoinRoutes(Criteria criteria)
        throws TorqueException
    {
        if (collRouteLinkss == null)
        {
            if (isNew())
            {
               collRouteLinkss = new ArrayList();
            }
            else
            {
                criteria.add(RouteLinksPeer.LINK_ID, getId());
                collRouteLinkss = RouteLinksPeer.doSelectJoinRoutes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RouteLinksPeer.LINK_ID, getId());
            if (!lastRouteLinkssCriteria.equals(criteria))
            {
                collRouteLinkss = RouteLinksPeer.doSelectJoinRoutes(criteria);
            }
        }
        lastRouteLinkssCriteria = criteria;

        return collRouteLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related RouteLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getRouteLinkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collRouteLinkss == null)
        {
            if (isNew())
            {
               collRouteLinkss = new ArrayList();
            }
            else
            {
                criteria.add(RouteLinksPeer.LINK_ID, getId());
                collRouteLinkss = RouteLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RouteLinksPeer.LINK_ID, getId());
            if (!lastRouteLinkssCriteria.equals(criteria))
            {
                collRouteLinkss = RouteLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastRouteLinkssCriteria = criteria;

        return collRouteLinkss;
    }





    /**
     * Collection to store aggregation of collInitialDensitiessRelatedByLinkId
     */
    protected List collInitialDensitiessRelatedByLinkId;

    /**
     * Temporary storage of collInitialDensitiessRelatedByLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInitialDensitiessRelatedByLinkId()
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            collInitialDensitiessRelatedByLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a InitialDensities object to this object
     * through the InitialDensities foreign key attribute
     *
     * @param l InitialDensities
     * @throws TorqueException
     */
    public void addInitialDensitiesRelatedByLinkId(InitialDensities l) throws TorqueException
    {
        getInitialDensitiessRelatedByLinkId().add(l);
        l.setLinkFamiliesRelatedByLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a InitialDensities object to this object
     * through the InitialDensities foreign key attribute using connection.
     *
     * @param l InitialDensities
     * @throws TorqueException
     */
    public void addInitialDensitiesRelatedByLinkId(InitialDensities l, Connection con) throws TorqueException
    {
        getInitialDensitiessRelatedByLinkId(con).add(l);
        l.setLinkFamiliesRelatedByLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collInitialDensitiessRelatedByLinkId
     */
    private Criteria lastInitialDensitiessRelatedByLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitiessRelatedByLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getInitialDensitiessRelatedByLinkId()
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            collInitialDensitiessRelatedByLinkId = getInitialDensitiessRelatedByLinkId(new Criteria(10));
        }
        return collInitialDensitiessRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInitialDensitiessRelatedByLinkId(Criteria criteria) throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.LINK_ID, getId() );
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(InitialDensitiesPeer.LINK_ID, getId());
                if (!lastInitialDensitiessRelatedByLinkIdCriteria.equals(criteria))
                {
                    collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelect(criteria);
                }
            }
        }
        lastInitialDensitiessRelatedByLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitiessRelatedByLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitiessRelatedByLinkId(Connection con) throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            collInitialDensitiessRelatedByLinkId = getInitialDensitiessRelatedByLinkId(new Criteria(10), con);
        }
        return collInitialDensitiessRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitiessRelatedByLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(InitialDensitiesPeer.LINK_ID, getId());
                 collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(InitialDensitiesPeer.LINK_ID, getId());
                 if (!lastInitialDensitiessRelatedByLinkIdCriteria.equals(criteria))
                 {
                     collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInitialDensitiessRelatedByLinkIdCriteria = criteria;

         return collInitialDensitiessRelatedByLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getInitialDensitiessRelatedByLinkIdJoinInitialDensitySets(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.LINK_ID, getId());
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.LINK_ID, getId());
            if (!lastInitialDensitiessRelatedByLinkIdCriteria.equals(criteria))
            {
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        lastInitialDensitiessRelatedByLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getInitialDensitiessRelatedByLinkIdJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.LINK_ID, getId());
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.LINK_ID, getId());
            if (!lastInitialDensitiessRelatedByLinkIdCriteria.equals(criteria))
            {
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastInitialDensitiessRelatedByLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getInitialDensitiessRelatedByLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.LINK_ID, getId());
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.LINK_ID, getId());
            if (!lastInitialDensitiessRelatedByLinkIdCriteria.equals(criteria))
            {
                collInitialDensitiessRelatedByLinkId = InitialDensitiesPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastInitialDensitiessRelatedByLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByLinkId;
    }





    /**
     * Collection to store aggregation of collInitialDensitiessRelatedByDestinationLinkId
     */
    protected List collInitialDensitiessRelatedByDestinationLinkId;

    /**
     * Temporary storage of collInitialDensitiessRelatedByDestinationLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInitialDensitiessRelatedByDestinationLinkId()
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            collInitialDensitiessRelatedByDestinationLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a InitialDensities object to this object
     * through the InitialDensities foreign key attribute
     *
     * @param l InitialDensities
     * @throws TorqueException
     */
    public void addInitialDensitiesRelatedByDestinationLinkId(InitialDensities l) throws TorqueException
    {
        getInitialDensitiessRelatedByDestinationLinkId().add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a InitialDensities object to this object
     * through the InitialDensities foreign key attribute using connection.
     *
     * @param l InitialDensities
     * @throws TorqueException
     */
    public void addInitialDensitiesRelatedByDestinationLinkId(InitialDensities l, Connection con) throws TorqueException
    {
        getInitialDensitiessRelatedByDestinationLinkId(con).add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collInitialDensitiessRelatedByDestinationLinkId
     */
    private Criteria lastInitialDensitiessRelatedByDestinationLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitiessRelatedByDestinationLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getInitialDensitiessRelatedByDestinationLinkId()
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            collInitialDensitiessRelatedByDestinationLinkId = getInitialDensitiessRelatedByDestinationLinkId(new Criteria(10));
        }
        return collInitialDensitiessRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInitialDensitiessRelatedByDestinationLinkId(Criteria criteria) throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId() );
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
                if (!lastInitialDensitiessRelatedByDestinationLinkIdCriteria.equals(criteria))
                {
                    collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelect(criteria);
                }
            }
        }
        lastInitialDensitiessRelatedByDestinationLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitiessRelatedByDestinationLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitiessRelatedByDestinationLinkId(Connection con) throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            collInitialDensitiessRelatedByDestinationLinkId = getInitialDensitiessRelatedByDestinationLinkId(new Criteria(10), con);
        }
        return collInitialDensitiessRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitiessRelatedByDestinationLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
                 collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
                 if (!lastInitialDensitiessRelatedByDestinationLinkIdCriteria.equals(criteria))
                 {
                     collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInitialDensitiessRelatedByDestinationLinkIdCriteria = criteria;

         return collInitialDensitiessRelatedByDestinationLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getInitialDensitiessRelatedByDestinationLinkIdJoinInitialDensitySets(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
            if (!lastInitialDensitiessRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        lastInitialDensitiessRelatedByDestinationLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByDestinationLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getInitialDensitiessRelatedByDestinationLinkIdJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
            if (!lastInitialDensitiessRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastInitialDensitiessRelatedByDestinationLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByDestinationLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related InitialDensitiessRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getInitialDensitiessRelatedByDestinationLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collInitialDensitiessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.DESTINATION_LINK_ID, getId());
            if (!lastInitialDensitiessRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collInitialDensitiessRelatedByDestinationLinkId = InitialDensitiesPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastInitialDensitiessRelatedByDestinationLinkIdCriteria = criteria;

        return collInitialDensitiessRelatedByDestinationLinkId;
    }





    /**
     * Collection to store aggregation of collWeavingFactorssRelatedByInLinkId
     */
    protected List collWeavingFactorssRelatedByInLinkId;

    /**
     * Temporary storage of collWeavingFactorssRelatedByInLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initWeavingFactorssRelatedByInLinkId()
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            collWeavingFactorssRelatedByInLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a WeavingFactors object to this object
     * through the WeavingFactors foreign key attribute
     *
     * @param l WeavingFactors
     * @throws TorqueException
     */
    public void addWeavingFactorsRelatedByInLinkId(WeavingFactors l) throws TorqueException
    {
        getWeavingFactorssRelatedByInLinkId().add(l);
        l.setLinkFamiliesRelatedByInLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a WeavingFactors object to this object
     * through the WeavingFactors foreign key attribute using connection.
     *
     * @param l WeavingFactors
     * @throws TorqueException
     */
    public void addWeavingFactorsRelatedByInLinkId(WeavingFactors l, Connection con) throws TorqueException
    {
        getWeavingFactorssRelatedByInLinkId(con).add(l);
        l.setLinkFamiliesRelatedByInLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collWeavingFactorssRelatedByInLinkId
     */
    private Criteria lastWeavingFactorssRelatedByInLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorssRelatedByInLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getWeavingFactorssRelatedByInLinkId()
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            collWeavingFactorssRelatedByInLinkId = getWeavingFactorssRelatedByInLinkId(new Criteria(10));
        }
        return collWeavingFactorssRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByInLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getWeavingFactorssRelatedByInLinkId(Criteria criteria) throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId() );
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
                if (!lastWeavingFactorssRelatedByInLinkIdCriteria.equals(criteria))
                {
                    collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelect(criteria);
                }
            }
        }
        lastWeavingFactorssRelatedByInLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorssRelatedByInLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorssRelatedByInLinkId(Connection con) throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            collWeavingFactorssRelatedByInLinkId = getWeavingFactorssRelatedByInLinkId(new Criteria(10), con);
        }
        return collWeavingFactorssRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByInLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorssRelatedByInLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByInLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
                 collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
                 if (!lastWeavingFactorssRelatedByInLinkIdCriteria.equals(criteria))
                 {
                     collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastWeavingFactorssRelatedByInLinkIdCriteria = criteria;

         return collWeavingFactorssRelatedByInLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getWeavingFactorssRelatedByInLinkIdJoinWeavingFactorSets(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
            if (!lastWeavingFactorssRelatedByInLinkIdCriteria.equals(criteria))
            {
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        lastWeavingFactorssRelatedByInLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByInLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getWeavingFactorssRelatedByInLinkIdJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
            if (!lastWeavingFactorssRelatedByInLinkIdCriteria.equals(criteria))
            {
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        lastWeavingFactorssRelatedByInLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByInLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getWeavingFactorssRelatedByInLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.IN_LINK_ID, getId());
            if (!lastWeavingFactorssRelatedByInLinkIdCriteria.equals(criteria))
            {
                collWeavingFactorssRelatedByInLinkId = WeavingFactorsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastWeavingFactorssRelatedByInLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByInLinkId;
    }





    /**
     * Collection to store aggregation of collWeavingFactorssRelatedByOutLinkId
     */
    protected List collWeavingFactorssRelatedByOutLinkId;

    /**
     * Temporary storage of collWeavingFactorssRelatedByOutLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initWeavingFactorssRelatedByOutLinkId()
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            collWeavingFactorssRelatedByOutLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a WeavingFactors object to this object
     * through the WeavingFactors foreign key attribute
     *
     * @param l WeavingFactors
     * @throws TorqueException
     */
    public void addWeavingFactorsRelatedByOutLinkId(WeavingFactors l) throws TorqueException
    {
        getWeavingFactorssRelatedByOutLinkId().add(l);
        l.setLinkFamiliesRelatedByOutLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a WeavingFactors object to this object
     * through the WeavingFactors foreign key attribute using connection.
     *
     * @param l WeavingFactors
     * @throws TorqueException
     */
    public void addWeavingFactorsRelatedByOutLinkId(WeavingFactors l, Connection con) throws TorqueException
    {
        getWeavingFactorssRelatedByOutLinkId(con).add(l);
        l.setLinkFamiliesRelatedByOutLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collWeavingFactorssRelatedByOutLinkId
     */
    private Criteria lastWeavingFactorssRelatedByOutLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorssRelatedByOutLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getWeavingFactorssRelatedByOutLinkId()
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            collWeavingFactorssRelatedByOutLinkId = getWeavingFactorssRelatedByOutLinkId(new Criteria(10));
        }
        return collWeavingFactorssRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByOutLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getWeavingFactorssRelatedByOutLinkId(Criteria criteria) throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId() );
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
                if (!lastWeavingFactorssRelatedByOutLinkIdCriteria.equals(criteria))
                {
                    collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelect(criteria);
                }
            }
        }
        lastWeavingFactorssRelatedByOutLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorssRelatedByOutLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorssRelatedByOutLinkId(Connection con) throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            collWeavingFactorssRelatedByOutLinkId = getWeavingFactorssRelatedByOutLinkId(new Criteria(10), con);
        }
        return collWeavingFactorssRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByOutLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorssRelatedByOutLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
                 collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
                 if (!lastWeavingFactorssRelatedByOutLinkIdCriteria.equals(criteria))
                 {
                     collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastWeavingFactorssRelatedByOutLinkIdCriteria = criteria;

         return collWeavingFactorssRelatedByOutLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getWeavingFactorssRelatedByOutLinkIdJoinWeavingFactorSets(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
            if (!lastWeavingFactorssRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        lastWeavingFactorssRelatedByOutLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByOutLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getWeavingFactorssRelatedByOutLinkIdJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
            if (!lastWeavingFactorssRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        lastWeavingFactorssRelatedByOutLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByOutLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related WeavingFactorssRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getWeavingFactorssRelatedByOutLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorssRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collWeavingFactorssRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.OUT_LINK_ID, getId());
            if (!lastWeavingFactorssRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collWeavingFactorssRelatedByOutLinkId = WeavingFactorsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastWeavingFactorssRelatedByOutLinkIdCriteria = criteria;

        return collWeavingFactorssRelatedByOutLinkId;
    }





    /**
     * Collection to store aggregation of collSplitRatiossRelatedByInLinkId
     */
    protected List collSplitRatiossRelatedByInLinkId;

    /**
     * Temporary storage of collSplitRatiossRelatedByInLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSplitRatiossRelatedByInLinkId()
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            collSplitRatiossRelatedByInLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a SplitRatios object to this object
     * through the SplitRatios foreign key attribute
     *
     * @param l SplitRatios
     * @throws TorqueException
     */
    public void addSplitRatiosRelatedByInLinkId(SplitRatios l) throws TorqueException
    {
        getSplitRatiossRelatedByInLinkId().add(l);
        l.setLinkFamiliesRelatedByInLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a SplitRatios object to this object
     * through the SplitRatios foreign key attribute using connection.
     *
     * @param l SplitRatios
     * @throws TorqueException
     */
    public void addSplitRatiosRelatedByInLinkId(SplitRatios l, Connection con) throws TorqueException
    {
        getSplitRatiossRelatedByInLinkId(con).add(l);
        l.setLinkFamiliesRelatedByInLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collSplitRatiossRelatedByInLinkId
     */
    private Criteria lastSplitRatiossRelatedByInLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatiossRelatedByInLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSplitRatiossRelatedByInLinkId()
        throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            collSplitRatiossRelatedByInLinkId = getSplitRatiossRelatedByInLinkId(new Criteria(10));
        }
        return collSplitRatiossRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByInLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSplitRatiossRelatedByInLinkId(Criteria criteria) throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.IN_LINK_ID, getId() );
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
                if (!lastSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
                {
                    collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelect(criteria);
                }
            }
        }
        lastSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatiossRelatedByInLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatiossRelatedByInLinkId(Connection con) throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            collSplitRatiossRelatedByInLinkId = getSplitRatiossRelatedByInLinkId(new Criteria(10), con);
        }
        return collSplitRatiossRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByInLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatiossRelatedByInLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
                 collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
                 if (!lastSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
                 {
                     collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSplitRatiossRelatedByInLinkIdCriteria = criteria;

         return collSplitRatiossRelatedByInLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSplitRatiossRelatedByInLinkIdJoinSplitRatioProfiles(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelectJoinSplitRatioProfiles(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
            if (!lastSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
            {
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelectJoinSplitRatioProfiles(criteria);
            }
        }
        lastSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByInLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSplitRatiossRelatedByInLinkIdJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
            if (!lastSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
            {
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        lastSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByInLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSplitRatiossRelatedByInLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.IN_LINK_ID, getId());
            if (!lastSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
            {
                collSplitRatiossRelatedByInLinkId = SplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByInLinkId;
    }





    /**
     * Collection to store aggregation of collSplitRatiossRelatedByOutLinkId
     */
    protected List collSplitRatiossRelatedByOutLinkId;

    /**
     * Temporary storage of collSplitRatiossRelatedByOutLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSplitRatiossRelatedByOutLinkId()
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            collSplitRatiossRelatedByOutLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a SplitRatios object to this object
     * through the SplitRatios foreign key attribute
     *
     * @param l SplitRatios
     * @throws TorqueException
     */
    public void addSplitRatiosRelatedByOutLinkId(SplitRatios l) throws TorqueException
    {
        getSplitRatiossRelatedByOutLinkId().add(l);
        l.setLinkFamiliesRelatedByOutLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a SplitRatios object to this object
     * through the SplitRatios foreign key attribute using connection.
     *
     * @param l SplitRatios
     * @throws TorqueException
     */
    public void addSplitRatiosRelatedByOutLinkId(SplitRatios l, Connection con) throws TorqueException
    {
        getSplitRatiossRelatedByOutLinkId(con).add(l);
        l.setLinkFamiliesRelatedByOutLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collSplitRatiossRelatedByOutLinkId
     */
    private Criteria lastSplitRatiossRelatedByOutLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatiossRelatedByOutLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSplitRatiossRelatedByOutLinkId()
        throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            collSplitRatiossRelatedByOutLinkId = getSplitRatiossRelatedByOutLinkId(new Criteria(10));
        }
        return collSplitRatiossRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByOutLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSplitRatiossRelatedByOutLinkId(Criteria criteria) throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId() );
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
                if (!lastSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
                {
                    collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelect(criteria);
                }
            }
        }
        lastSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatiossRelatedByOutLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatiossRelatedByOutLinkId(Connection con) throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            collSplitRatiossRelatedByOutLinkId = getSplitRatiossRelatedByOutLinkId(new Criteria(10), con);
        }
        return collSplitRatiossRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByOutLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatiossRelatedByOutLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
                 collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
                 if (!lastSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
                 {
                     collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSplitRatiossRelatedByOutLinkIdCriteria = criteria;

         return collSplitRatiossRelatedByOutLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSplitRatiossRelatedByOutLinkIdJoinSplitRatioProfiles(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelectJoinSplitRatioProfiles(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
            if (!lastSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelectJoinSplitRatioProfiles(criteria);
            }
        }
        lastSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByOutLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSplitRatiossRelatedByOutLinkIdJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
            if (!lastSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        lastSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByOutLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related SplitRatiossRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSplitRatiossRelatedByOutLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.OUT_LINK_ID, getId());
            if (!lastSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collSplitRatiossRelatedByOutLinkId = SplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collSplitRatiossRelatedByOutLinkId;
    }





    /**
     * Collection to store aggregation of collFundamentalDiagramProfiless
     */
    protected List collFundamentalDiagramProfiless;

    /**
     * Temporary storage of collFundamentalDiagramProfiless to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initFundamentalDiagramProfiless()
    {
        if (collFundamentalDiagramProfiless == null)
        {
            collFundamentalDiagramProfiless = new ArrayList();
        }
    }


    /**
     * Method called to associate a FundamentalDiagramProfiles object to this object
     * through the FundamentalDiagramProfiles foreign key attribute
     *
     * @param l FundamentalDiagramProfiles
     * @throws TorqueException
     */
    public void addFundamentalDiagramProfiles(FundamentalDiagramProfiles l) throws TorqueException
    {
        getFundamentalDiagramProfiless().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a FundamentalDiagramProfiles object to this object
     * through the FundamentalDiagramProfiles foreign key attribute using connection.
     *
     * @param l FundamentalDiagramProfiles
     * @throws TorqueException
     */
    public void addFundamentalDiagramProfiles(FundamentalDiagramProfiles l, Connection con) throws TorqueException
    {
        getFundamentalDiagramProfiless(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collFundamentalDiagramProfiless
     */
    private Criteria lastFundamentalDiagramProfilessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFundamentalDiagramProfiless(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getFundamentalDiagramProfiless()
        throws TorqueException
    {
        if (collFundamentalDiagramProfiless == null)
        {
            collFundamentalDiagramProfiless = getFundamentalDiagramProfiless(new Criteria(10));
        }
        return collFundamentalDiagramProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related FundamentalDiagramProfiless from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getFundamentalDiagramProfiless(Criteria criteria) throws TorqueException
    {
        if (collFundamentalDiagramProfiless == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfiless = new ArrayList();
            }
            else
            {
                criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId() );
                collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
                if (!lastFundamentalDiagramProfilessCriteria.equals(criteria))
                {
                    collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelect(criteria);
                }
            }
        }
        lastFundamentalDiagramProfilessCriteria = criteria;

        return collFundamentalDiagramProfiless;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFundamentalDiagramProfiless(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getFundamentalDiagramProfiless(Connection con) throws TorqueException
    {
        if (collFundamentalDiagramProfiless == null)
        {
            collFundamentalDiagramProfiless = getFundamentalDiagramProfiless(new Criteria(10), con);
        }
        return collFundamentalDiagramProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related FundamentalDiagramProfiless from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getFundamentalDiagramProfiless(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collFundamentalDiagramProfiless == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfiless = new ArrayList();
            }
            else
            {
                 criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
                 collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
                 if (!lastFundamentalDiagramProfilessCriteria.equals(criteria))
                 {
                     collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastFundamentalDiagramProfilessCriteria = criteria;

         return collFundamentalDiagramProfiless;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related FundamentalDiagramProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getFundamentalDiagramProfilessJoinFundamentalDiagramProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collFundamentalDiagramProfiless == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfiless = new ArrayList();
            }
            else
            {
                criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
                collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelectJoinFundamentalDiagramProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
            if (!lastFundamentalDiagramProfilessCriteria.equals(criteria))
            {
                collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelectJoinFundamentalDiagramProfileSets(criteria);
            }
        }
        lastFundamentalDiagramProfilessCriteria = criteria;

        return collFundamentalDiagramProfiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related FundamentalDiagramProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getFundamentalDiagramProfilessJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collFundamentalDiagramProfiless == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfiless = new ArrayList();
            }
            else
            {
                criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
                collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(FundamentalDiagramProfilesPeer.LINK_ID, getId());
            if (!lastFundamentalDiagramProfilessCriteria.equals(criteria))
            {
                collFundamentalDiagramProfiless = FundamentalDiagramProfilesPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastFundamentalDiagramProfilessCriteria = criteria;

        return collFundamentalDiagramProfiless;
    }





    /**
     * Collection to store aggregation of collDemandProfilessRelatedByOriginLinkId
     */
    protected List collDemandProfilessRelatedByOriginLinkId;

    /**
     * Temporary storage of collDemandProfilessRelatedByOriginLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDemandProfilessRelatedByOriginLinkId()
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            collDemandProfilessRelatedByOriginLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a DemandProfiles object to this object
     * through the DemandProfiles foreign key attribute
     *
     * @param l DemandProfiles
     * @throws TorqueException
     */
    public void addDemandProfilesRelatedByOriginLinkId(DemandProfiles l) throws TorqueException
    {
        getDemandProfilessRelatedByOriginLinkId().add(l);
        l.setLinkFamiliesRelatedByOriginLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a DemandProfiles object to this object
     * through the DemandProfiles foreign key attribute using connection.
     *
     * @param l DemandProfiles
     * @throws TorqueException
     */
    public void addDemandProfilesRelatedByOriginLinkId(DemandProfiles l, Connection con) throws TorqueException
    {
        getDemandProfilessRelatedByOriginLinkId(con).add(l);
        l.setLinkFamiliesRelatedByOriginLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collDemandProfilessRelatedByOriginLinkId
     */
    private Criteria lastDemandProfilessRelatedByOriginLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandProfilessRelatedByOriginLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDemandProfilessRelatedByOriginLinkId()
        throws TorqueException
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            collDemandProfilessRelatedByOriginLinkId = getDemandProfilessRelatedByOriginLinkId(new Criteria(10));
        }
        return collDemandProfilessRelatedByOriginLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByOriginLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDemandProfilessRelatedByOriginLinkId(Criteria criteria) throws TorqueException
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByOriginLinkId = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId() );
                collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
                if (!lastDemandProfilessRelatedByOriginLinkIdCriteria.equals(criteria))
                {
                    collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelect(criteria);
                }
            }
        }
        lastDemandProfilessRelatedByOriginLinkIdCriteria = criteria;

        return collDemandProfilessRelatedByOriginLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandProfilessRelatedByOriginLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandProfilessRelatedByOriginLinkId(Connection con) throws TorqueException
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            collDemandProfilessRelatedByOriginLinkId = getDemandProfilessRelatedByOriginLinkId(new Criteria(10), con);
        }
        return collDemandProfilessRelatedByOriginLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByOriginLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandProfilessRelatedByOriginLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByOriginLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
                 collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
                 if (!lastDemandProfilessRelatedByOriginLinkIdCriteria.equals(criteria))
                 {
                     collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDemandProfilessRelatedByOriginLinkIdCriteria = criteria;

         return collDemandProfilessRelatedByOriginLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByOriginLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDemandProfilessRelatedByOriginLinkIdJoinDemandProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByOriginLinkId = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
                collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelectJoinDemandProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
            if (!lastDemandProfilessRelatedByOriginLinkIdCriteria.equals(criteria))
            {
                collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelectJoinDemandProfileSets(criteria);
            }
        }
        lastDemandProfilessRelatedByOriginLinkIdCriteria = criteria;

        return collDemandProfilessRelatedByOriginLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByOriginLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDemandProfilessRelatedByOriginLinkIdJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collDemandProfilessRelatedByOriginLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByOriginLinkId = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
                collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandProfilesPeer.ORIGIN_LINK_ID, getId());
            if (!lastDemandProfilessRelatedByOriginLinkIdCriteria.equals(criteria))
            {
                collDemandProfilessRelatedByOriginLinkId = DemandProfilesPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastDemandProfilessRelatedByOriginLinkIdCriteria = criteria;

        return collDemandProfilessRelatedByOriginLinkId;
    }





    /**
     * Collection to store aggregation of collDemandProfilessRelatedByDestinationLinkId
     */
    protected List collDemandProfilessRelatedByDestinationLinkId;

    /**
     * Temporary storage of collDemandProfilessRelatedByDestinationLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDemandProfilessRelatedByDestinationLinkId()
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            collDemandProfilessRelatedByDestinationLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a DemandProfiles object to this object
     * through the DemandProfiles foreign key attribute
     *
     * @param l DemandProfiles
     * @throws TorqueException
     */
    public void addDemandProfilesRelatedByDestinationLinkId(DemandProfiles l) throws TorqueException
    {
        getDemandProfilessRelatedByDestinationLinkId().add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a DemandProfiles object to this object
     * through the DemandProfiles foreign key attribute using connection.
     *
     * @param l DemandProfiles
     * @throws TorqueException
     */
    public void addDemandProfilesRelatedByDestinationLinkId(DemandProfiles l, Connection con) throws TorqueException
    {
        getDemandProfilessRelatedByDestinationLinkId(con).add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collDemandProfilessRelatedByDestinationLinkId
     */
    private Criteria lastDemandProfilessRelatedByDestinationLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandProfilessRelatedByDestinationLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDemandProfilessRelatedByDestinationLinkId()
        throws TorqueException
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            collDemandProfilessRelatedByDestinationLinkId = getDemandProfilessRelatedByDestinationLinkId(new Criteria(10));
        }
        return collDemandProfilessRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDemandProfilessRelatedByDestinationLinkId(Criteria criteria) throws TorqueException
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId() );
                collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
                if (!lastDemandProfilessRelatedByDestinationLinkIdCriteria.equals(criteria))
                {
                    collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelect(criteria);
                }
            }
        }
        lastDemandProfilessRelatedByDestinationLinkIdCriteria = criteria;

        return collDemandProfilessRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandProfilessRelatedByDestinationLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandProfilessRelatedByDestinationLinkId(Connection con) throws TorqueException
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            collDemandProfilessRelatedByDestinationLinkId = getDemandProfilessRelatedByDestinationLinkId(new Criteria(10), con);
        }
        return collDemandProfilessRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandProfilessRelatedByDestinationLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
                 collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
                 if (!lastDemandProfilessRelatedByDestinationLinkIdCriteria.equals(criteria))
                 {
                     collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDemandProfilessRelatedByDestinationLinkIdCriteria = criteria;

         return collDemandProfilessRelatedByDestinationLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDemandProfilessRelatedByDestinationLinkIdJoinDemandProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
                collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelectJoinDemandProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
            if (!lastDemandProfilessRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelectJoinDemandProfileSets(criteria);
            }
        }
        lastDemandProfilessRelatedByDestinationLinkIdCriteria = criteria;

        return collDemandProfilessRelatedByDestinationLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DemandProfilessRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDemandProfilessRelatedByDestinationLinkIdJoinLinkFamiliesRelatedByOriginLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collDemandProfilessRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collDemandProfilessRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
                collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelectJoinLinkFamiliesRelatedByOriginLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandProfilesPeer.DESTINATION_LINK_ID, getId());
            if (!lastDemandProfilessRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collDemandProfilessRelatedByDestinationLinkId = DemandProfilesPeer.doSelectJoinLinkFamiliesRelatedByOriginLinkId(criteria);
            }
        }
        lastDemandProfilessRelatedByDestinationLinkIdCriteria = criteria;

        return collDemandProfilessRelatedByDestinationLinkId;
    }













    /**
     * Collection to store aggregation of collDownstreamBoundaryCapacityProfiless
     */
    protected List collDownstreamBoundaryCapacityProfiless;

    /**
     * Temporary storage of collDownstreamBoundaryCapacityProfiless to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDownstreamBoundaryCapacityProfiless()
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            collDownstreamBoundaryCapacityProfiless = new ArrayList();
        }
    }


    /**
     * Method called to associate a DownstreamBoundaryCapacityProfiles object to this object
     * through the DownstreamBoundaryCapacityProfiles foreign key attribute
     *
     * @param l DownstreamBoundaryCapacityProfiles
     * @throws TorqueException
     */
    public void addDownstreamBoundaryCapacityProfiles(DownstreamBoundaryCapacityProfiles l) throws TorqueException
    {
        getDownstreamBoundaryCapacityProfiless().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a DownstreamBoundaryCapacityProfiles object to this object
     * through the DownstreamBoundaryCapacityProfiles foreign key attribute using connection.
     *
     * @param l DownstreamBoundaryCapacityProfiles
     * @throws TorqueException
     */
    public void addDownstreamBoundaryCapacityProfiles(DownstreamBoundaryCapacityProfiles l, Connection con) throws TorqueException
    {
        getDownstreamBoundaryCapacityProfiless(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collDownstreamBoundaryCapacityProfiless
     */
    private Criteria lastDownstreamBoundaryCapacityProfilessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDownstreamBoundaryCapacityProfiless(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDownstreamBoundaryCapacityProfiless()
        throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            collDownstreamBoundaryCapacityProfiless = getDownstreamBoundaryCapacityProfiless(new Criteria(10));
        }
        return collDownstreamBoundaryCapacityProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfiless from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDownstreamBoundaryCapacityProfiless(Criteria criteria) throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfiless = new ArrayList();
            }
            else
            {
                criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId() );
                collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
                if (!lastDownstreamBoundaryCapacityProfilessCriteria.equals(criteria))
                {
                    collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelect(criteria);
                }
            }
        }
        lastDownstreamBoundaryCapacityProfilessCriteria = criteria;

        return collDownstreamBoundaryCapacityProfiless;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDownstreamBoundaryCapacityProfiless(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDownstreamBoundaryCapacityProfiless(Connection con) throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            collDownstreamBoundaryCapacityProfiless = getDownstreamBoundaryCapacityProfiless(new Criteria(10), con);
        }
        return collDownstreamBoundaryCapacityProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfiless from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDownstreamBoundaryCapacityProfiless(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfiless = new ArrayList();
            }
            else
            {
                 criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
                 collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
                 if (!lastDownstreamBoundaryCapacityProfilessCriteria.equals(criteria))
                 {
                     collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDownstreamBoundaryCapacityProfilessCriteria = criteria;

         return collDownstreamBoundaryCapacityProfiless;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDownstreamBoundaryCapacityProfilessJoinDownstreamBoundaryCapacityProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfiless = new ArrayList();
            }
            else
            {
                criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
                collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelectJoinDownstreamBoundaryCapacityProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
            if (!lastDownstreamBoundaryCapacityProfilessCriteria.equals(criteria))
            {
                collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelectJoinDownstreamBoundaryCapacityProfileSets(criteria);
            }
        }
        lastDownstreamBoundaryCapacityProfilessCriteria = criteria;

        return collDownstreamBoundaryCapacityProfiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getDownstreamBoundaryCapacityProfilessJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfiless == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfiless = new ArrayList();
            }
            else
            {
                criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
                collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DownstreamBoundaryCapacityProfilesPeer.LINK_ID, getId());
            if (!lastDownstreamBoundaryCapacityProfilessCriteria.equals(criteria))
            {
                collDownstreamBoundaryCapacityProfiless = DownstreamBoundaryCapacityProfilesPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastDownstreamBoundaryCapacityProfilessCriteria = criteria;

        return collDownstreamBoundaryCapacityProfiless;
    }





    /**
     * Collection to store aggregation of collSensorss
     */
    protected List collSensorss;

    /**
     * Temporary storage of collSensorss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSensorss()
    {
        if (collSensorss == null)
        {
            collSensorss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Sensors object to this object
     * through the Sensors foreign key attribute
     *
     * @param l Sensors
     * @throws TorqueException
     */
    public void addSensors(Sensors l) throws TorqueException
    {
        getSensorss().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a Sensors object to this object
     * through the Sensors foreign key attribute using connection.
     *
     * @param l Sensors
     * @throws TorqueException
     */
    public void addSensors(Sensors l, Connection con) throws TorqueException
    {
        getSensorss(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collSensorss
     */
    private Criteria lastSensorssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSensorss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSensorss()
        throws TorqueException
    {
        if (collSensorss == null)
        {
            collSensorss = getSensorss(new Criteria(10));
        }
        return collSensorss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related Sensorss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSensorss(Criteria criteria) throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.LINK_ID, getId() );
                collSensorss = SensorsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SensorsPeer.LINK_ID, getId());
                if (!lastSensorssCriteria.equals(criteria))
                {
                    collSensorss = SensorsPeer.doSelect(criteria);
                }
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSensorss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSensorss(Connection con) throws TorqueException
    {
        if (collSensorss == null)
        {
            collSensorss = getSensorss(new Criteria(10), con);
        }
        return collSensorss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related Sensorss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSensorss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                 criteria.add(SensorsPeer.LINK_ID, getId());
                 collSensorss = SensorsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SensorsPeer.LINK_ID, getId());
                 if (!lastSensorssCriteria.equals(criteria))
                 {
                     collSensorss = SensorsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSensorssCriteria = criteria;

         return collSensorss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Sensorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSensorssJoinSensorSets(Criteria criteria)
        throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.LINK_ID, getId());
                collSensorss = SensorsPeer.doSelectJoinSensorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorsPeer.LINK_ID, getId());
            if (!lastSensorssCriteria.equals(criteria))
            {
                collSensorss = SensorsPeer.doSelectJoinSensorSets(criteria);
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Sensorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSensorssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.LINK_ID, getId());
                collSensorss = SensorsPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorsPeer.LINK_ID, getId());
            if (!lastSensorssCriteria.equals(criteria))
            {
                collSensorss = SensorsPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related Sensorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getSensorssJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSensorss == null)
        {
            if (isNew())
            {
               collSensorss = new ArrayList();
            }
            else
            {
                criteria.add(SensorsPeer.LINK_ID, getId());
                collSensorss = SensorsPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorsPeer.LINK_ID, getId());
            if (!lastSensorssCriteria.equals(criteria))
            {
                collSensorss = SensorsPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSensorssCriteria = criteria;

        return collSensorss;
    }





    /**
     * Collection to store aggregation of collPhaseLinkss
     */
    protected List collPhaseLinkss;

    /**
     * Temporary storage of collPhaseLinkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPhaseLinkss()
    {
        if (collPhaseLinkss == null)
        {
            collPhaseLinkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a PhaseLinks object to this object
     * through the PhaseLinks foreign key attribute
     *
     * @param l PhaseLinks
     * @throws TorqueException
     */
    public void addPhaseLinks(PhaseLinks l) throws TorqueException
    {
        getPhaseLinkss().add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * Method called to associate a PhaseLinks object to this object
     * through the PhaseLinks foreign key attribute using connection.
     *
     * @param l PhaseLinks
     * @throws TorqueException
     */
    public void addPhaseLinks(PhaseLinks l, Connection con) throws TorqueException
    {
        getPhaseLinkss(con).add(l);
        l.setLinkFamilies((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collPhaseLinkss
     */
    private Criteria lastPhaseLinkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPhaseLinkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getPhaseLinkss()
        throws TorqueException
    {
        if (collPhaseLinkss == null)
        {
            collPhaseLinkss = getPhaseLinkss(new Criteria(10));
        }
        return collPhaseLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related PhaseLinkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPhaseLinkss(Criteria criteria) throws TorqueException
    {
        if (collPhaseLinkss == null)
        {
            if (isNew())
            {
               collPhaseLinkss = new ArrayList();
            }
            else
            {
                criteria.add(PhaseLinksPeer.LINK_ID, getId() );
                collPhaseLinkss = PhaseLinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(PhaseLinksPeer.LINK_ID, getId());
                if (!lastPhaseLinkssCriteria.equals(criteria))
                {
                    collPhaseLinkss = PhaseLinksPeer.doSelect(criteria);
                }
            }
        }
        lastPhaseLinkssCriteria = criteria;

        return collPhaseLinkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPhaseLinkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPhaseLinkss(Connection con) throws TorqueException
    {
        if (collPhaseLinkss == null)
        {
            collPhaseLinkss = getPhaseLinkss(new Criteria(10), con);
        }
        return collPhaseLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related PhaseLinkss from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPhaseLinkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPhaseLinkss == null)
        {
            if (isNew())
            {
               collPhaseLinkss = new ArrayList();
            }
            else
            {
                 criteria.add(PhaseLinksPeer.LINK_ID, getId());
                 collPhaseLinkss = PhaseLinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(PhaseLinksPeer.LINK_ID, getId());
                 if (!lastPhaseLinkssCriteria.equals(criteria))
                 {
                     collPhaseLinkss = PhaseLinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPhaseLinkssCriteria = criteria;

         return collPhaseLinkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related PhaseLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getPhaseLinkssJoinPhases(Criteria criteria)
        throws TorqueException
    {
        if (collPhaseLinkss == null)
        {
            if (isNew())
            {
               collPhaseLinkss = new ArrayList();
            }
            else
            {
                criteria.add(PhaseLinksPeer.LINK_ID, getId());
                collPhaseLinkss = PhaseLinksPeer.doSelectJoinPhases(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(PhaseLinksPeer.LINK_ID, getId());
            if (!lastPhaseLinkssCriteria.equals(criteria))
            {
                collPhaseLinkss = PhaseLinksPeer.doSelectJoinPhases(criteria);
            }
        }
        lastPhaseLinkssCriteria = criteria;

        return collPhaseLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related PhaseLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getPhaseLinkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collPhaseLinkss == null)
        {
            if (isNew())
            {
               collPhaseLinkss = new ArrayList();
            }
            else
            {
                criteria.add(PhaseLinksPeer.LINK_ID, getId());
                collPhaseLinkss = PhaseLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(PhaseLinksPeer.LINK_ID, getId());
            if (!lastPhaseLinkssCriteria.equals(criteria))
            {
                collPhaseLinkss = PhaseLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastPhaseLinkssCriteria = criteria;

        return collPhaseLinkss;
    }





    /**
     * Collection to store aggregation of collEventSplitRatiossRelatedByInLinkId
     */
    protected List collEventSplitRatiossRelatedByInLinkId;

    /**
     * Temporary storage of collEventSplitRatiossRelatedByInLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initEventSplitRatiossRelatedByInLinkId()
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            collEventSplitRatiossRelatedByInLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a EventSplitRatios object to this object
     * through the EventSplitRatios foreign key attribute
     *
     * @param l EventSplitRatios
     * @throws TorqueException
     */
    public void addEventSplitRatiosRelatedByInLinkId(EventSplitRatios l) throws TorqueException
    {
        getEventSplitRatiossRelatedByInLinkId().add(l);
        l.setLinkFamiliesRelatedByInLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a EventSplitRatios object to this object
     * through the EventSplitRatios foreign key attribute using connection.
     *
     * @param l EventSplitRatios
     * @throws TorqueException
     */
    public void addEventSplitRatiosRelatedByInLinkId(EventSplitRatios l, Connection con) throws TorqueException
    {
        getEventSplitRatiossRelatedByInLinkId(con).add(l);
        l.setLinkFamiliesRelatedByInLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collEventSplitRatiossRelatedByInLinkId
     */
    private Criteria lastEventSplitRatiossRelatedByInLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSplitRatiossRelatedByInLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getEventSplitRatiossRelatedByInLinkId()
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            collEventSplitRatiossRelatedByInLinkId = getEventSplitRatiossRelatedByInLinkId(new Criteria(10));
        }
        return collEventSplitRatiossRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByInLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getEventSplitRatiossRelatedByInLinkId(Criteria criteria) throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId() );
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
                if (!lastEventSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
                {
                    collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelect(criteria);
                }
            }
        }
        lastEventSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSplitRatiossRelatedByInLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSplitRatiossRelatedByInLinkId(Connection con) throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            collEventSplitRatiossRelatedByInLinkId = getEventSplitRatiossRelatedByInLinkId(new Criteria(10), con);
        }
        return collEventSplitRatiossRelatedByInLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByInLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSplitRatiossRelatedByInLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
                 collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
                 if (!lastEventSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
                 {
                     collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastEventSplitRatiossRelatedByInLinkIdCriteria = criteria;

         return collEventSplitRatiossRelatedByInLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getEventSplitRatiossRelatedByInLinkIdJoinEvents(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelectJoinEvents(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
            if (!lastEventSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
            {
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelectJoinEvents(criteria);
            }
        }
        lastEventSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByInLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getEventSplitRatiossRelatedByInLinkIdJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
            if (!lastEventSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
            {
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        lastEventSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByInLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByInLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getEventSplitRatiossRelatedByInLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByInLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByInLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.IN_LINK_ID, getId());
            if (!lastEventSplitRatiossRelatedByInLinkIdCriteria.equals(criteria))
            {
                collEventSplitRatiossRelatedByInLinkId = EventSplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastEventSplitRatiossRelatedByInLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByInLinkId;
    }





    /**
     * Collection to store aggregation of collEventSplitRatiossRelatedByOutLinkId
     */
    protected List collEventSplitRatiossRelatedByOutLinkId;

    /**
     * Temporary storage of collEventSplitRatiossRelatedByOutLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initEventSplitRatiossRelatedByOutLinkId()
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            collEventSplitRatiossRelatedByOutLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a EventSplitRatios object to this object
     * through the EventSplitRatios foreign key attribute
     *
     * @param l EventSplitRatios
     * @throws TorqueException
     */
    public void addEventSplitRatiosRelatedByOutLinkId(EventSplitRatios l) throws TorqueException
    {
        getEventSplitRatiossRelatedByOutLinkId().add(l);
        l.setLinkFamiliesRelatedByOutLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a EventSplitRatios object to this object
     * through the EventSplitRatios foreign key attribute using connection.
     *
     * @param l EventSplitRatios
     * @throws TorqueException
     */
    public void addEventSplitRatiosRelatedByOutLinkId(EventSplitRatios l, Connection con) throws TorqueException
    {
        getEventSplitRatiossRelatedByOutLinkId(con).add(l);
        l.setLinkFamiliesRelatedByOutLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collEventSplitRatiossRelatedByOutLinkId
     */
    private Criteria lastEventSplitRatiossRelatedByOutLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSplitRatiossRelatedByOutLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getEventSplitRatiossRelatedByOutLinkId()
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            collEventSplitRatiossRelatedByOutLinkId = getEventSplitRatiossRelatedByOutLinkId(new Criteria(10));
        }
        return collEventSplitRatiossRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByOutLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getEventSplitRatiossRelatedByOutLinkId(Criteria criteria) throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId() );
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
                if (!lastEventSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
                {
                    collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelect(criteria);
                }
            }
        }
        lastEventSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSplitRatiossRelatedByOutLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSplitRatiossRelatedByOutLinkId(Connection con) throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            collEventSplitRatiossRelatedByOutLinkId = getEventSplitRatiossRelatedByOutLinkId(new Criteria(10), con);
        }
        return collEventSplitRatiossRelatedByOutLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByOutLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSplitRatiossRelatedByOutLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
                 collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
                 if (!lastEventSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
                 {
                     collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastEventSplitRatiossRelatedByOutLinkIdCriteria = criteria;

         return collEventSplitRatiossRelatedByOutLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getEventSplitRatiossRelatedByOutLinkIdJoinEvents(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelectJoinEvents(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
            if (!lastEventSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelectJoinEvents(criteria);
            }
        }
        lastEventSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByOutLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getEventSplitRatiossRelatedByOutLinkIdJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
            if (!lastEventSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        lastEventSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByOutLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related EventSplitRatiossRelatedByOutLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getEventSplitRatiossRelatedByOutLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatiossRelatedByOutLinkId == null)
        {
            if (isNew())
            {
               collEventSplitRatiossRelatedByOutLinkId = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.OUT_LINK_ID, getId());
            if (!lastEventSplitRatiossRelatedByOutLinkIdCriteria.equals(criteria))
            {
                collEventSplitRatiossRelatedByOutLinkId = EventSplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastEventSplitRatiossRelatedByOutLinkIdCriteria = criteria;

        return collEventSplitRatiossRelatedByOutLinkId;
    }





    /**
     * Collection to store aggregation of collLinkDataDetailedsRelatedByLinkId
     */
    protected List collLinkDataDetailedsRelatedByLinkId;

    /**
     * Temporary storage of collLinkDataDetailedsRelatedByLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataDetailedsRelatedByLinkId()
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            collLinkDataDetailedsRelatedByLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailedRelatedByLinkId(LinkDataDetailed l) throws TorqueException
    {
        getLinkDataDetailedsRelatedByLinkId().add(l);
        l.setLinkFamiliesRelatedByLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute using connection.
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailedRelatedByLinkId(LinkDataDetailed l, Connection con) throws TorqueException
    {
        getLinkDataDetailedsRelatedByLinkId(con).add(l);
        l.setLinkFamiliesRelatedByLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataDetailedsRelatedByLinkId
     */
    private Criteria lastLinkDataDetailedsRelatedByLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetailedsRelatedByLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataDetailedsRelatedByLinkId()
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            collLinkDataDetailedsRelatedByLinkId = getLinkDataDetailedsRelatedByLinkId(new Criteria(10));
        }
        return collLinkDataDetailedsRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataDetailedsRelatedByLinkId(Criteria criteria) throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.LINK_ID, getId() );
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                if (!lastLinkDataDetailedsRelatedByLinkIdCriteria.equals(criteria))
                {
                    collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetailedsRelatedByLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetailedsRelatedByLinkId(Connection con) throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            collLinkDataDetailedsRelatedByLinkId = getLinkDataDetailedsRelatedByLinkId(new Criteria(10), con);
        }
        return collLinkDataDetailedsRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetailedsRelatedByLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                 collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                 if (!lastLinkDataDetailedsRelatedByLinkIdCriteria.equals(criteria))
                 {
                     collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataDetailedsRelatedByLinkIdCriteria = criteria;

         return collLinkDataDetailedsRelatedByLinkId;
     }



















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByLinkIdJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByLinkIdJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByLinkIdJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByLinkId = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByLinkId;
    }





    /**
     * Collection to store aggregation of collLinkDataDetailedsRelatedByDestinationLinkId
     */
    protected List collLinkDataDetailedsRelatedByDestinationLinkId;

    /**
     * Temporary storage of collLinkDataDetailedsRelatedByDestinationLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataDetailedsRelatedByDestinationLinkId()
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailedRelatedByDestinationLinkId(LinkDataDetailed l) throws TorqueException
    {
        getLinkDataDetailedsRelatedByDestinationLinkId().add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute using connection.
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailedRelatedByDestinationLinkId(LinkDataDetailed l, Connection con) throws TorqueException
    {
        getLinkDataDetailedsRelatedByDestinationLinkId(con).add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataDetailedsRelatedByDestinationLinkId
     */
    private Criteria lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetailedsRelatedByDestinationLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataDetailedsRelatedByDestinationLinkId()
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            collLinkDataDetailedsRelatedByDestinationLinkId = getLinkDataDetailedsRelatedByDestinationLinkId(new Criteria(10));
        }
        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataDetailedsRelatedByDestinationLinkId(Criteria criteria) throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId() );
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                if (!lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
                {
                    collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetailedsRelatedByDestinationLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetailedsRelatedByDestinationLinkId(Connection con) throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            collLinkDataDetailedsRelatedByDestinationLinkId = getLinkDataDetailedsRelatedByDestinationLinkId(new Criteria(10), con);
        }
        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetailedsRelatedByDestinationLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                 collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                 if (!lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
                 {
                     collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = criteria;

         return collLinkDataDetailedsRelatedByDestinationLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByDestinationLinkIdJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByDestinationLinkIdJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByDestinationLinkIdJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkDataDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkDataDetailedsRelatedByDestinationLinkIdJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkDataDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkDataDetailedsRelatedByDestinationLinkId = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastLinkDataDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkDataDetailedsRelatedByDestinationLinkId;
    }





    /**
     * Collection to store aggregation of collLinkPerformanceDetailedsRelatedByLinkId
     */
    protected List collLinkPerformanceDetailedsRelatedByLinkId;

    /**
     * Temporary storage of collLinkPerformanceDetailedsRelatedByLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkPerformanceDetailedsRelatedByLinkId()
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            collLinkPerformanceDetailedsRelatedByLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailedRelatedByLinkId(LinkPerformanceDetailed l) throws TorqueException
    {
        getLinkPerformanceDetailedsRelatedByLinkId().add(l);
        l.setLinkFamiliesRelatedByLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute using connection.
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailedRelatedByLinkId(LinkPerformanceDetailed l, Connection con) throws TorqueException
    {
        getLinkPerformanceDetailedsRelatedByLinkId(con).add(l);
        l.setLinkFamiliesRelatedByLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkPerformanceDetailedsRelatedByLinkId
     */
    private Criteria lastLinkPerformanceDetailedsRelatedByLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetailedsRelatedByLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkPerformanceDetailedsRelatedByLinkId()
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            collLinkPerformanceDetailedsRelatedByLinkId = getLinkPerformanceDetailedsRelatedByLinkId(new Criteria(10));
        }
        return collLinkPerformanceDetailedsRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkPerformanceDetailedsRelatedByLinkId(Criteria criteria) throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId() );
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
                if (!lastLinkPerformanceDetailedsRelatedByLinkIdCriteria.equals(criteria))
                {
                    collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkPerformanceDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetailedsRelatedByLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetailedsRelatedByLinkId(Connection con) throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            collLinkPerformanceDetailedsRelatedByLinkId = getLinkPerformanceDetailedsRelatedByLinkId(new Criteria(10), con);
        }
        return collLinkPerformanceDetailedsRelatedByLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetailedsRelatedByLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
                 collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
                 if (!lastLinkPerformanceDetailedsRelatedByLinkIdCriteria.equals(criteria))
                 {
                     collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkPerformanceDetailedsRelatedByLinkIdCriteria = criteria;

         return collLinkPerformanceDetailedsRelatedByLinkId;
     }



















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkPerformanceDetailedsRelatedByLinkIdJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
            if (!lastLinkPerformanceDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkPerformanceDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkPerformanceDetailedsRelatedByLinkIdJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
            if (!lastLinkPerformanceDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkPerformanceDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkPerformanceDetailedsRelatedByLinkIdJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.LINK_ID, getId());
            if (!lastLinkPerformanceDetailedsRelatedByLinkIdCriteria.equals(criteria))
            {
                collLinkPerformanceDetailedsRelatedByLinkId = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkPerformanceDetailedsRelatedByLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByLinkId;
    }





    /**
     * Collection to store aggregation of collLinkPerformanceDetailedsRelatedByDestinationLinkId
     */
    protected List collLinkPerformanceDetailedsRelatedByDestinationLinkId;

    /**
     * Temporary storage of collLinkPerformanceDetailedsRelatedByDestinationLinkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkPerformanceDetailedsRelatedByDestinationLinkId()
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            collLinkPerformanceDetailedsRelatedByDestinationLinkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailedRelatedByDestinationLinkId(LinkPerformanceDetailed l) throws TorqueException
    {
        getLinkPerformanceDetailedsRelatedByDestinationLinkId().add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute using connection.
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailedRelatedByDestinationLinkId(LinkPerformanceDetailed l, Connection con) throws TorqueException
    {
        getLinkPerformanceDetailedsRelatedByDestinationLinkId(con).add(l);
        l.setLinkFamiliesRelatedByDestinationLinkId((LinkFamilies) this);
    }

    /**
     * The criteria used to select the current contents of collLinkPerformanceDetailedsRelatedByDestinationLinkId
     */
    private Criteria lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetailedsRelatedByDestinationLinkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkPerformanceDetailedsRelatedByDestinationLinkId()
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            collLinkPerformanceDetailedsRelatedByDestinationLinkId = getLinkPerformanceDetailedsRelatedByDestinationLinkId(new Criteria(10));
        }
        return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkPerformanceDetailedsRelatedByDestinationLinkId(Criteria criteria) throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId() );
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
                if (!lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
                {
                    collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetailedsRelatedByDestinationLinkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetailedsRelatedByDestinationLinkId(Connection con) throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            collLinkPerformanceDetailedsRelatedByDestinationLinkId = getLinkPerformanceDetailedsRelatedByDestinationLinkId(new Criteria(10), con);
        }
        return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByDestinationLinkId from storage.
     * If this LinkFamilies is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetailedsRelatedByDestinationLinkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
                 collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
                 if (!lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
                 {
                     collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria = criteria;

         return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkPerformanceDetailedsRelatedByDestinationLinkIdJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkPerformanceDetailedsRelatedByDestinationLinkIdJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this LinkFamilies is new, it will return
     * an empty collection; or if this LinkFamilies has previously
     * been saved, it will retrieve related LinkPerformanceDetailedsRelatedByDestinationLinkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in LinkFamilies.
     */
    protected List getLinkPerformanceDetailedsRelatedByDestinationLinkIdJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetailedsRelatedByDestinationLinkId == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetailedsRelatedByDestinationLinkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.DESTINATION_LINK_ID, getId());
            if (!lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria.equals(criteria))
            {
                collLinkPerformanceDetailedsRelatedByDestinationLinkId = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkPerformanceDetailedsRelatedByDestinationLinkIdCriteria = criteria;

        return collLinkPerformanceDetailedsRelatedByDestinationLinkId;
    }











        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(LinkFamiliesPeer.ID))
        {
            return getId();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (LinkFamiliesPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(LinkFamiliesPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    LinkFamiliesPeer.doInsert((LinkFamilies) this, con);
                    setNew(false);
                }
                else
                {
                    LinkFamiliesPeer.doUpdate((LinkFamilies) this, con);
                }
            }


            if (collLinkss != null)
            {
                for (int i = 0; i < collLinkss.size(); i++)
                {
                    ((Links) collLinkss.get(i)).save(con);
                }
            }

            if (collLinkTurnRestrictionssRelatedByFromLinkId != null)
            {
                for (int i = 0; i < collLinkTurnRestrictionssRelatedByFromLinkId.size(); i++)
                {
                    ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByFromLinkId.get(i)).save(con);
                }
            }

            if (collLinkTurnRestrictionssRelatedByToLinkId != null)
            {
                for (int i = 0; i < collLinkTurnRestrictionssRelatedByToLinkId.size(); i++)
                {
                    ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByToLinkId.get(i)).save(con);
                }
            }

            if (collNetworkConnectionssRelatedByFromLinkId != null)
            {
                for (int i = 0; i < collNetworkConnectionssRelatedByFromLinkId.size(); i++)
                {
                    ((NetworkConnections) collNetworkConnectionssRelatedByFromLinkId.get(i)).save(con);
                }
            }

            if (collNetworkConnectionssRelatedByToLinkId != null)
            {
                for (int i = 0; i < collNetworkConnectionssRelatedByToLinkId.size(); i++)
                {
                    ((NetworkConnections) collNetworkConnectionssRelatedByToLinkId.get(i)).save(con);
                }
            }

            if (collDestinationNetworkss != null)
            {
                for (int i = 0; i < collDestinationNetworkss.size(); i++)
                {
                    ((DestinationNetworks) collDestinationNetworkss.get(i)).save(con);
                }
            }

            if (collDestinationNetworkLinkss != null)
            {
                for (int i = 0; i < collDestinationNetworkLinkss.size(); i++)
                {
                    ((DestinationNetworkLinks) collDestinationNetworkLinkss.get(i)).save(con);
                }
            }

            if (collRouteLinkss != null)
            {
                for (int i = 0; i < collRouteLinkss.size(); i++)
                {
                    ((RouteLinks) collRouteLinkss.get(i)).save(con);
                }
            }

            if (collInitialDensitiessRelatedByLinkId != null)
            {
                for (int i = 0; i < collInitialDensitiessRelatedByLinkId.size(); i++)
                {
                    ((InitialDensities) collInitialDensitiessRelatedByLinkId.get(i)).save(con);
                }
            }

            if (collInitialDensitiessRelatedByDestinationLinkId != null)
            {
                for (int i = 0; i < collInitialDensitiessRelatedByDestinationLinkId.size(); i++)
                {
                    ((InitialDensities) collInitialDensitiessRelatedByDestinationLinkId.get(i)).save(con);
                }
            }

            if (collWeavingFactorssRelatedByInLinkId != null)
            {
                for (int i = 0; i < collWeavingFactorssRelatedByInLinkId.size(); i++)
                {
                    ((WeavingFactors) collWeavingFactorssRelatedByInLinkId.get(i)).save(con);
                }
            }

            if (collWeavingFactorssRelatedByOutLinkId != null)
            {
                for (int i = 0; i < collWeavingFactorssRelatedByOutLinkId.size(); i++)
                {
                    ((WeavingFactors) collWeavingFactorssRelatedByOutLinkId.get(i)).save(con);
                }
            }

            if (collSplitRatiossRelatedByInLinkId != null)
            {
                for (int i = 0; i < collSplitRatiossRelatedByInLinkId.size(); i++)
                {
                    ((SplitRatios) collSplitRatiossRelatedByInLinkId.get(i)).save(con);
                }
            }

            if (collSplitRatiossRelatedByOutLinkId != null)
            {
                for (int i = 0; i < collSplitRatiossRelatedByOutLinkId.size(); i++)
                {
                    ((SplitRatios) collSplitRatiossRelatedByOutLinkId.get(i)).save(con);
                }
            }

            if (collFundamentalDiagramProfiless != null)
            {
                for (int i = 0; i < collFundamentalDiagramProfiless.size(); i++)
                {
                    ((FundamentalDiagramProfiles) collFundamentalDiagramProfiless.get(i)).save(con);
                }
            }

            if (collDemandProfilessRelatedByOriginLinkId != null)
            {
                for (int i = 0; i < collDemandProfilessRelatedByOriginLinkId.size(); i++)
                {
                    ((DemandProfiles) collDemandProfilessRelatedByOriginLinkId.get(i)).save(con);
                }
            }

            if (collDemandProfilessRelatedByDestinationLinkId != null)
            {
                for (int i = 0; i < collDemandProfilessRelatedByDestinationLinkId.size(); i++)
                {
                    ((DemandProfiles) collDemandProfilessRelatedByDestinationLinkId.get(i)).save(con);
                }
            }

            if (collDownstreamBoundaryCapacityProfiless != null)
            {
                for (int i = 0; i < collDownstreamBoundaryCapacityProfiless.size(); i++)
                {
                    ((DownstreamBoundaryCapacityProfiles) collDownstreamBoundaryCapacityProfiless.get(i)).save(con);
                }
            }

            if (collSensorss != null)
            {
                for (int i = 0; i < collSensorss.size(); i++)
                {
                    ((Sensors) collSensorss.get(i)).save(con);
                }
            }

            if (collPhaseLinkss != null)
            {
                for (int i = 0; i < collPhaseLinkss.size(); i++)
                {
                    ((PhaseLinks) collPhaseLinkss.get(i)).save(con);
                }
            }

            if (collEventSplitRatiossRelatedByInLinkId != null)
            {
                for (int i = 0; i < collEventSplitRatiossRelatedByInLinkId.size(); i++)
                {
                    ((EventSplitRatios) collEventSplitRatiossRelatedByInLinkId.get(i)).save(con);
                }
            }

            if (collEventSplitRatiossRelatedByOutLinkId != null)
            {
                for (int i = 0; i < collEventSplitRatiossRelatedByOutLinkId.size(); i++)
                {
                    ((EventSplitRatios) collEventSplitRatiossRelatedByOutLinkId.get(i)).save(con);
                }
            }

            if (collLinkDataDetailedsRelatedByLinkId != null)
            {
                for (int i = 0; i < collLinkDataDetailedsRelatedByLinkId.size(); i++)
                {
                    ((LinkDataDetailed) collLinkDataDetailedsRelatedByLinkId.get(i)).save(con);
                }
            }

            if (collLinkDataDetailedsRelatedByDestinationLinkId != null)
            {
                for (int i = 0; i < collLinkDataDetailedsRelatedByDestinationLinkId.size(); i++)
                {
                    ((LinkDataDetailed) collLinkDataDetailedsRelatedByDestinationLinkId.get(i)).save(con);
                }
            }

            if (collLinkPerformanceDetailedsRelatedByLinkId != null)
            {
                for (int i = 0; i < collLinkPerformanceDetailedsRelatedByLinkId.size(); i++)
                {
                    ((LinkPerformanceDetailed) collLinkPerformanceDetailedsRelatedByLinkId.get(i)).save(con);
                }
            }

            if (collLinkPerformanceDetailedsRelatedByDestinationLinkId != null)
            {
                for (int i = 0; i < collLinkPerformanceDetailedsRelatedByDestinationLinkId.size(); i++)
                {
                    ((LinkPerformanceDetailed) collLinkPerformanceDetailedsRelatedByDestinationLinkId.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public LinkFamilies copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public LinkFamilies copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public LinkFamilies copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new LinkFamilies(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public LinkFamilies copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new LinkFamilies(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected LinkFamilies copyInto(LinkFamilies copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected LinkFamilies copyInto(LinkFamilies copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected LinkFamilies copyInto(LinkFamilies copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vLinkss = getLinkss();
        if (vLinkss != null)
        {
            for (int i = 0; i < vLinkss.size(); i++)
            {
                Links obj = (Links) vLinkss.get(i);
                copyObj.addLinks(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkss = null;
        }


        List vLinkTurnRestrictionssRelatedByFromLinkId = getLinkTurnRestrictionssRelatedByFromLinkId();
        if (vLinkTurnRestrictionssRelatedByFromLinkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByFromLinkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByFromLinkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByFromLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByFromLinkId = null;
        }


        List vLinkTurnRestrictionssRelatedByToLinkId = getLinkTurnRestrictionssRelatedByToLinkId();
        if (vLinkTurnRestrictionssRelatedByToLinkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByToLinkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByToLinkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByToLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByToLinkId = null;
        }


        List vNetworkConnectionssRelatedByFromLinkId = getNetworkConnectionssRelatedByFromLinkId();
        if (vNetworkConnectionssRelatedByFromLinkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByFromLinkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByFromLinkId.get(i);
                copyObj.addNetworkConnectionsRelatedByFromLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByFromLinkId = null;
        }


        List vNetworkConnectionssRelatedByToLinkId = getNetworkConnectionssRelatedByToLinkId();
        if (vNetworkConnectionssRelatedByToLinkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByToLinkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByToLinkId.get(i);
                copyObj.addNetworkConnectionsRelatedByToLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByToLinkId = null;
        }


        List vDestinationNetworkss = getDestinationNetworkss();
        if (vDestinationNetworkss != null)
        {
            for (int i = 0; i < vDestinationNetworkss.size(); i++)
            {
                DestinationNetworks obj = (DestinationNetworks) vDestinationNetworkss.get(i);
                copyObj.addDestinationNetworks(obj.copy());
            }
        }
        else
        {
            copyObj.collDestinationNetworkss = null;
        }


        List vDestinationNetworkLinkss = getDestinationNetworkLinkss();
        if (vDestinationNetworkLinkss != null)
        {
            for (int i = 0; i < vDestinationNetworkLinkss.size(); i++)
            {
                DestinationNetworkLinks obj = (DestinationNetworkLinks) vDestinationNetworkLinkss.get(i);
                copyObj.addDestinationNetworkLinks(obj.copy());
            }
        }
        else
        {
            copyObj.collDestinationNetworkLinkss = null;
        }


        List vRouteLinkss = getRouteLinkss();
        if (vRouteLinkss != null)
        {
            for (int i = 0; i < vRouteLinkss.size(); i++)
            {
                RouteLinks obj = (RouteLinks) vRouteLinkss.get(i);
                copyObj.addRouteLinks(obj.copy());
            }
        }
        else
        {
            copyObj.collRouteLinkss = null;
        }


        List vInitialDensitiessRelatedByLinkId = getInitialDensitiessRelatedByLinkId();
        if (vInitialDensitiessRelatedByLinkId != null)
        {
            for (int i = 0; i < vInitialDensitiessRelatedByLinkId.size(); i++)
            {
                InitialDensities obj = (InitialDensities) vInitialDensitiessRelatedByLinkId.get(i);
                copyObj.addInitialDensitiesRelatedByLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collInitialDensitiessRelatedByLinkId = null;
        }


        List vInitialDensitiessRelatedByDestinationLinkId = getInitialDensitiessRelatedByDestinationLinkId();
        if (vInitialDensitiessRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vInitialDensitiessRelatedByDestinationLinkId.size(); i++)
            {
                InitialDensities obj = (InitialDensities) vInitialDensitiessRelatedByDestinationLinkId.get(i);
                copyObj.addInitialDensitiesRelatedByDestinationLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collInitialDensitiessRelatedByDestinationLinkId = null;
        }


        List vWeavingFactorssRelatedByInLinkId = getWeavingFactorssRelatedByInLinkId();
        if (vWeavingFactorssRelatedByInLinkId != null)
        {
            for (int i = 0; i < vWeavingFactorssRelatedByInLinkId.size(); i++)
            {
                WeavingFactors obj = (WeavingFactors) vWeavingFactorssRelatedByInLinkId.get(i);
                copyObj.addWeavingFactorsRelatedByInLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collWeavingFactorssRelatedByInLinkId = null;
        }


        List vWeavingFactorssRelatedByOutLinkId = getWeavingFactorssRelatedByOutLinkId();
        if (vWeavingFactorssRelatedByOutLinkId != null)
        {
            for (int i = 0; i < vWeavingFactorssRelatedByOutLinkId.size(); i++)
            {
                WeavingFactors obj = (WeavingFactors) vWeavingFactorssRelatedByOutLinkId.get(i);
                copyObj.addWeavingFactorsRelatedByOutLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collWeavingFactorssRelatedByOutLinkId = null;
        }


        List vSplitRatiossRelatedByInLinkId = getSplitRatiossRelatedByInLinkId();
        if (vSplitRatiossRelatedByInLinkId != null)
        {
            for (int i = 0; i < vSplitRatiossRelatedByInLinkId.size(); i++)
            {
                SplitRatios obj = (SplitRatios) vSplitRatiossRelatedByInLinkId.get(i);
                copyObj.addSplitRatiosRelatedByInLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collSplitRatiossRelatedByInLinkId = null;
        }


        List vSplitRatiossRelatedByOutLinkId = getSplitRatiossRelatedByOutLinkId();
        if (vSplitRatiossRelatedByOutLinkId != null)
        {
            for (int i = 0; i < vSplitRatiossRelatedByOutLinkId.size(); i++)
            {
                SplitRatios obj = (SplitRatios) vSplitRatiossRelatedByOutLinkId.get(i);
                copyObj.addSplitRatiosRelatedByOutLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collSplitRatiossRelatedByOutLinkId = null;
        }


        List vFundamentalDiagramProfiless = getFundamentalDiagramProfiless();
        if (vFundamentalDiagramProfiless != null)
        {
            for (int i = 0; i < vFundamentalDiagramProfiless.size(); i++)
            {
                FundamentalDiagramProfiles obj = (FundamentalDiagramProfiles) vFundamentalDiagramProfiless.get(i);
                copyObj.addFundamentalDiagramProfiles(obj.copy());
            }
        }
        else
        {
            copyObj.collFundamentalDiagramProfiless = null;
        }


        List vDemandProfilessRelatedByOriginLinkId = getDemandProfilessRelatedByOriginLinkId();
        if (vDemandProfilessRelatedByOriginLinkId != null)
        {
            for (int i = 0; i < vDemandProfilessRelatedByOriginLinkId.size(); i++)
            {
                DemandProfiles obj = (DemandProfiles) vDemandProfilessRelatedByOriginLinkId.get(i);
                copyObj.addDemandProfilesRelatedByOriginLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collDemandProfilessRelatedByOriginLinkId = null;
        }


        List vDemandProfilessRelatedByDestinationLinkId = getDemandProfilessRelatedByDestinationLinkId();
        if (vDemandProfilessRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vDemandProfilessRelatedByDestinationLinkId.size(); i++)
            {
                DemandProfiles obj = (DemandProfiles) vDemandProfilessRelatedByDestinationLinkId.get(i);
                copyObj.addDemandProfilesRelatedByDestinationLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collDemandProfilessRelatedByDestinationLinkId = null;
        }


        List vDownstreamBoundaryCapacityProfiless = getDownstreamBoundaryCapacityProfiless();
        if (vDownstreamBoundaryCapacityProfiless != null)
        {
            for (int i = 0; i < vDownstreamBoundaryCapacityProfiless.size(); i++)
            {
                DownstreamBoundaryCapacityProfiles obj = (DownstreamBoundaryCapacityProfiles) vDownstreamBoundaryCapacityProfiless.get(i);
                copyObj.addDownstreamBoundaryCapacityProfiles(obj.copy());
            }
        }
        else
        {
            copyObj.collDownstreamBoundaryCapacityProfiless = null;
        }


        List vSensorss = getSensorss();
        if (vSensorss != null)
        {
            for (int i = 0; i < vSensorss.size(); i++)
            {
                Sensors obj = (Sensors) vSensorss.get(i);
                copyObj.addSensors(obj.copy());
            }
        }
        else
        {
            copyObj.collSensorss = null;
        }


        List vPhaseLinkss = getPhaseLinkss();
        if (vPhaseLinkss != null)
        {
            for (int i = 0; i < vPhaseLinkss.size(); i++)
            {
                PhaseLinks obj = (PhaseLinks) vPhaseLinkss.get(i);
                copyObj.addPhaseLinks(obj.copy());
            }
        }
        else
        {
            copyObj.collPhaseLinkss = null;
        }


        List vEventSplitRatiossRelatedByInLinkId = getEventSplitRatiossRelatedByInLinkId();
        if (vEventSplitRatiossRelatedByInLinkId != null)
        {
            for (int i = 0; i < vEventSplitRatiossRelatedByInLinkId.size(); i++)
            {
                EventSplitRatios obj = (EventSplitRatios) vEventSplitRatiossRelatedByInLinkId.get(i);
                copyObj.addEventSplitRatiosRelatedByInLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collEventSplitRatiossRelatedByInLinkId = null;
        }


        List vEventSplitRatiossRelatedByOutLinkId = getEventSplitRatiossRelatedByOutLinkId();
        if (vEventSplitRatiossRelatedByOutLinkId != null)
        {
            for (int i = 0; i < vEventSplitRatiossRelatedByOutLinkId.size(); i++)
            {
                EventSplitRatios obj = (EventSplitRatios) vEventSplitRatiossRelatedByOutLinkId.get(i);
                copyObj.addEventSplitRatiosRelatedByOutLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collEventSplitRatiossRelatedByOutLinkId = null;
        }


        List vLinkDataDetailedsRelatedByLinkId = getLinkDataDetailedsRelatedByLinkId();
        if (vLinkDataDetailedsRelatedByLinkId != null)
        {
            for (int i = 0; i < vLinkDataDetailedsRelatedByLinkId.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetailedsRelatedByLinkId.get(i);
                copyObj.addLinkDataDetailedRelatedByLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataDetailedsRelatedByLinkId = null;
        }


        List vLinkDataDetailedsRelatedByDestinationLinkId = getLinkDataDetailedsRelatedByDestinationLinkId();
        if (vLinkDataDetailedsRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vLinkDataDetailedsRelatedByDestinationLinkId.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetailedsRelatedByDestinationLinkId.get(i);
                copyObj.addLinkDataDetailedRelatedByDestinationLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataDetailedsRelatedByDestinationLinkId = null;
        }


        List vLinkPerformanceDetailedsRelatedByLinkId = getLinkPerformanceDetailedsRelatedByLinkId();
        if (vLinkPerformanceDetailedsRelatedByLinkId != null)
        {
            for (int i = 0; i < vLinkPerformanceDetailedsRelatedByLinkId.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetailedsRelatedByLinkId.get(i);
                copyObj.addLinkPerformanceDetailedRelatedByLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetailedsRelatedByLinkId = null;
        }


        List vLinkPerformanceDetailedsRelatedByDestinationLinkId = getLinkPerformanceDetailedsRelatedByDestinationLinkId();
        if (vLinkPerformanceDetailedsRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vLinkPerformanceDetailedsRelatedByDestinationLinkId.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetailedsRelatedByDestinationLinkId.get(i);
                copyObj.addLinkPerformanceDetailedRelatedByDestinationLinkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetailedsRelatedByDestinationLinkId = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected LinkFamilies copyInto(LinkFamilies copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vLinkss = getLinkss(con);
        if (vLinkss != null)
        {
            for (int i = 0; i < vLinkss.size(); i++)
            {
                Links obj = (Links) vLinkss.get(i);
                copyObj.addLinks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkss = null;
        }


        List vLinkTurnRestrictionssRelatedByFromLinkId = getLinkTurnRestrictionssRelatedByFromLinkId(con);
        if (vLinkTurnRestrictionssRelatedByFromLinkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByFromLinkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByFromLinkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByFromLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByFromLinkId = null;
        }


        List vLinkTurnRestrictionssRelatedByToLinkId = getLinkTurnRestrictionssRelatedByToLinkId(con);
        if (vLinkTurnRestrictionssRelatedByToLinkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByToLinkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByToLinkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByToLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByToLinkId = null;
        }


        List vNetworkConnectionssRelatedByFromLinkId = getNetworkConnectionssRelatedByFromLinkId(con);
        if (vNetworkConnectionssRelatedByFromLinkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByFromLinkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByFromLinkId.get(i);
                copyObj.addNetworkConnectionsRelatedByFromLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByFromLinkId = null;
        }


        List vNetworkConnectionssRelatedByToLinkId = getNetworkConnectionssRelatedByToLinkId(con);
        if (vNetworkConnectionssRelatedByToLinkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByToLinkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByToLinkId.get(i);
                copyObj.addNetworkConnectionsRelatedByToLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByToLinkId = null;
        }


        List vDestinationNetworkss = getDestinationNetworkss(con);
        if (vDestinationNetworkss != null)
        {
            for (int i = 0; i < vDestinationNetworkss.size(); i++)
            {
                DestinationNetworks obj = (DestinationNetworks) vDestinationNetworkss.get(i);
                copyObj.addDestinationNetworks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDestinationNetworkss = null;
        }


        List vDestinationNetworkLinkss = getDestinationNetworkLinkss(con);
        if (vDestinationNetworkLinkss != null)
        {
            for (int i = 0; i < vDestinationNetworkLinkss.size(); i++)
            {
                DestinationNetworkLinks obj = (DestinationNetworkLinks) vDestinationNetworkLinkss.get(i);
                copyObj.addDestinationNetworkLinks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDestinationNetworkLinkss = null;
        }


        List vRouteLinkss = getRouteLinkss(con);
        if (vRouteLinkss != null)
        {
            for (int i = 0; i < vRouteLinkss.size(); i++)
            {
                RouteLinks obj = (RouteLinks) vRouteLinkss.get(i);
                copyObj.addRouteLinks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRouteLinkss = null;
        }


        List vInitialDensitiessRelatedByLinkId = getInitialDensitiessRelatedByLinkId(con);
        if (vInitialDensitiessRelatedByLinkId != null)
        {
            for (int i = 0; i < vInitialDensitiessRelatedByLinkId.size(); i++)
            {
                InitialDensities obj = (InitialDensities) vInitialDensitiessRelatedByLinkId.get(i);
                copyObj.addInitialDensitiesRelatedByLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collInitialDensitiessRelatedByLinkId = null;
        }


        List vInitialDensitiessRelatedByDestinationLinkId = getInitialDensitiessRelatedByDestinationLinkId(con);
        if (vInitialDensitiessRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vInitialDensitiessRelatedByDestinationLinkId.size(); i++)
            {
                InitialDensities obj = (InitialDensities) vInitialDensitiessRelatedByDestinationLinkId.get(i);
                copyObj.addInitialDensitiesRelatedByDestinationLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collInitialDensitiessRelatedByDestinationLinkId = null;
        }


        List vWeavingFactorssRelatedByInLinkId = getWeavingFactorssRelatedByInLinkId(con);
        if (vWeavingFactorssRelatedByInLinkId != null)
        {
            for (int i = 0; i < vWeavingFactorssRelatedByInLinkId.size(); i++)
            {
                WeavingFactors obj = (WeavingFactors) vWeavingFactorssRelatedByInLinkId.get(i);
                copyObj.addWeavingFactorsRelatedByInLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collWeavingFactorssRelatedByInLinkId = null;
        }


        List vWeavingFactorssRelatedByOutLinkId = getWeavingFactorssRelatedByOutLinkId(con);
        if (vWeavingFactorssRelatedByOutLinkId != null)
        {
            for (int i = 0; i < vWeavingFactorssRelatedByOutLinkId.size(); i++)
            {
                WeavingFactors obj = (WeavingFactors) vWeavingFactorssRelatedByOutLinkId.get(i);
                copyObj.addWeavingFactorsRelatedByOutLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collWeavingFactorssRelatedByOutLinkId = null;
        }


        List vSplitRatiossRelatedByInLinkId = getSplitRatiossRelatedByInLinkId(con);
        if (vSplitRatiossRelatedByInLinkId != null)
        {
            for (int i = 0; i < vSplitRatiossRelatedByInLinkId.size(); i++)
            {
                SplitRatios obj = (SplitRatios) vSplitRatiossRelatedByInLinkId.get(i);
                copyObj.addSplitRatiosRelatedByInLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSplitRatiossRelatedByInLinkId = null;
        }


        List vSplitRatiossRelatedByOutLinkId = getSplitRatiossRelatedByOutLinkId(con);
        if (vSplitRatiossRelatedByOutLinkId != null)
        {
            for (int i = 0; i < vSplitRatiossRelatedByOutLinkId.size(); i++)
            {
                SplitRatios obj = (SplitRatios) vSplitRatiossRelatedByOutLinkId.get(i);
                copyObj.addSplitRatiosRelatedByOutLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSplitRatiossRelatedByOutLinkId = null;
        }


        List vFundamentalDiagramProfiless = getFundamentalDiagramProfiless(con);
        if (vFundamentalDiagramProfiless != null)
        {
            for (int i = 0; i < vFundamentalDiagramProfiless.size(); i++)
            {
                FundamentalDiagramProfiles obj = (FundamentalDiagramProfiles) vFundamentalDiagramProfiless.get(i);
                copyObj.addFundamentalDiagramProfiles(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collFundamentalDiagramProfiless = null;
        }


        List vDemandProfilessRelatedByOriginLinkId = getDemandProfilessRelatedByOriginLinkId(con);
        if (vDemandProfilessRelatedByOriginLinkId != null)
        {
            for (int i = 0; i < vDemandProfilessRelatedByOriginLinkId.size(); i++)
            {
                DemandProfiles obj = (DemandProfiles) vDemandProfilessRelatedByOriginLinkId.get(i);
                copyObj.addDemandProfilesRelatedByOriginLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDemandProfilessRelatedByOriginLinkId = null;
        }


        List vDemandProfilessRelatedByDestinationLinkId = getDemandProfilessRelatedByDestinationLinkId(con);
        if (vDemandProfilessRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vDemandProfilessRelatedByDestinationLinkId.size(); i++)
            {
                DemandProfiles obj = (DemandProfiles) vDemandProfilessRelatedByDestinationLinkId.get(i);
                copyObj.addDemandProfilesRelatedByDestinationLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDemandProfilessRelatedByDestinationLinkId = null;
        }


        List vDownstreamBoundaryCapacityProfiless = getDownstreamBoundaryCapacityProfiless(con);
        if (vDownstreamBoundaryCapacityProfiless != null)
        {
            for (int i = 0; i < vDownstreamBoundaryCapacityProfiless.size(); i++)
            {
                DownstreamBoundaryCapacityProfiles obj = (DownstreamBoundaryCapacityProfiles) vDownstreamBoundaryCapacityProfiless.get(i);
                copyObj.addDownstreamBoundaryCapacityProfiles(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDownstreamBoundaryCapacityProfiless = null;
        }


        List vSensorss = getSensorss(con);
        if (vSensorss != null)
        {
            for (int i = 0; i < vSensorss.size(); i++)
            {
                Sensors obj = (Sensors) vSensorss.get(i);
                copyObj.addSensors(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSensorss = null;
        }


        List vPhaseLinkss = getPhaseLinkss(con);
        if (vPhaseLinkss != null)
        {
            for (int i = 0; i < vPhaseLinkss.size(); i++)
            {
                PhaseLinks obj = (PhaseLinks) vPhaseLinkss.get(i);
                copyObj.addPhaseLinks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collPhaseLinkss = null;
        }


        List vEventSplitRatiossRelatedByInLinkId = getEventSplitRatiossRelatedByInLinkId(con);
        if (vEventSplitRatiossRelatedByInLinkId != null)
        {
            for (int i = 0; i < vEventSplitRatiossRelatedByInLinkId.size(); i++)
            {
                EventSplitRatios obj = (EventSplitRatios) vEventSplitRatiossRelatedByInLinkId.get(i);
                copyObj.addEventSplitRatiosRelatedByInLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collEventSplitRatiossRelatedByInLinkId = null;
        }


        List vEventSplitRatiossRelatedByOutLinkId = getEventSplitRatiossRelatedByOutLinkId(con);
        if (vEventSplitRatiossRelatedByOutLinkId != null)
        {
            for (int i = 0; i < vEventSplitRatiossRelatedByOutLinkId.size(); i++)
            {
                EventSplitRatios obj = (EventSplitRatios) vEventSplitRatiossRelatedByOutLinkId.get(i);
                copyObj.addEventSplitRatiosRelatedByOutLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collEventSplitRatiossRelatedByOutLinkId = null;
        }


        List vLinkDataDetailedsRelatedByLinkId = getLinkDataDetailedsRelatedByLinkId(con);
        if (vLinkDataDetailedsRelatedByLinkId != null)
        {
            for (int i = 0; i < vLinkDataDetailedsRelatedByLinkId.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetailedsRelatedByLinkId.get(i);
                copyObj.addLinkDataDetailedRelatedByLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataDetailedsRelatedByLinkId = null;
        }


        List vLinkDataDetailedsRelatedByDestinationLinkId = getLinkDataDetailedsRelatedByDestinationLinkId(con);
        if (vLinkDataDetailedsRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vLinkDataDetailedsRelatedByDestinationLinkId.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetailedsRelatedByDestinationLinkId.get(i);
                copyObj.addLinkDataDetailedRelatedByDestinationLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataDetailedsRelatedByDestinationLinkId = null;
        }


        List vLinkPerformanceDetailedsRelatedByLinkId = getLinkPerformanceDetailedsRelatedByLinkId(con);
        if (vLinkPerformanceDetailedsRelatedByLinkId != null)
        {
            for (int i = 0; i < vLinkPerformanceDetailedsRelatedByLinkId.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetailedsRelatedByLinkId.get(i);
                copyObj.addLinkPerformanceDetailedRelatedByLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetailedsRelatedByLinkId = null;
        }


        List vLinkPerformanceDetailedsRelatedByDestinationLinkId = getLinkPerformanceDetailedsRelatedByDestinationLinkId(con);
        if (vLinkPerformanceDetailedsRelatedByDestinationLinkId != null)
        {
            for (int i = 0; i < vLinkPerformanceDetailedsRelatedByDestinationLinkId.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetailedsRelatedByDestinationLinkId.get(i);
                copyObj.addLinkPerformanceDetailedRelatedByDestinationLinkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetailedsRelatedByDestinationLinkId = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LinkFamiliesPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return LinkFamiliesPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("LinkFamilies:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        return(str.toString());
    }
}
