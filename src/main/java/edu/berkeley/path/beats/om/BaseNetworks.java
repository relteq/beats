package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Networks
 */
public abstract class BaseNetworks extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final NetworksPeer peer =
        new NetworksPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the isMaster field */
    private Boolean isMaster;

    /** The value for the name field */
    private String name;

    /** The value for the source field */
    private Long source;

    /** The value for the description field */
    private String description;

    /** The value for the inUse field */
    private Boolean inUse;

    /** The value for the locked field */
    private Boolean locked;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated Nodes
        if (collNodess != null)
        {
            for (int i = 0; i < collNodess.size(); i++)
            {
                ((Nodes) collNodess.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated Links
        if (collLinkss != null)
        {
            for (int i = 0; i < collLinkss.size(); i++)
            {
                ((Links) collLinkss.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkTurnRestrictions
        if (collLinkTurnRestrictionssRelatedByFromNetworkId != null)
        {
            for (int i = 0; i < collLinkTurnRestrictionssRelatedByFromNetworkId.size(); i++)
            {
                ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByFromNetworkId.get(i))
                        .setFromNetworkId(v);
            }
        }

        // update associated LinkTurnRestrictions
        if (collLinkTurnRestrictionssRelatedByToNetworkId != null)
        {
            for (int i = 0; i < collLinkTurnRestrictionssRelatedByToNetworkId.size(); i++)
            {
                ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByToNetworkId.get(i))
                        .setToNetworkId(v);
            }
        }

        // update associated NetworkConnections
        if (collNetworkConnectionssRelatedByFromNetworkId != null)
        {
            for (int i = 0; i < collNetworkConnectionssRelatedByFromNetworkId.size(); i++)
            {
                ((NetworkConnections) collNetworkConnectionssRelatedByFromNetworkId.get(i))
                        .setFromNetworkId(v);
            }
        }

        // update associated NetworkConnections
        if (collNetworkConnectionssRelatedByToNetworkId != null)
        {
            for (int i = 0; i < collNetworkConnectionssRelatedByToNetworkId.size(); i++)
            {
                ((NetworkConnections) collNetworkConnectionssRelatedByToNetworkId.get(i))
                        .setToNetworkId(v);
            }
        }

        // update associated NetworkSets
        if (collNetworkSetss != null)
        {
            for (int i = 0; i < collNetworkSetss.size(); i++)
            {
                ((NetworkSets) collNetworkSetss.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkDataDetailed
        if (collLinkDataDetaileds != null)
        {
            for (int i = 0; i < collLinkDataDetaileds.size(); i++)
            {
                ((LinkDataDetailed) collLinkDataDetaileds.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkPerformanceDetailed
        if (collLinkPerformanceDetaileds != null)
        {
            for (int i = 0; i < collLinkPerformanceDetaileds.size(); i++)
            {
                ((LinkPerformanceDetailed) collLinkPerformanceDetaileds.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated SignalData
        if (collSignalDatas != null)
        {
            for (int i = 0; i < collSignalDatas.size(); i++)
            {
                ((SignalData) collSignalDatas.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated SignalPhasePerformance
        if (collSignalPhasePerformances != null)
        {
            for (int i = 0; i < collSignalPhasePerformances.size(); i++)
            {
                ((SignalPhasePerformance) collSignalPhasePerformances.get(i))
                        .setNetworkId(v);
            }
        }
    }

    /**
     * Get the IsMaster
     *
     * @return Boolean
     */
    public Boolean getIsMaster()
    {
        return isMaster;
    }


    /**
     * Set the value of IsMaster
     *
     * @param v new value
     */
    public void setIsMaster(Boolean v) 
    {

        if (!ObjectUtils.equals(this.isMaster, v))
        {
            this.isMaster = v;
            setModified(true);
        }


    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Source
     *
     * @return Long
     */
    public Long getSource()
    {
        return source;
    }


    /**
     * Set the value of Source
     *
     * @param v new value
     */
    public void setSource(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.source, v))
        {
            this.source = v;
            setModified(true);
        }


        if (aNetworksRelatedBySource != null && !ObjectUtils.equals(aNetworksRelatedBySource.getId(), v))
        {
            aNetworksRelatedBySource = null;
        }

    }

    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }


    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {

        if (!ObjectUtils.equals(this.description, v))
        {
            this.description = v;
            setModified(true);
        }


    }

    /**
     * Get the InUse
     *
     * @return Boolean
     */
    public Boolean getInUse()
    {
        return inUse;
    }


    /**
     * Set the value of InUse
     *
     * @param v new value
     */
    public void setInUse(Boolean v) 
    {

        if (!ObjectUtils.equals(this.inUse, v))
        {
            this.inUse = v;
            setModified(true);
        }


    }

    /**
     * Get the Locked
     *
     * @return Boolean
     */
    public Boolean getLocked()
    {
        return locked;
    }


    /**
     * Set the value of Locked
     *
     * @param v new value
     */
    public void setLocked(Boolean v) 
    {

        if (!ObjectUtils.equals(this.locked, v))
        {
            this.locked = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private Networks aNetworksRelatedBySource;

    /**
     * Declares an association between this object and a Networks object
     *
     * @param v Networks
     * @throws TorqueException
     */
    public void setNetworksRelatedBySource(Networks v) throws TorqueException
    {
        if (v == null)
        {
            setSource((Long) null);
        }
        else
        {
            setSource(v.getId());
        }
        aNetworksRelatedBySource = v;
    }


    /**
     * Returns the associated Networks object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworksRelatedBySource()
        throws TorqueException
    {
        if (aNetworksRelatedBySource == null && (!ObjectUtils.equals(this.source, null)))
        {
            aNetworksRelatedBySource = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.source));
        }
        return aNetworksRelatedBySource;
    }

    /**
     * Return the associated Networks object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworksRelatedBySource(Connection connection)
        throws TorqueException
    {
        if (aNetworksRelatedBySource == null && (!ObjectUtils.equals(this.source, null)))
        {
            aNetworksRelatedBySource = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.source), connection);
        }
        return aNetworksRelatedBySource;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNetworksRelatedBySourceKey(ObjectKey key) throws TorqueException
    {

        setSource(new Long(((NumberKey) key).longValue()));
    }
   





    /**
     * Collection to store aggregation of collNodess
     */
    protected List collNodess;

    /**
     * Temporary storage of collNodess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNodess()
    {
        if (collNodess == null)
        {
            collNodess = new ArrayList();
        }
    }


    /**
     * Method called to associate a Nodes object to this object
     * through the Nodes foreign key attribute
     *
     * @param l Nodes
     * @throws TorqueException
     */
    public void addNodes(Nodes l) throws TorqueException
    {
        getNodess().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a Nodes object to this object
     * through the Nodes foreign key attribute using connection.
     *
     * @param l Nodes
     * @throws TorqueException
     */
    public void addNodes(Nodes l, Connection con) throws TorqueException
    {
        getNodess(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collNodess
     */
    private Criteria lastNodessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodess(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNodess()
        throws TorqueException
    {
        if (collNodess == null)
        {
            collNodess = getNodess(new Criteria(10));
        }
        return collNodess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related Nodess from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNodess(Criteria criteria) throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                criteria.add(NodesPeer.NETWORK_ID, getId() );
                collNodess = NodesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NodesPeer.NETWORK_ID, getId());
                if (!lastNodessCriteria.equals(criteria))
                {
                    collNodess = NodesPeer.doSelect(criteria);
                }
            }
        }
        lastNodessCriteria = criteria;

        return collNodess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodess(Connection con) throws TorqueException
    {
        if (collNodess == null)
        {
            collNodess = getNodess(new Criteria(10), con);
        }
        return collNodess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related Nodess from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                 criteria.add(NodesPeer.NETWORK_ID, getId());
                 collNodess = NodesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NodesPeer.NETWORK_ID, getId());
                 if (!lastNodessCriteria.equals(criteria))
                 {
                     collNodess = NodesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNodessCriteria = criteria;

         return collNodess;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related Nodess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNodessJoinNodeFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                criteria.add(NodesPeer.NETWORK_ID, getId());
                collNodess = NodesPeer.doSelectJoinNodeFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NodesPeer.NETWORK_ID, getId());
            if (!lastNodessCriteria.equals(criteria))
            {
                collNodess = NodesPeer.doSelectJoinNodeFamilies(criteria);
            }
        }
        lastNodessCriteria = criteria;

        return collNodess;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related Nodess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNodessJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collNodess == null)
        {
            if (isNew())
            {
               collNodess = new ArrayList();
            }
            else
            {
                criteria.add(NodesPeer.NETWORK_ID, getId());
                collNodess = NodesPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NodesPeer.NETWORK_ID, getId());
            if (!lastNodessCriteria.equals(criteria))
            {
                collNodess = NodesPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastNodessCriteria = criteria;

        return collNodess;
    }





    /**
     * Collection to store aggregation of collLinkss
     */
    protected List collLinkss;

    /**
     * Temporary storage of collLinkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkss()
    {
        if (collLinkss == null)
        {
            collLinkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinks(Links l) throws TorqueException
    {
        getLinkss().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a Links object to this object
     * through the Links foreign key attribute using connection.
     *
     * @param l Links
     * @throws TorqueException
     */
    public void addLinks(Links l, Connection con) throws TorqueException
    {
        getLinkss(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collLinkss
     */
    private Criteria lastLinkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkss()
        throws TorqueException
    {
        if (collLinkss == null)
        {
            collLinkss = getLinkss(new Criteria(10));
        }
        return collLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related Linkss from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkss(Criteria criteria) throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.NETWORK_ID, getId() );
                collLinkss = LinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinksPeer.NETWORK_ID, getId());
                if (!lastLinkssCriteria.equals(criteria))
                {
                    collLinkss = LinksPeer.doSelect(criteria);
                }
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkss(Connection con) throws TorqueException
    {
        if (collLinkss == null)
        {
            collLinkss = getLinkss(new Criteria(10), con);
        }
        return collLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related Linkss from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                 criteria.add(LinksPeer.NETWORK_ID, getId());
                 collLinkss = LinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinksPeer.NETWORK_ID, getId());
                 if (!lastLinkssCriteria.equals(criteria))
                 {
                     collLinkss = LinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkssCriteria = criteria;

         return collLinkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.NETWORK_ID, getId());
                collLinkss = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.NETWORK_ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkssJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.NETWORK_ID, getId());
                collLinkss = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.NETWORK_ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkssJoinNodeFamiliesRelatedByBegNodeId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.NETWORK_ID, getId());
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByBegNodeId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.NETWORK_ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByBegNodeId(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related Linkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkssJoinNodeFamiliesRelatedByEndNodeId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkss == null)
        {
            if (isNew())
            {
               collLinkss = new ArrayList();
            }
            else
            {
                criteria.add(LinksPeer.NETWORK_ID, getId());
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByEndNodeId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinksPeer.NETWORK_ID, getId());
            if (!lastLinkssCriteria.equals(criteria))
            {
                collLinkss = LinksPeer.doSelectJoinNodeFamiliesRelatedByEndNodeId(criteria);
            }
        }
        lastLinkssCriteria = criteria;

        return collLinkss;
    }





    /**
     * Collection to store aggregation of collLinkTurnRestrictionssRelatedByFromNetworkId
     */
    protected List collLinkTurnRestrictionssRelatedByFromNetworkId;

    /**
     * Temporary storage of collLinkTurnRestrictionssRelatedByFromNetworkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkTurnRestrictionssRelatedByFromNetworkId()
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            collLinkTurnRestrictionssRelatedByFromNetworkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByFromNetworkId(LinkTurnRestrictions l) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByFromNetworkId().add(l);
        l.setNetworksRelatedByFromNetworkId((Networks) this);
    }

    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute using connection.
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByFromNetworkId(LinkTurnRestrictions l, Connection con) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByFromNetworkId(con).add(l);
        l.setNetworksRelatedByFromNetworkId((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collLinkTurnRestrictionssRelatedByFromNetworkId
     */
    private Criteria lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByFromNetworkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByFromNetworkId()
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            collLinkTurnRestrictionssRelatedByFromNetworkId = getLinkTurnRestrictionssRelatedByFromNetworkId(new Criteria(10));
        }
        return collLinkTurnRestrictionssRelatedByFromNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByFromNetworkId(Criteria criteria) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId() );
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
                if (!lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria.equals(criteria))
                {
                    collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria);
                }
            }
        }
        lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromNetworkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByFromNetworkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByFromNetworkId(Connection con) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            collLinkTurnRestrictionssRelatedByFromNetworkId = getLinkTurnRestrictionssRelatedByFromNetworkId(new Criteria(10), con);
        }
        return collLinkTurnRestrictionssRelatedByFromNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByFromNetworkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
                 collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
                 if (!lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria.equals(criteria))
                 {
                     collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria = criteria;

         return collLinkTurnRestrictionssRelatedByFromNetworkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkTurnRestrictionssRelatedByFromNetworkIdJoinLinkFamiliesRelatedByFromLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromNetworkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkTurnRestrictionssRelatedByFromNetworkIdJoinLinkFamiliesRelatedByToLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkTurnRestrictionssRelatedByFromNetworkIdJoinNetworksRelatedByToNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.FROM_NETWORK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByFromNetworkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByFromNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByFromNetworkId;
    }





    /**
     * Collection to store aggregation of collLinkTurnRestrictionssRelatedByToNetworkId
     */
    protected List collLinkTurnRestrictionssRelatedByToNetworkId;

    /**
     * Temporary storage of collLinkTurnRestrictionssRelatedByToNetworkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkTurnRestrictionssRelatedByToNetworkId()
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            collLinkTurnRestrictionssRelatedByToNetworkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByToNetworkId(LinkTurnRestrictions l) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByToNetworkId().add(l);
        l.setNetworksRelatedByToNetworkId((Networks) this);
    }

    /**
     * Method called to associate a LinkTurnRestrictions object to this object
     * through the LinkTurnRestrictions foreign key attribute using connection.
     *
     * @param l LinkTurnRestrictions
     * @throws TorqueException
     */
    public void addLinkTurnRestrictionsRelatedByToNetworkId(LinkTurnRestrictions l, Connection con) throws TorqueException
    {
        getLinkTurnRestrictionssRelatedByToNetworkId(con).add(l);
        l.setNetworksRelatedByToNetworkId((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collLinkTurnRestrictionssRelatedByToNetworkId
     */
    private Criteria lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByToNetworkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByToNetworkId()
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            collLinkTurnRestrictionssRelatedByToNetworkId = getLinkTurnRestrictionssRelatedByToNetworkId(new Criteria(10));
        }
        return collLinkTurnRestrictionssRelatedByToNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkTurnRestrictionssRelatedByToNetworkId(Criteria criteria) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId() );
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
                if (!lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria.equals(criteria))
                {
                    collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria);
                }
            }
        }
        lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToNetworkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTurnRestrictionssRelatedByToNetworkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByToNetworkId(Connection con) throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            collLinkTurnRestrictionssRelatedByToNetworkId = getLinkTurnRestrictionssRelatedByToNetworkId(new Criteria(10), con);
        }
        return collLinkTurnRestrictionssRelatedByToNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTurnRestrictionssRelatedByToNetworkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                 criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
                 collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
                 if (!lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria.equals(criteria))
                 {
                     collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria = criteria;

         return collLinkTurnRestrictionssRelatedByToNetworkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkTurnRestrictionssRelatedByToNetworkIdJoinLinkFamiliesRelatedByFromLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkTurnRestrictionssRelatedByToNetworkIdJoinNetworksRelatedByFromNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkTurnRestrictionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkTurnRestrictionssRelatedByToNetworkIdJoinLinkFamiliesRelatedByToLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTurnRestrictionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collLinkTurnRestrictionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTurnRestrictionsPeer.TO_NETWORK_ID, getId());
            if (!lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collLinkTurnRestrictionssRelatedByToNetworkId = LinkTurnRestrictionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        lastLinkTurnRestrictionssRelatedByToNetworkIdCriteria = criteria;

        return collLinkTurnRestrictionssRelatedByToNetworkId;
    }













    /**
     * Collection to store aggregation of collNetworkConnectionssRelatedByFromNetworkId
     */
    protected List collNetworkConnectionssRelatedByFromNetworkId;

    /**
     * Temporary storage of collNetworkConnectionssRelatedByFromNetworkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkConnectionssRelatedByFromNetworkId()
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByFromNetworkId(NetworkConnections l) throws TorqueException
    {
        getNetworkConnectionssRelatedByFromNetworkId().add(l);
        l.setNetworksRelatedByFromNetworkId((Networks) this);
    }

    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute using connection.
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByFromNetworkId(NetworkConnections l, Connection con) throws TorqueException
    {
        getNetworkConnectionssRelatedByFromNetworkId(con).add(l);
        l.setNetworksRelatedByFromNetworkId((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkConnectionssRelatedByFromNetworkId
     */
    private Criteria lastNetworkConnectionssRelatedByFromNetworkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByFromNetworkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByFromNetworkId()
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            collNetworkConnectionssRelatedByFromNetworkId = getNetworkConnectionssRelatedByFromNetworkId(new Criteria(10));
        }
        return collNetworkConnectionssRelatedByFromNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByFromNetworkId(Criteria criteria) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId() );
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                if (!lastNetworkConnectionssRelatedByFromNetworkIdCriteria.equals(criteria))
                {
                    collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkConnectionssRelatedByFromNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromNetworkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByFromNetworkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByFromNetworkId(Connection con) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            collNetworkConnectionssRelatedByFromNetworkId = getNetworkConnectionssRelatedByFromNetworkId(new Criteria(10), con);
        }
        return collNetworkConnectionssRelatedByFromNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByFromNetworkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                 collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                 if (!lastNetworkConnectionssRelatedByFromNetworkIdCriteria.equals(criteria))
                 {
                     collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkConnectionssRelatedByFromNetworkIdCriteria = criteria;

         return collNetworkConnectionssRelatedByFromNetworkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByFromNetworkIdJoinNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByFromNetworkIdJoinLinkFamiliesRelatedByFromLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromNetworkId;
    }

















    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByFromNetworkIdJoinLinkFamiliesRelatedByToLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByFromNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByFromNetworkIdJoinNetworksRelatedByToNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByFromNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByFromNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.FROM_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByFromNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByFromNetworkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByToNetworkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByFromNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByFromNetworkId;
    }





    /**
     * Collection to store aggregation of collNetworkConnectionssRelatedByToNetworkId
     */
    protected List collNetworkConnectionssRelatedByToNetworkId;

    /**
     * Temporary storage of collNetworkConnectionssRelatedByToNetworkId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkConnectionssRelatedByToNetworkId()
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByToNetworkId(NetworkConnections l) throws TorqueException
    {
        getNetworkConnectionssRelatedByToNetworkId().add(l);
        l.setNetworksRelatedByToNetworkId((Networks) this);
    }

    /**
     * Method called to associate a NetworkConnections object to this object
     * through the NetworkConnections foreign key attribute using connection.
     *
     * @param l NetworkConnections
     * @throws TorqueException
     */
    public void addNetworkConnectionsRelatedByToNetworkId(NetworkConnections l, Connection con) throws TorqueException
    {
        getNetworkConnectionssRelatedByToNetworkId(con).add(l);
        l.setNetworksRelatedByToNetworkId((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkConnectionssRelatedByToNetworkId
     */
    private Criteria lastNetworkConnectionssRelatedByToNetworkIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByToNetworkId(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByToNetworkId()
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            collNetworkConnectionssRelatedByToNetworkId = getNetworkConnectionssRelatedByToNetworkId(new Criteria(10));
        }
        return collNetworkConnectionssRelatedByToNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkConnectionssRelatedByToNetworkId(Criteria criteria) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId() );
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                if (!lastNetworkConnectionssRelatedByToNetworkIdCriteria.equals(criteria))
                {
                    collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkConnectionssRelatedByToNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToNetworkId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionssRelatedByToNetworkId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByToNetworkId(Connection con) throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            collNetworkConnectionssRelatedByToNetworkId = getNetworkConnectionssRelatedByToNetworkId(new Criteria(10), con);
        }
        return collNetworkConnectionssRelatedByToNetworkId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToNetworkId from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionssRelatedByToNetworkId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                 collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                 if (!lastNetworkConnectionssRelatedByToNetworkIdCriteria.equals(criteria))
                 {
                     collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkConnectionssRelatedByToNetworkIdCriteria = criteria;

         return collNetworkConnectionssRelatedByToNetworkId;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByToNetworkIdJoinNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByToNetworkIdJoinLinkFamiliesRelatedByFromLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByFromLinkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByToNetworkIdJoinNetworksRelatedByFromNetworkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinNetworksRelatedByFromNetworkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToNetworkId;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkConnectionssRelatedByToNetworkId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkConnectionssRelatedByToNetworkIdJoinLinkFamiliesRelatedByToLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionssRelatedByToNetworkId == null)
        {
            if (isNew())
            {
               collNetworkConnectionssRelatedByToNetworkId = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionsPeer.TO_NETWORK_ID, getId());
            if (!lastNetworkConnectionssRelatedByToNetworkIdCriteria.equals(criteria))
            {
                collNetworkConnectionssRelatedByToNetworkId = NetworkConnectionsPeer.doSelectJoinLinkFamiliesRelatedByToLinkId(criteria);
            }
        }
        lastNetworkConnectionssRelatedByToNetworkIdCriteria = criteria;

        return collNetworkConnectionssRelatedByToNetworkId;
    }













    /**
     * Collection to store aggregation of collNetworkSetss
     */
    protected List collNetworkSetss;

    /**
     * Temporary storage of collNetworkSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkSetss()
    {
        if (collNetworkSetss == null)
        {
            collNetworkSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkSets object to this object
     * through the NetworkSets foreign key attribute
     *
     * @param l NetworkSets
     * @throws TorqueException
     */
    public void addNetworkSets(NetworkSets l) throws TorqueException
    {
        getNetworkSetss().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a NetworkSets object to this object
     * through the NetworkSets foreign key attribute using connection.
     *
     * @param l NetworkSets
     * @throws TorqueException
     */
    public void addNetworkSets(NetworkSets l, Connection con) throws TorqueException
    {
        getNetworkSetss(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkSetss
     */
    private Criteria lastNetworkSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkSetss()
        throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            collNetworkSetss = getNetworkSetss(new Criteria(10));
        }
        return collNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkSetss(Criteria criteria) throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkSetsPeer.NETWORK_ID, getId() );
                collNetworkSetss = NetworkSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
                if (!lastNetworkSetssCriteria.equals(criteria))
                {
                    collNetworkSetss = NetworkSetsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkSetssCriteria = criteria;

        return collNetworkSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkSetss(Connection con) throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            collNetworkSetss = getNetworkSetss(new Criteria(10), con);
        }
        return collNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
                 collNetworkSetss = NetworkSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
                 if (!lastNetworkSetssCriteria.equals(criteria))
                 {
                     collNetworkSetss = NetworkSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkSetssCriteria = criteria;

         return collNetworkSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkSetssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
                collNetworkSetss = NetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
            if (!lastNetworkSetssCriteria.equals(criteria))
            {
                collNetworkSetss = NetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastNetworkSetssCriteria = criteria;

        return collNetworkSetss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getNetworkSetssJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
                collNetworkSetss = NetworkSetsPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkSetsPeer.NETWORK_ID, getId());
            if (!lastNetworkSetssCriteria.equals(criteria))
            {
                collNetworkSetss = NetworkSetsPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastNetworkSetssCriteria = criteria;

        return collNetworkSetss;
    }





    /**
     * Collection to store aggregation of collLinkDataDetaileds
     */
    protected List collLinkDataDetaileds;

    /**
     * Temporary storage of collLinkDataDetaileds to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataDetaileds()
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailed(LinkDataDetailed l) throws TorqueException
    {
        getLinkDataDetaileds().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute using connection.
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailed(LinkDataDetailed l, Connection con) throws TorqueException
    {
        getLinkDataDetaileds(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataDetaileds
     */
    private Criteria lastLinkDataDetailedsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetaileds(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataDetaileds()
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = getLinkDataDetaileds(new Criteria(10));
        }
        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataDetaileds(Criteria criteria) throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId() );
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                if (!lastLinkDataDetailedsCriteria.equals(criteria))
                {
                    collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetaileds(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetaileds(Connection con) throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = getLinkDataDetaileds(new Criteria(10), con);
        }
        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetaileds(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                 collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                 if (!lastLinkDataDetailedsCriteria.equals(criteria))
                 {
                     collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataDetailedsCriteria = criteria;

         return collLinkDataDetaileds;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkDataDetailedsJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkDataDetailedsJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkDataDetailedsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkDataDetailedsJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkDataDetailedsJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }





    /**
     * Collection to store aggregation of collLinkPerformanceDetaileds
     */
    protected List collLinkPerformanceDetaileds;

    /**
     * Temporary storage of collLinkPerformanceDetaileds to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkPerformanceDetaileds()
    {
        if (collLinkPerformanceDetaileds == null)
        {
            collLinkPerformanceDetaileds = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailed(LinkPerformanceDetailed l) throws TorqueException
    {
        getLinkPerformanceDetaileds().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a LinkPerformanceDetailed object to this object
     * through the LinkPerformanceDetailed foreign key attribute using connection.
     *
     * @param l LinkPerformanceDetailed
     * @throws TorqueException
     */
    public void addLinkPerformanceDetailed(LinkPerformanceDetailed l, Connection con) throws TorqueException
    {
        getLinkPerformanceDetaileds(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collLinkPerformanceDetaileds
     */
    private Criteria lastLinkPerformanceDetailedsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetaileds(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkPerformanceDetaileds()
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            collLinkPerformanceDetaileds = getLinkPerformanceDetaileds(new Criteria(10));
        }
        return collLinkPerformanceDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkPerformanceDetaileds(Criteria criteria) throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId() );
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
                {
                    collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceDetaileds(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetaileds(Connection con) throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            collLinkPerformanceDetaileds = getLinkPerformanceDetaileds(new Criteria(10), con);
        }
        return collLinkPerformanceDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceDetaileds(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                 criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                 collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                 if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
                 {
                     collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkPerformanceDetailedsCriteria = criteria;

         return collLinkPerformanceDetaileds;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkPerformanceDetailedsJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkPerformanceDetailedsJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkPerformanceDetailedsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related LinkPerformanceDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getLinkPerformanceDetailedsJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceDetaileds == null)
        {
            if (isNew())
            {
               collLinkPerformanceDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceDetailedPeer.NETWORK_ID, getId());
            if (!lastLinkPerformanceDetailedsCriteria.equals(criteria))
            {
                collLinkPerformanceDetaileds = LinkPerformanceDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkPerformanceDetailedsCriteria = criteria;

        return collLinkPerformanceDetaileds;
    }





    /**
     * Collection to store aggregation of collSignalDatas
     */
    protected List collSignalDatas;

    /**
     * Temporary storage of collSignalDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalDatas()
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalData object to this object
     * through the SignalData foreign key attribute
     *
     * @param l SignalData
     * @throws TorqueException
     */
    public void addSignalData(SignalData l) throws TorqueException
    {
        getSignalDatas().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a SignalData object to this object
     * through the SignalData foreign key attribute using connection.
     *
     * @param l SignalData
     * @throws TorqueException
     */
    public void addSignalData(SignalData l, Connection con) throws TorqueException
    {
        getSignalDatas(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collSignalDatas
     */
    private Criteria lastSignalDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalDatas()
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = getSignalDatas(new Criteria(10));
        }
        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related SignalDatas from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalDatas(Criteria criteria) throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.NETWORK_ID, getId() );
                collSignalDatas = SignalDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalDataPeer.NETWORK_ID, getId());
                if (!lastSignalDatasCriteria.equals(criteria))
                {
                    collSignalDatas = SignalDataPeer.doSelect(criteria);
                }
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalDatas(Connection con) throws TorqueException
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = getSignalDatas(new Criteria(10), con);
        }
        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related SignalDatas from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                 criteria.add(SignalDataPeer.NETWORK_ID, getId());
                 collSignalDatas = SignalDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalDataPeer.NETWORK_ID, getId());
                 if (!lastSignalDatasCriteria.equals(criteria))
                 {
                     collSignalDatas = SignalDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalDatasCriteria = criteria;

         return collSignalDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getSignalDatasJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.NETWORK_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.NETWORK_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinSignals(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getSignalDatasJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.NETWORK_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.NETWORK_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getSignalDatasJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.NETWORK_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.NETWORK_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }





    /**
     * Collection to store aggregation of collSignalPhasePerformances
     */
    protected List collSignalPhasePerformances;

    /**
     * Temporary storage of collSignalPhasePerformances to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalPhasePerformances()
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalPhasePerformance object to this object
     * through the SignalPhasePerformance foreign key attribute
     *
     * @param l SignalPhasePerformance
     * @throws TorqueException
     */
    public void addSignalPhasePerformance(SignalPhasePerformance l) throws TorqueException
    {
        getSignalPhasePerformances().add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * Method called to associate a SignalPhasePerformance object to this object
     * through the SignalPhasePerformance foreign key attribute using connection.
     *
     * @param l SignalPhasePerformance
     * @throws TorqueException
     */
    public void addSignalPhasePerformance(SignalPhasePerformance l, Connection con) throws TorqueException
    {
        getSignalPhasePerformances(con).add(l);
        l.setNetworks((Networks) this);
    }

    /**
     * The criteria used to select the current contents of collSignalPhasePerformances
     */
    private Criteria lastSignalPhasePerformancesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalPhasePerformances(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalPhasePerformances()
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = getSignalPhasePerformances(new Criteria(10));
        }
        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalPhasePerformances(Criteria criteria) throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId() );
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
                if (!lastSignalPhasePerformancesCriteria.equals(criteria))
                {
                    collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria);
                }
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalPhasePerformances(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalPhasePerformances(Connection con) throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = getSignalPhasePerformances(new Criteria(10), con);
        }
        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     * If this Networks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalPhasePerformances(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                 criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
                 collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
                 if (!lastSignalPhasePerformancesCriteria.equals(criteria))
                 {
                     collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalPhasePerformancesCriteria = criteria;

         return collSignalPhasePerformances;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getSignalPhasePerformancesJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinSignals(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getSignalPhasePerformancesJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinNetworks(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Networks is new, it will return
     * an empty collection; or if this Networks has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Networks.
     */
    protected List getSignalPhasePerformancesJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.NETWORK_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("IsMaster");
            fieldNames.add("Name");
            fieldNames.add("Source");
            fieldNames.add("Description");
            fieldNames.add("InUse");
            fieldNames.add("Locked");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("IsMaster"))
        {
            return getIsMaster();
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Source"))
        {
            return getSource();
        }
        if (name.equals("Description"))
        {
            return getDescription();
        }
        if (name.equals("InUse"))
        {
            return getInUse();
        }
        if (name.equals("Locked"))
        {
            return getLocked();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("IsMaster"))
        {
            // Object fields can be null
            if (value != null && ! Boolean.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setIsMaster((Boolean) value);
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Source"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSource((Long) value);
            return true;
        }
        if (name.equals("Description"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDescription((String) value);
            return true;
        }
        if (name.equals("InUse"))
        {
            // Object fields can be null
            if (value != null && ! Boolean.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setInUse((Boolean) value);
            return true;
        }
        if (name.equals("Locked"))
        {
            // Object fields can be null
            if (value != null && ! Boolean.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLocked((Boolean) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(NetworksPeer.ID))
        {
            return getId();
        }
        if (name.equals(NetworksPeer.IS_MASTER))
        {
            return getIsMaster();
        }
        if (name.equals(NetworksPeer.NAME))
        {
            return getName();
        }
        if (name.equals(NetworksPeer.SOURCE))
        {
            return getSource();
        }
        if (name.equals(NetworksPeer.DESCRIPTION))
        {
            return getDescription();
        }
        if (name.equals(NetworksPeer.IN_USE))
        {
            return getInUse();
        }
        if (name.equals(NetworksPeer.LOCKED))
        {
            return getLocked();
        }
        if (name.equals(NetworksPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(NetworksPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(NetworksPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(NetworksPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(NetworksPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (NetworksPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (NetworksPeer.IS_MASTER.equals(name))
        {
            return setByName("IsMaster", value);
        }
      if (NetworksPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (NetworksPeer.SOURCE.equals(name))
        {
            return setByName("Source", value);
        }
      if (NetworksPeer.DESCRIPTION.equals(name))
        {
            return setByName("Description", value);
        }
      if (NetworksPeer.IN_USE.equals(name))
        {
            return setByName("InUse", value);
        }
      if (NetworksPeer.LOCKED.equals(name))
        {
            return setByName("Locked", value);
        }
      if (NetworksPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (NetworksPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (NetworksPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (NetworksPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (NetworksPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getIsMaster();
        }
        if (pos == 2)
        {
            return getName();
        }
        if (pos == 3)
        {
            return getSource();
        }
        if (pos == 4)
        {
            return getDescription();
        }
        if (pos == 5)
        {
            return getInUse();
        }
        if (pos == 6)
        {
            return getLocked();
        }
        if (pos == 7)
        {
            return getCreated();
        }
        if (pos == 8)
        {
            return getModified();
        }
        if (pos == 9)
        {
            return getCreatedBy();
        }
        if (pos == 10)
        {
            return getModifiedBy();
        }
        if (pos == 11)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("IsMaster", value);
        }
    if (position == 2)
        {
            return setByName("Name", value);
        }
    if (position == 3)
        {
            return setByName("Source", value);
        }
    if (position == 4)
        {
            return setByName("Description", value);
        }
    if (position == 5)
        {
            return setByName("InUse", value);
        }
    if (position == 6)
        {
            return setByName("Locked", value);
        }
    if (position == 7)
        {
            return setByName("Created", value);
        }
    if (position == 8)
        {
            return setByName("Modified", value);
        }
    if (position == 9)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 10)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 11)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(NetworksPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    NetworksPeer.doInsert((Networks) this, con);
                    setNew(false);
                }
                else
                {
                    NetworksPeer.doUpdate((Networks) this, con);
                }
            }


            if (collNodess != null)
            {
                for (int i = 0; i < collNodess.size(); i++)
                {
                    ((Nodes) collNodess.get(i)).save(con);
                }
            }

            if (collLinkss != null)
            {
                for (int i = 0; i < collLinkss.size(); i++)
                {
                    ((Links) collLinkss.get(i)).save(con);
                }
            }

            if (collLinkTurnRestrictionssRelatedByFromNetworkId != null)
            {
                for (int i = 0; i < collLinkTurnRestrictionssRelatedByFromNetworkId.size(); i++)
                {
                    ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByFromNetworkId.get(i)).save(con);
                }
            }

            if (collLinkTurnRestrictionssRelatedByToNetworkId != null)
            {
                for (int i = 0; i < collLinkTurnRestrictionssRelatedByToNetworkId.size(); i++)
                {
                    ((LinkTurnRestrictions) collLinkTurnRestrictionssRelatedByToNetworkId.get(i)).save(con);
                }
            }

            if (collNetworkConnectionssRelatedByFromNetworkId != null)
            {
                for (int i = 0; i < collNetworkConnectionssRelatedByFromNetworkId.size(); i++)
                {
                    ((NetworkConnections) collNetworkConnectionssRelatedByFromNetworkId.get(i)).save(con);
                }
            }

            if (collNetworkConnectionssRelatedByToNetworkId != null)
            {
                for (int i = 0; i < collNetworkConnectionssRelatedByToNetworkId.size(); i++)
                {
                    ((NetworkConnections) collNetworkConnectionssRelatedByToNetworkId.get(i)).save(con);
                }
            }

            if (collNetworkSetss != null)
            {
                for (int i = 0; i < collNetworkSetss.size(); i++)
                {
                    ((NetworkSets) collNetworkSetss.get(i)).save(con);
                }
            }

            if (collLinkDataDetaileds != null)
            {
                for (int i = 0; i < collLinkDataDetaileds.size(); i++)
                {
                    ((LinkDataDetailed) collLinkDataDetaileds.get(i)).save(con);
                }
            }

            if (collLinkPerformanceDetaileds != null)
            {
                for (int i = 0; i < collLinkPerformanceDetaileds.size(); i++)
                {
                    ((LinkPerformanceDetailed) collLinkPerformanceDetaileds.get(i)).save(con);
                }
            }

            if (collSignalDatas != null)
            {
                for (int i = 0; i < collSignalDatas.size(); i++)
                {
                    ((SignalData) collSignalDatas.get(i)).save(con);
                }
            }

            if (collSignalPhasePerformances != null)
            {
                for (int i = 0; i < collSignalPhasePerformances.size(); i++)
                {
                    ((SignalPhasePerformance) collSignalPhasePerformances.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Networks copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Networks copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Networks copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Networks(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Networks copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Networks(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Networks copyInto(Networks copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Networks copyInto(Networks copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Networks copyInto(Networks copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setIsMaster(isMaster);
        copyObj.setName(name);
        copyObj.setSource(source);
        copyObj.setDescription(description);
        copyObj.setInUse(inUse);
        copyObj.setLocked(locked);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNodess = getNodess();
        if (vNodess != null)
        {
            for (int i = 0; i < vNodess.size(); i++)
            {
                Nodes obj = (Nodes) vNodess.get(i);
                copyObj.addNodes(obj.copy());
            }
        }
        else
        {
            copyObj.collNodess = null;
        }


        List vLinkss = getLinkss();
        if (vLinkss != null)
        {
            for (int i = 0; i < vLinkss.size(); i++)
            {
                Links obj = (Links) vLinkss.get(i);
                copyObj.addLinks(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkss = null;
        }


        List vLinkTurnRestrictionssRelatedByFromNetworkId = getLinkTurnRestrictionssRelatedByFromNetworkId();
        if (vLinkTurnRestrictionssRelatedByFromNetworkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByFromNetworkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByFromNetworkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByFromNetworkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByFromNetworkId = null;
        }


        List vLinkTurnRestrictionssRelatedByToNetworkId = getLinkTurnRestrictionssRelatedByToNetworkId();
        if (vLinkTurnRestrictionssRelatedByToNetworkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByToNetworkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByToNetworkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByToNetworkId(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByToNetworkId = null;
        }


        List vNetworkConnectionssRelatedByFromNetworkId = getNetworkConnectionssRelatedByFromNetworkId();
        if (vNetworkConnectionssRelatedByFromNetworkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByFromNetworkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByFromNetworkId.get(i);
                copyObj.addNetworkConnectionsRelatedByFromNetworkId(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByFromNetworkId = null;
        }


        List vNetworkConnectionssRelatedByToNetworkId = getNetworkConnectionssRelatedByToNetworkId();
        if (vNetworkConnectionssRelatedByToNetworkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByToNetworkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByToNetworkId.get(i);
                copyObj.addNetworkConnectionsRelatedByToNetworkId(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByToNetworkId = null;
        }


        List vNetworkSetss = getNetworkSetss();
        if (vNetworkSetss != null)
        {
            for (int i = 0; i < vNetworkSetss.size(); i++)
            {
                NetworkSets obj = (NetworkSets) vNetworkSetss.get(i);
                copyObj.addNetworkSets(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkSetss = null;
        }


        List vLinkDataDetaileds = getLinkDataDetaileds();
        if (vLinkDataDetaileds != null)
        {
            for (int i = 0; i < vLinkDataDetaileds.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetaileds.get(i);
                copyObj.addLinkDataDetailed(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataDetaileds = null;
        }


        List vLinkPerformanceDetaileds = getLinkPerformanceDetaileds();
        if (vLinkPerformanceDetaileds != null)
        {
            for (int i = 0; i < vLinkPerformanceDetaileds.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetaileds.get(i);
                copyObj.addLinkPerformanceDetailed(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetaileds = null;
        }


        List vSignalDatas = getSignalDatas();
        if (vSignalDatas != null)
        {
            for (int i = 0; i < vSignalDatas.size(); i++)
            {
                SignalData obj = (SignalData) vSignalDatas.get(i);
                copyObj.addSignalData(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalDatas = null;
        }


        List vSignalPhasePerformances = getSignalPhasePerformances();
        if (vSignalPhasePerformances != null)
        {
            for (int i = 0; i < vSignalPhasePerformances.size(); i++)
            {
                SignalPhasePerformance obj = (SignalPhasePerformance) vSignalPhasePerformances.get(i);
                copyObj.addSignalPhasePerformance(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalPhasePerformances = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Networks copyInto(Networks copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setIsMaster(isMaster);
        copyObj.setName(name);
        copyObj.setSource(source);
        copyObj.setDescription(description);
        copyObj.setInUse(inUse);
        copyObj.setLocked(locked);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNodess = getNodess(con);
        if (vNodess != null)
        {
            for (int i = 0; i < vNodess.size(); i++)
            {
                Nodes obj = (Nodes) vNodess.get(i);
                copyObj.addNodes(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNodess = null;
        }


        List vLinkss = getLinkss(con);
        if (vLinkss != null)
        {
            for (int i = 0; i < vLinkss.size(); i++)
            {
                Links obj = (Links) vLinkss.get(i);
                copyObj.addLinks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkss = null;
        }


        List vLinkTurnRestrictionssRelatedByFromNetworkId = getLinkTurnRestrictionssRelatedByFromNetworkId(con);
        if (vLinkTurnRestrictionssRelatedByFromNetworkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByFromNetworkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByFromNetworkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByFromNetworkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByFromNetworkId = null;
        }


        List vLinkTurnRestrictionssRelatedByToNetworkId = getLinkTurnRestrictionssRelatedByToNetworkId(con);
        if (vLinkTurnRestrictionssRelatedByToNetworkId != null)
        {
            for (int i = 0; i < vLinkTurnRestrictionssRelatedByToNetworkId.size(); i++)
            {
                LinkTurnRestrictions obj = (LinkTurnRestrictions) vLinkTurnRestrictionssRelatedByToNetworkId.get(i);
                copyObj.addLinkTurnRestrictionsRelatedByToNetworkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkTurnRestrictionssRelatedByToNetworkId = null;
        }


        List vNetworkConnectionssRelatedByFromNetworkId = getNetworkConnectionssRelatedByFromNetworkId(con);
        if (vNetworkConnectionssRelatedByFromNetworkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByFromNetworkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByFromNetworkId.get(i);
                copyObj.addNetworkConnectionsRelatedByFromNetworkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByFromNetworkId = null;
        }


        List vNetworkConnectionssRelatedByToNetworkId = getNetworkConnectionssRelatedByToNetworkId(con);
        if (vNetworkConnectionssRelatedByToNetworkId != null)
        {
            for (int i = 0; i < vNetworkConnectionssRelatedByToNetworkId.size(); i++)
            {
                NetworkConnections obj = (NetworkConnections) vNetworkConnectionssRelatedByToNetworkId.get(i);
                copyObj.addNetworkConnectionsRelatedByToNetworkId(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkConnectionssRelatedByToNetworkId = null;
        }


        List vNetworkSetss = getNetworkSetss(con);
        if (vNetworkSetss != null)
        {
            for (int i = 0; i < vNetworkSetss.size(); i++)
            {
                NetworkSets obj = (NetworkSets) vNetworkSetss.get(i);
                copyObj.addNetworkSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkSetss = null;
        }


        List vLinkDataDetaileds = getLinkDataDetaileds(con);
        if (vLinkDataDetaileds != null)
        {
            for (int i = 0; i < vLinkDataDetaileds.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetaileds.get(i);
                copyObj.addLinkDataDetailed(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataDetaileds = null;
        }


        List vLinkPerformanceDetaileds = getLinkPerformanceDetaileds(con);
        if (vLinkPerformanceDetaileds != null)
        {
            for (int i = 0; i < vLinkPerformanceDetaileds.size(); i++)
            {
                LinkPerformanceDetailed obj = (LinkPerformanceDetailed) vLinkPerformanceDetaileds.get(i);
                copyObj.addLinkPerformanceDetailed(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkPerformanceDetaileds = null;
        }


        List vSignalDatas = getSignalDatas(con);
        if (vSignalDatas != null)
        {
            for (int i = 0; i < vSignalDatas.size(); i++)
            {
                SignalData obj = (SignalData) vSignalDatas.get(i);
                copyObj.addSignalData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalDatas = null;
        }


        List vSignalPhasePerformances = getSignalPhasePerformances(con);
        if (vSignalPhasePerformances != null)
        {
            for (int i = 0; i < vSignalPhasePerformances.size(); i++)
            {
                SignalPhasePerformance obj = (SignalPhasePerformance) vSignalPhasePerformances.get(i);
                copyObj.addSignalPhasePerformance(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalPhasePerformances = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public NetworksPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return NetworksPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Networks:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("IsMaster = ")
           .append(getIsMaster())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Source = ")
           .append(getSource())
           .append("\n");
        str.append("Description = ")
           .append(getDescription())
           .append("\n");
        str.append("InUse = ")
           .append(getInUse())
           .append("\n");
        str.append("Locked = ")
           .append(getLocked())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
