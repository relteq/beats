package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to SignalPhasePerformance
 */
public abstract class BaseSignalPhasePerformance extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final SignalPhasePerformancePeer peer =
        new SignalPhasePerformancePeer();


    /** The value for the networkId field */
    private Long networkId;

    /** The value for the signalId field */
    private Long signalId;

    /** The value for the dataSourceId field */
    private Long dataSourceId;

    /** The value for the phase field */
    private Integer phase;

    /** The value for the ts field */
    private Date ts;

    /** The value for the aggregation field */
    private String aggregation;

    /** The value for the type field */
    private String type;

    /** The value for the phaseUtilization field */
    private BigDecimal phaseUtilization;

    /** The value for the progressionQuality field */
    private BigDecimal progressionQuality;

    /** The value for the delayPerCycle field */
    private BigDecimal delayPerCycle;

    /** The value for the queueSize field */
    private BigDecimal queueSize;

    /** The value for the numberOfStops field */
    private Integer numberOfStops;


    /**
     * Get the NetworkId
     *
     * @return Long
     */
    public Long getNetworkId()
    {
        return networkId;
    }


    /**
     * Set the value of NetworkId
     *
     * @param v new value
     */
    public void setNetworkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.networkId, v))
        {
            this.networkId = v;
            setModified(true);
        }


        if (aNetworks != null && !ObjectUtils.equals(aNetworks.getId(), v))
        {
            aNetworks = null;
        }

    }

    /**
     * Get the SignalId
     *
     * @return Long
     */
    public Long getSignalId()
    {
        return signalId;
    }


    /**
     * Set the value of SignalId
     *
     * @param v new value
     */
    public void setSignalId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.signalId, v))
        {
            this.signalId = v;
            setModified(true);
        }


        if (aSignals != null && !ObjectUtils.equals(aSignals.getId(), v))
        {
            aSignals = null;
        }

    }

    /**
     * Get the DataSourceId
     *
     * @return Long
     */
    public Long getDataSourceId()
    {
        return dataSourceId;
    }


    /**
     * Set the value of DataSourceId
     *
     * @param v new value
     */
    public void setDataSourceId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.dataSourceId, v))
        {
            this.dataSourceId = v;
            setModified(true);
        }


        if (aDataSources != null && !ObjectUtils.equals(aDataSources.getId(), v))
        {
            aDataSources = null;
        }

    }

    /**
     * Get the Phase
     *
     * @return Integer
     */
    public Integer getPhase()
    {
        return phase;
    }


    /**
     * Set the value of Phase
     *
     * @param v new value
     */
    public void setPhase(Integer v) 
    {

        if (!ObjectUtils.equals(this.phase, v))
        {
            this.phase = v;
            setModified(true);
        }


    }

    /**
     * Get the Ts
     *
     * @return Date
     */
    public Date getTs()
    {
        return ts;
    }


    /**
     * Set the value of Ts
     *
     * @param v new value
     */
    public void setTs(Date v) 
    {

        if (!ObjectUtils.equals(this.ts, v))
        {
            this.ts = v;
            setModified(true);
        }


    }

    /**
     * Get the Aggregation
     *
     * @return String
     */
    public String getAggregation()
    {
        return aggregation;
    }


    /**
     * Set the value of Aggregation
     *
     * @param v new value
     */
    public void setAggregation(String v) 
    {

        if (!ObjectUtils.equals(this.aggregation, v))
        {
            this.aggregation = v;
            setModified(true);
        }


    }

    /**
     * Get the Type
     *
     * @return String
     */
    public String getType()
    {
        return type;
    }


    /**
     * Set the value of Type
     *
     * @param v new value
     */
    public void setType(String v) 
    {

        if (!ObjectUtils.equals(this.type, v))
        {
            this.type = v;
            setModified(true);
        }


    }

    /**
     * Get the PhaseUtilization
     *
     * @return BigDecimal
     */
    public BigDecimal getPhaseUtilization()
    {
        return phaseUtilization;
    }


    /**
     * Set the value of PhaseUtilization
     *
     * @param v new value
     */
    public void setPhaseUtilization(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.phaseUtilization, v))
        {
            this.phaseUtilization = v;
            setModified(true);
        }


    }

    /**
     * Get the ProgressionQuality
     *
     * @return BigDecimal
     */
    public BigDecimal getProgressionQuality()
    {
        return progressionQuality;
    }


    /**
     * Set the value of ProgressionQuality
     *
     * @param v new value
     */
    public void setProgressionQuality(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.progressionQuality, v))
        {
            this.progressionQuality = v;
            setModified(true);
        }


    }

    /**
     * Get the DelayPerCycle
     *
     * @return BigDecimal
     */
    public BigDecimal getDelayPerCycle()
    {
        return delayPerCycle;
    }


    /**
     * Set the value of DelayPerCycle
     *
     * @param v new value
     */
    public void setDelayPerCycle(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.delayPerCycle, v))
        {
            this.delayPerCycle = v;
            setModified(true);
        }


    }

    /**
     * Get the QueueSize
     *
     * @return BigDecimal
     */
    public BigDecimal getQueueSize()
    {
        return queueSize;
    }


    /**
     * Set the value of QueueSize
     *
     * @param v new value
     */
    public void setQueueSize(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.queueSize, v))
        {
            this.queueSize = v;
            setModified(true);
        }


    }

    /**
     * Get the NumberOfStops
     *
     * @return Integer
     */
    public Integer getNumberOfStops()
    {
        return numberOfStops;
    }


    /**
     * Set the value of NumberOfStops
     *
     * @param v new value
     */
    public void setNumberOfStops(Integer v) 
    {

        if (!ObjectUtils.equals(this.numberOfStops, v))
        {
            this.numberOfStops = v;
            setModified(true);
        }


    }

    



    private Signals aSignals;

    /**
     * Declares an association between this object and a Signals object
     *
     * @param v Signals
     * @throws TorqueException
     */
    public void setSignals(Signals v) throws TorqueException
    {
        if (v == null)
        {
            setSignalId((Long) null);
        }
        else
        {
            setSignalId(v.getId());
        }
        aSignals = v;
    }


    /**
     * Returns the associated Signals object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Signals object
     * @throws TorqueException
     */
    public Signals getSignals()
        throws TorqueException
    {
        if (aSignals == null && (!ObjectUtils.equals(this.signalId, null)))
        {
            aSignals = SignalsPeer.retrieveByPK(SimpleKey.keyFor(this.signalId));
        }
        return aSignals;
    }

    /**
     * Return the associated Signals object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Signals object
     * @throws TorqueException
     */
    public Signals getSignals(Connection connection)
        throws TorqueException
    {
        if (aSignals == null && (!ObjectUtils.equals(this.signalId, null)))
        {
            aSignals = SignalsPeer.retrieveByPK(SimpleKey.keyFor(this.signalId), connection);
        }
        return aSignals;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSignalsKey(ObjectKey key) throws TorqueException
    {

        setSignalId(new Long(((NumberKey) key).longValue()));
    }




    private Networks aNetworks;

    /**
     * Declares an association between this object and a Networks object
     *
     * @param v Networks
     * @throws TorqueException
     */
    public void setNetworks(Networks v) throws TorqueException
    {
        if (v == null)
        {
            setNetworkId((Long) null);
        }
        else
        {
            setNetworkId(v.getId());
        }
        aNetworks = v;
    }


    /**
     * Returns the associated Networks object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks()
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId));
        }
        return aNetworks;
    }

    /**
     * Return the associated Networks object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks(Connection connection)
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId), connection);
        }
        return aNetworks;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNetworksKey(ObjectKey key) throws TorqueException
    {

        setNetworkId(new Long(((NumberKey) key).longValue()));
    }




    private DataSources aDataSources;

    /**
     * Declares an association between this object and a DataSources object
     *
     * @param v DataSources
     * @throws TorqueException
     */
    public void setDataSources(DataSources v) throws TorqueException
    {
        if (v == null)
        {
            setDataSourceId((Long) null);
        }
        else
        {
            setDataSourceId(v.getId());
        }
        aDataSources = v;
    }


    /**
     * Returns the associated DataSources object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources()
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId));
        }
        return aDataSources;
    }

    /**
     * Return the associated DataSources object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources(Connection connection)
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId), connection);
        }
        return aDataSources;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDataSourcesKey(ObjectKey key) throws TorqueException
    {

        setDataSourceId(new Long(((NumberKey) key).longValue()));
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("NetworkId");
            fieldNames.add("SignalId");
            fieldNames.add("DataSourceId");
            fieldNames.add("Phase");
            fieldNames.add("Ts");
            fieldNames.add("Aggregation");
            fieldNames.add("Type");
            fieldNames.add("PhaseUtilization");
            fieldNames.add("ProgressionQuality");
            fieldNames.add("DelayPerCycle");
            fieldNames.add("QueueSize");
            fieldNames.add("NumberOfStops");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("NetworkId"))
        {
            return getNetworkId();
        }
        if (name.equals("SignalId"))
        {
            return getSignalId();
        }
        if (name.equals("DataSourceId"))
        {
            return getDataSourceId();
        }
        if (name.equals("Phase"))
        {
            return getPhase();
        }
        if (name.equals("Ts"))
        {
            return getTs();
        }
        if (name.equals("Aggregation"))
        {
            return getAggregation();
        }
        if (name.equals("Type"))
        {
            return getType();
        }
        if (name.equals("PhaseUtilization"))
        {
            return getPhaseUtilization();
        }
        if (name.equals("ProgressionQuality"))
        {
            return getProgressionQuality();
        }
        if (name.equals("DelayPerCycle"))
        {
            return getDelayPerCycle();
        }
        if (name.equals("QueueSize"))
        {
            return getQueueSize();
        }
        if (name.equals("NumberOfStops"))
        {
            return getNumberOfStops();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("NetworkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNetworkId((Long) value);
            return true;
        }
        if (name.equals("SignalId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSignalId((Long) value);
            return true;
        }
        if (name.equals("DataSourceId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDataSourceId((Long) value);
            return true;
        }
        if (name.equals("Phase"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setPhase((Integer) value);
            return true;
        }
        if (name.equals("Ts"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setTs((Date) value);
            return true;
        }
        if (name.equals("Aggregation"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setAggregation((String) value);
            return true;
        }
        if (name.equals("Type"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setType((String) value);
            return true;
        }
        if (name.equals("PhaseUtilization"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setPhaseUtilization((BigDecimal) value);
            return true;
        }
        if (name.equals("ProgressionQuality"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setProgressionQuality((BigDecimal) value);
            return true;
        }
        if (name.equals("DelayPerCycle"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDelayPerCycle((BigDecimal) value);
            return true;
        }
        if (name.equals("QueueSize"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setQueueSize((BigDecimal) value);
            return true;
        }
        if (name.equals("NumberOfStops"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNumberOfStops((Integer) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(SignalPhasePerformancePeer.NETWORK_ID))
        {
            return getNetworkId();
        }
        if (name.equals(SignalPhasePerformancePeer.SIGNAL_ID))
        {
            return getSignalId();
        }
        if (name.equals(SignalPhasePerformancePeer.DATA_SOURCE_ID))
        {
            return getDataSourceId();
        }
        if (name.equals(SignalPhasePerformancePeer.PHASE))
        {
            return getPhase();
        }
        if (name.equals(SignalPhasePerformancePeer.TS))
        {
            return getTs();
        }
        if (name.equals(SignalPhasePerformancePeer.AGGREGATION))
        {
            return getAggregation();
        }
        if (name.equals(SignalPhasePerformancePeer.TYPE))
        {
            return getType();
        }
        if (name.equals(SignalPhasePerformancePeer.PHASE_UTILIZATION))
        {
            return getPhaseUtilization();
        }
        if (name.equals(SignalPhasePerformancePeer.PROGRESSION_QUALITY))
        {
            return getProgressionQuality();
        }
        if (name.equals(SignalPhasePerformancePeer.DELAY_PER_CYCLE))
        {
            return getDelayPerCycle();
        }
        if (name.equals(SignalPhasePerformancePeer.QUEUE_SIZE))
        {
            return getQueueSize();
        }
        if (name.equals(SignalPhasePerformancePeer.NUMBER_OF_STOPS))
        {
            return getNumberOfStops();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (SignalPhasePerformancePeer.NETWORK_ID.equals(name))
        {
            return setByName("NetworkId", value);
        }
      if (SignalPhasePerformancePeer.SIGNAL_ID.equals(name))
        {
            return setByName("SignalId", value);
        }
      if (SignalPhasePerformancePeer.DATA_SOURCE_ID.equals(name))
        {
            return setByName("DataSourceId", value);
        }
      if (SignalPhasePerformancePeer.PHASE.equals(name))
        {
            return setByName("Phase", value);
        }
      if (SignalPhasePerformancePeer.TS.equals(name))
        {
            return setByName("Ts", value);
        }
      if (SignalPhasePerformancePeer.AGGREGATION.equals(name))
        {
            return setByName("Aggregation", value);
        }
      if (SignalPhasePerformancePeer.TYPE.equals(name))
        {
            return setByName("Type", value);
        }
      if (SignalPhasePerformancePeer.PHASE_UTILIZATION.equals(name))
        {
            return setByName("PhaseUtilization", value);
        }
      if (SignalPhasePerformancePeer.PROGRESSION_QUALITY.equals(name))
        {
            return setByName("ProgressionQuality", value);
        }
      if (SignalPhasePerformancePeer.DELAY_PER_CYCLE.equals(name))
        {
            return setByName("DelayPerCycle", value);
        }
      if (SignalPhasePerformancePeer.QUEUE_SIZE.equals(name))
        {
            return setByName("QueueSize", value);
        }
      if (SignalPhasePerformancePeer.NUMBER_OF_STOPS.equals(name))
        {
            return setByName("NumberOfStops", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getNetworkId();
        }
        if (pos == 1)
        {
            return getSignalId();
        }
        if (pos == 2)
        {
            return getDataSourceId();
        }
        if (pos == 3)
        {
            return getPhase();
        }
        if (pos == 4)
        {
            return getTs();
        }
        if (pos == 5)
        {
            return getAggregation();
        }
        if (pos == 6)
        {
            return getType();
        }
        if (pos == 7)
        {
            return getPhaseUtilization();
        }
        if (pos == 8)
        {
            return getProgressionQuality();
        }
        if (pos == 9)
        {
            return getDelayPerCycle();
        }
        if (pos == 10)
        {
            return getQueueSize();
        }
        if (pos == 11)
        {
            return getNumberOfStops();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("NetworkId", value);
        }
    if (position == 1)
        {
            return setByName("SignalId", value);
        }
    if (position == 2)
        {
            return setByName("DataSourceId", value);
        }
    if (position == 3)
        {
            return setByName("Phase", value);
        }
    if (position == 4)
        {
            return setByName("Ts", value);
        }
    if (position == 5)
        {
            return setByName("Aggregation", value);
        }
    if (position == 6)
        {
            return setByName("Type", value);
        }
    if (position == 7)
        {
            return setByName("PhaseUtilization", value);
        }
    if (position == 8)
        {
            return setByName("ProgressionQuality", value);
        }
    if (position == 9)
        {
            return setByName("DelayPerCycle", value);
        }
    if (position == 10)
        {
            return setByName("QueueSize", value);
        }
    if (position == 11)
        {
            return setByName("NumberOfStops", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(SignalPhasePerformancePeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SignalPhasePerformancePeer.doInsert((SignalPhasePerformance) this, con);
                    setNew(false);
                }
                else
                {
                    SignalPhasePerformancePeer.doUpdate((SignalPhasePerformance) this, con);
                }
            }

            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[7];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setNetworkId(new Long(((NumberKey)keys[0]).longValue()));
        setSignalId(new Long(((NumberKey)keys[1]).longValue()));
        setDataSourceId(new Long(((NumberKey)keys[2]).longValue()));
        setPhase(new Integer(((NumberKey)keys[3]).intValue()));
        setTs(((DateKey)keys[4]).getDate());
        setAggregation(keys[5].toString());
        setType(keys[6].toString());
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param networkId Long
     * @param signalId Long
     * @param dataSourceId Long
     * @param phase Integer
     * @param ts Date
     * @param aggregation String
     * @param type String
     */
    public void setPrimaryKey( Long networkId, Long signalId, Long dataSourceId, Integer phase, Date ts, String aggregation, String type)
        throws TorqueException
    {
        setNetworkId(networkId);
        setSignalId(signalId);
        setDataSourceId(dataSourceId);
        setPhase(phase);
        setTs(ts);
        setAggregation(aggregation);
        setType(type);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getNetworkId());
        pks[1] = SimpleKey.keyFor(getSignalId());
        pks[2] = SimpleKey.keyFor(getDataSourceId());
        pks[3] = SimpleKey.keyFor(getPhase());
        pks[4] = SimpleKey.keyFor(getTs());
        pks[5] = SimpleKey.keyFor(getAggregation());
        pks[6] = SimpleKey.keyFor(getType());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public SignalPhasePerformance copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public SignalPhasePerformance copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public SignalPhasePerformance copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new SignalPhasePerformance(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public SignalPhasePerformance copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new SignalPhasePerformance(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected SignalPhasePerformance copyInto(SignalPhasePerformance copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected SignalPhasePerformance copyInto(SignalPhasePerformance copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected SignalPhasePerformance copyInto(SignalPhasePerformance copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setNetworkId(networkId);
        copyObj.setSignalId(signalId);
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setPhase(phase);
        copyObj.setTs(ts);
        copyObj.setAggregation(aggregation);
        copyObj.setType(type);
        copyObj.setPhaseUtilization(phaseUtilization);
        copyObj.setProgressionQuality(progressionQuality);
        copyObj.setDelayPerCycle(delayPerCycle);
        copyObj.setQueueSize(queueSize);
        copyObj.setNumberOfStops(numberOfStops);

        copyObj.setNetworkId((Long)null);
        copyObj.setSignalId((Long)null);
        copyObj.setDataSourceId((Long)null);
        copyObj.setPhase((Integer)null);
        copyObj.setTs((Date)null);
        copyObj.setAggregation((String)null);
        copyObj.setType((String)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected SignalPhasePerformance copyInto(SignalPhasePerformance copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setNetworkId(networkId);
        copyObj.setSignalId(signalId);
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setPhase(phase);
        copyObj.setTs(ts);
        copyObj.setAggregation(aggregation);
        copyObj.setType(type);
        copyObj.setPhaseUtilization(phaseUtilization);
        copyObj.setProgressionQuality(progressionQuality);
        copyObj.setDelayPerCycle(delayPerCycle);
        copyObj.setQueueSize(queueSize);
        copyObj.setNumberOfStops(numberOfStops);

        copyObj.setNetworkId((Long)null);
        copyObj.setSignalId((Long)null);
        copyObj.setDataSourceId((Long)null);
        copyObj.setPhase((Integer)null);
        copyObj.setTs((Date)null);
        copyObj.setAggregation((String)null);
        copyObj.setType((String)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SignalPhasePerformancePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return SignalPhasePerformancePeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("SignalPhasePerformance:\n");
        str.append("NetworkId = ")
           .append(getNetworkId())
           .append("\n");
        str.append("SignalId = ")
           .append(getSignalId())
           .append("\n");
        str.append("DataSourceId = ")
           .append(getDataSourceId())
           .append("\n");
        str.append("Phase = ")
           .append(getPhase())
           .append("\n");
        str.append("Ts = ")
           .append(getTs())
           .append("\n");
        str.append("Aggregation = ")
           .append(getAggregation())
           .append("\n");
        str.append("Type = ")
           .append(getType())
           .append("\n");
        str.append("PhaseUtilization = ")
           .append(getPhaseUtilization())
           .append("\n");
        str.append("ProgressionQuality = ")
           .append(getProgressionQuality())
           .append("\n");
        str.append("DelayPerCycle = ")
           .append(getDelayPerCycle())
           .append("\n");
        str.append("QueueSize = ")
           .append(getQueueSize())
           .append("\n");
        str.append("NumberOfStops = ")
           .append(getNumberOfStops())
           .append("\n");
        return(str.toString());
    }
}
