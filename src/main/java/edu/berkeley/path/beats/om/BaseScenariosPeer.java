package com.relteq.sirius.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.TorqueRuntimeException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import com.relteq.sirius.om.map.*;




/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 */
public abstract class BaseScenariosPeer
    extends com.relteq.sirius.db.BasePeer
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;


    /** the default database name for this class */
    public static final String DATABASE_NAME;

     /** the table name for this class */
    public static final String TABLE_NAME;

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @deprecated Torque.getMapBuilder(ScenariosMapBuilder.CLASS_NAME) instead
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return Torque.getMapBuilder(ScenariosMapBuilder.CLASS_NAME);
    }

    /** the column name for the id field */
    public static final String ID;
    /** the column name for the project_id field */
    public static final String PROJECT_ID;
    /** the column name for the network_connection_set_id field */
    public static final String NETWORK_CONNECTION_SET_ID;
    /** the column name for the vehicle_type_set_id field */
    public static final String VEHICLE_TYPE_SET_ID;
    /** the column name for the signal_set_id field */
    public static final String SIGNAL_SET_ID;
    /** the column name for the sensor_set_id field */
    public static final String SENSOR_SET_ID;
    /** the column name for the split_ratio_profile_set_id field */
    public static final String SPLIT_RATIO_PROFILE_SET_ID;
    /** the column name for the weaving_factor_set_id field */
    public static final String WEAVING_FACTOR_SET_ID;
    /** the column name for the initial_density_set_id field */
    public static final String INITIAL_DENSITY_SET_ID;
    /** the column name for the fundamental_diagram_profile_set_id field */
    public static final String FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID;
    /** the column name for the demand_profile_set_id field */
    public static final String DEMAND_PROFILE_SET_ID;
    /** the column name for the downstream_boundary_capacity_profile_set_id field */
    public static final String DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID;
    /** the column name for the controller_set_id field */
    public static final String CONTROLLER_SET_ID;
    /** the column name for the event_set_id field */
    public static final String EVENT_SET_ID;
    /** the column name for the enkf_noise_parameter_set_id field */
    public static final String ENKF_NOISE_PARAMETER_SET_ID;
    /** the column name for the name field */
    public static final String NAME;
    /** the column name for the description field */
    public static final String DESCRIPTION;
    /** the column name for the created field */
    public static final String CREATED;
    /** the column name for the modified field */
    public static final String MODIFIED;
    /** the column name for the created_by field */
    public static final String CREATED_BY;
    /** the column name for the modified_by field */
    public static final String MODIFIED_BY;
    /** the column name for the modstamp field */
    public static final String MODSTAMP;

    static
    {
        DATABASE_NAME = "sirius";
        TABLE_NAME = "scenarios";

        ID = "scenarios.id";
        PROJECT_ID = "scenarios.project_id";
        NETWORK_CONNECTION_SET_ID = "scenarios.network_connection_set_id";
        VEHICLE_TYPE_SET_ID = "scenarios.vehicle_type_set_id";
        SIGNAL_SET_ID = "scenarios.signal_set_id";
        SENSOR_SET_ID = "scenarios.sensor_set_id";
        SPLIT_RATIO_PROFILE_SET_ID = "scenarios.split_ratio_profile_set_id";
        WEAVING_FACTOR_SET_ID = "scenarios.weaving_factor_set_id";
        INITIAL_DENSITY_SET_ID = "scenarios.initial_density_set_id";
        FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID = "scenarios.fundamental_diagram_profile_set_id";
        DEMAND_PROFILE_SET_ID = "scenarios.demand_profile_set_id";
        DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID = "scenarios.downstream_boundary_capacity_profile_set_id";
        CONTROLLER_SET_ID = "scenarios.controller_set_id";
        EVENT_SET_ID = "scenarios.event_set_id";
        ENKF_NOISE_PARAMETER_SET_ID = "scenarios.enkf_noise_parameter_set_id";
        NAME = "scenarios.name";
        DESCRIPTION = "scenarios.description";
        CREATED = "scenarios.created";
        MODIFIED = "scenarios.modified";
        CREATED_BY = "scenarios.created_by";
        MODIFIED_BY = "scenarios.modified_by";
        MODSTAMP = "scenarios.modstamp";
        if (Torque.isInit())
        {
            try
            {
                Torque.getMapBuilder(ScenariosMapBuilder.CLASS_NAME);
            }
            catch (TorqueException e)
            {
                log.error("Could not initialize Peer", e);
                throw new TorqueRuntimeException(e);
            }
        }
        else
        {
            Torque.registerMapBuilder(ScenariosMapBuilder.CLASS_NAME);
        }
    }
 
    /** number of columns for this peer */
    public static final int numColumns =  22;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "com.relteq.sirius.om.Scenarios";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            log.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Torque developers <torque-dev@db.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propagated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }



    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseScenariosPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
        correctBooleans(criteria);

        setDbName(criteria);

        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
        criteria.addSelectColumn(ID);
        criteria.addSelectColumn(PROJECT_ID);
        criteria.addSelectColumn(NETWORK_CONNECTION_SET_ID);
        criteria.addSelectColumn(VEHICLE_TYPE_SET_ID);
        criteria.addSelectColumn(SIGNAL_SET_ID);
        criteria.addSelectColumn(SENSOR_SET_ID);
        criteria.addSelectColumn(SPLIT_RATIO_PROFILE_SET_ID);
        criteria.addSelectColumn(WEAVING_FACTOR_SET_ID);
        criteria.addSelectColumn(INITIAL_DENSITY_SET_ID);
        criteria.addSelectColumn(FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID);
        criteria.addSelectColumn(DEMAND_PROFILE_SET_ID);
        criteria.addSelectColumn(DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID);
        criteria.addSelectColumn(CONTROLLER_SET_ID);
        criteria.addSelectColumn(EVENT_SET_ID);
        criteria.addSelectColumn(ENKF_NOISE_PARAMETER_SET_ID);
        criteria.addSelectColumn(NAME);
        criteria.addSelectColumn(DESCRIPTION);
        criteria.addSelectColumn(CREATED);
        criteria.addSelectColumn(MODIFIED);
        criteria.addSelectColumn(CREATED_BY);
        criteria.addSelectColumn(MODIFIED_BY);
        criteria.addSelectColumn(MODSTAMP);
    }

    /**
     * changes the boolean values in the criteria to the appropriate type,
     * whenever a booleanchar or booleanint column is involved.
     * This enables the user to create criteria using Boolean values
     * for booleanchar or booleanint columns
     * @param criteria the criteria in which the boolean values should be corrected
     * @throws TorqueException if the database map for the criteria cannot be 
               obtained.
     */
    public static void correctBooleans(Criteria criteria) throws TorqueException
    {
        correctBooleans(criteria, getTableMap());
    }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Scenarios row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            Scenarios obj = (Scenarios) cls.newInstance();
            ScenariosPeer.populateObject(row, offset, obj);
                obj.setModified(false);
            obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      Scenarios obj)
        throws TorqueException
    {
        try
        {
            obj.setId(row.getValue(offset + 0).asLongObj());
            obj.setProjectId(row.getValue(offset + 1).asLongObj());
            obj.setNetworkConnectionSetId(row.getValue(offset + 2).asLongObj());
            obj.setVehicleTypeSetId(row.getValue(offset + 3).asLongObj());
            obj.setSignalSetId(row.getValue(offset + 4).asLongObj());
            obj.setSensorSetId(row.getValue(offset + 5).asLongObj());
            obj.setSplitRatioProfileSetId(row.getValue(offset + 6).asLongObj());
            obj.setWeavingFactorSetId(row.getValue(offset + 7).asLongObj());
            obj.setInitialDensitySetId(row.getValue(offset + 8).asLongObj());
            obj.setFundamentalDiagramProfileSetId(row.getValue(offset + 9).asLongObj());
            obj.setDemandProfileSetId(row.getValue(offset + 10).asLongObj());
            obj.setDownstreamBoundaryCapacityProfileSetId(row.getValue(offset + 11).asLongObj());
            obj.setControllerSetId(row.getValue(offset + 12).asLongObj());
            obj.setEventSetId(row.getValue(offset + 13).asLongObj());
            obj.setEnkfNoiseParameterSetId(row.getValue(offset + 14).asLongObj());
            obj.setName(row.getValue(offset + 15).asString());
            obj.setDescription(row.getValue(offset + 16).asString());
            obj.setCreated(row.getValue(offset + 17).asUtilDate());
            obj.setModified(row.getValue(offset + 18).asUtilDate());
            obj.setCreatedBy(row.getValue(offset + 19).asString());
            obj.setModifiedBy(row.getValue(offset + 20).asString());
            obj.setModstamp(row.getValue(offset + 21).asUtilDate());
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseScenariosPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }
        correctBooleans(criteria);

        setDbName(criteria);

        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
            results.add(ScenariosPeer.row2Object(row, 1,
                ScenariosPeer.getOMClass()));
        }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseScenariosPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
        correctBooleans(criteria);


         selectCriteria.put(ID, criteria.remove(ID));






















        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         ScenariosPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
        correctBooleans(criteria);

        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doDelete(criteria, TABLE_NAME);
        }
        else
        {
            BasePeer.doDelete(criteria, TABLE_NAME, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Scenarios obj) throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Scenarios obj) throws TorqueException
    {
        obj.setPrimaryKey(doInsert(buildCriteria(obj)));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Scenarios obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Scenarios obj) throws TorqueException
    {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Scenarios) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Scenarios obj, Connection con)
        throws TorqueException
    {
        obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Scenarios) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Scenarios obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Scenarios) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Scenarios obj, Connection con)
        throws TorqueException
    {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseScenariosPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
            criteria.add(ID, pk);
        return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( Scenarios obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
        if (!obj.isNew())
        criteria.add(ID, obj.getId());
        criteria.add(PROJECT_ID, obj.getProjectId());
        criteria.add(NETWORK_CONNECTION_SET_ID, obj.getNetworkConnectionSetId());
        criteria.add(VEHICLE_TYPE_SET_ID, obj.getVehicleTypeSetId());
        criteria.add(SIGNAL_SET_ID, obj.getSignalSetId());
        criteria.add(SENSOR_SET_ID, obj.getSensorSetId());
        criteria.add(SPLIT_RATIO_PROFILE_SET_ID, obj.getSplitRatioProfileSetId());
        criteria.add(WEAVING_FACTOR_SET_ID, obj.getWeavingFactorSetId());
        criteria.add(INITIAL_DENSITY_SET_ID, obj.getInitialDensitySetId());
        criteria.add(FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, obj.getFundamentalDiagramProfileSetId());
        criteria.add(DEMAND_PROFILE_SET_ID, obj.getDemandProfileSetId());
        criteria.add(DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, obj.getDownstreamBoundaryCapacityProfileSetId());
        criteria.add(CONTROLLER_SET_ID, obj.getControllerSetId());
        criteria.add(EVENT_SET_ID, obj.getEventSetId());
        criteria.add(ENKF_NOISE_PARAMETER_SET_ID, obj.getEnkfNoiseParameterSetId());
        criteria.add(NAME, obj.getName());
        criteria.add(DESCRIPTION, obj.getDescription());
        criteria.add(CREATED, obj.getCreated());
        criteria.add(MODIFIED, obj.getModified());
        criteria.add(CREATED_BY, obj.getCreatedBy());
        criteria.add(MODIFIED_BY, obj.getModifiedBy());
        criteria.add(MODSTAMP, obj.getModstamp());
        return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria( Scenarios obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
        if (!obj.isNew())
        {
            criteria.add(ID, obj.getId());
        }
            criteria.add(PROJECT_ID, obj.getProjectId());
            criteria.add(NETWORK_CONNECTION_SET_ID, obj.getNetworkConnectionSetId());
            criteria.add(VEHICLE_TYPE_SET_ID, obj.getVehicleTypeSetId());
            criteria.add(SIGNAL_SET_ID, obj.getSignalSetId());
            criteria.add(SENSOR_SET_ID, obj.getSensorSetId());
            criteria.add(SPLIT_RATIO_PROFILE_SET_ID, obj.getSplitRatioProfileSetId());
            criteria.add(WEAVING_FACTOR_SET_ID, obj.getWeavingFactorSetId());
            criteria.add(INITIAL_DENSITY_SET_ID, obj.getInitialDensitySetId());
            criteria.add(FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, obj.getFundamentalDiagramProfileSetId());
            criteria.add(DEMAND_PROFILE_SET_ID, obj.getDemandProfileSetId());
            criteria.add(DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, obj.getDownstreamBoundaryCapacityProfileSetId());
            criteria.add(CONTROLLER_SET_ID, obj.getControllerSetId());
            criteria.add(EVENT_SET_ID, obj.getEventSetId());
            criteria.add(ENKF_NOISE_PARAMETER_SET_ID, obj.getEnkfNoiseParameterSetId());
            criteria.add(NAME, obj.getName());
            criteria.add(DESCRIPTION, obj.getDescription());
            criteria.add(CREATED, obj.getCreated());
            criteria.add(MODIFIED, obj.getModified());
            criteria.add(CREATED_BY, obj.getCreatedBy());
            criteria.add(MODIFIED_BY, obj.getModifiedBy());
            criteria.add(MODSTAMP, obj.getModstamp());
        return criteria;
    }
 

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Scenarios retrieveByPK(Long pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Scenarios retrieveByPK(Long pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Scenarios retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection db = null;
        Scenarios retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return retVal;
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Scenarios retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (Scenarios)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return retVal;
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
            criteria.addIn( ID, pks );
        objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 








    /**
     * selects a collection of Scenarios objects pre-filled with their
     * Projects objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProjects(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinProjects(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * Projects objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProjects(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        ProjectsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.PROJECT_ID,
            ProjectsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * NetworkConnectionSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinNetworkConnectionSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * NetworkConnectionSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinNetworkConnectionSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        NetworkConnectionSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID,
            NetworkConnectionSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj2 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj2 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * SignalSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSignalSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinSignalSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * SignalSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSignalSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        SignalSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID,
            SignalSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj2 = (SignalSets) SignalSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj2 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * SensorSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSensorSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinSensorSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * SensorSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSensorSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        SensorSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID,
            SensorSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj2 = (SensorSets) SensorSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj2 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * InitialDensitySets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinInitialDensitySets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinInitialDensitySets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * InitialDensitySets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinInitialDensitySets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        InitialDensitySetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID,
            InitialDensitySetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj2 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj2 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * FundamentalDiagramProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinFundamentalDiagramProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinFundamentalDiagramProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * FundamentalDiagramProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinFundamentalDiagramProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID,
            FundamentalDiagramProfileSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj2 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj2 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * DemandProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDemandProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinDemandProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * DemandProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDemandProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        DemandProfileSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID,
            DemandProfileSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj2 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj2 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * DownstreamBoundaryCapacityProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDownstreamBoundaryCapacityProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinDownstreamBoundaryCapacityProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * DownstreamBoundaryCapacityProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDownstreamBoundaryCapacityProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID,
            DownstreamBoundaryCapacityProfileSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj2 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj2 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * SplitRatioProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSplitRatioProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinSplitRatioProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * SplitRatioProfileSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSplitRatioProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        SplitRatioProfileSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID,
            SplitRatioProfileSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj2 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj2 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * WeavingFactorSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinWeavingFactorSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinWeavingFactorSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * WeavingFactorSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinWeavingFactorSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        WeavingFactorSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID,
            WeavingFactorSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj2 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj2 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * ControllerSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinControllerSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinControllerSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * ControllerSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinControllerSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        ControllerSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID,
            ControllerSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj2 = (ControllerSets) ControllerSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj2 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * EventSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinEventSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinEventSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * EventSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinEventSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        EventSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.EVENT_SET_ID,
            EventSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = EventSetsPeer.getOMClass();
            EventSets obj2 = (EventSets) EventSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj2 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * EnkfNoiseParameterSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinEnkfNoiseParameterSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinEnkfNoiseParameterSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * EnkfNoiseParameterSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinEnkfNoiseParameterSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID,
            EnkfNoiseParameterSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj2 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj2 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with their
     * VehicleTypeSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinVehicleTypeSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinVehicleTypeSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with their
     * VehicleTypeSets objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinVehicleTypeSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        ScenariosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        VehicleTypeSetsPeer.addSelectColumns(criteria);

        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID,
            VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);
             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj2 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj2 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }







    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProjects(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptProjects(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProjects(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;


        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset3 = offset2 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset4 = offset3 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset5 = offset4 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset6 = offset5 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset7 = offset6 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset8 = offset7 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);





             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj2 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj2 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj3 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj3 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj4 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj4 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj5 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj5 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj6 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj6 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj7 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj7 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptNetworkConnectionSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptNetworkConnectionSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;


        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset4 = offset3 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset5 = offset4 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset6 = offset5 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset7 = offset6 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset8 = offset7 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }





             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj3 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj3 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj4 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj4 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj5 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj5 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj6 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj6 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj7 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj7 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSignalSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptSignalSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSignalSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;


        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset5 = offset4 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset6 = offset5 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset7 = offset6 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset8 = offset7 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }





             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj4 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj4 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj5 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj5 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj6 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj6 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj7 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj7 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSensorSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptSensorSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSensorSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;


        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset6 = offset5 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset7 = offset6 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset8 = offset7 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }





             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj5 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj5 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj6 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj6 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj7 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj7 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptInitialDensitySets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptInitialDensitySets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptInitialDensitySets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;


        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset7 = offset6 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset8 = offset7 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }





             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj6 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj6 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj7 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj7 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptFundamentalDiagramProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptFundamentalDiagramProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptFundamentalDiagramProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;


        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset8 = offset7 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }





             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj7 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj7 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptDemandProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptDemandProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptDemandProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;


        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset9 = offset8 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }





             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj8 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj8 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptDownstreamBoundaryCapacityProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptDownstreamBoundaryCapacityProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptDownstreamBoundaryCapacityProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;


        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset10 = offset9 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }





             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj9 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj9 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSplitRatioProfileSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptSplitRatioProfileSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSplitRatioProfileSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset10 = offset9 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;


        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset11 = offset10 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj9 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj9 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }





             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj10 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj10 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptWeavingFactorSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptWeavingFactorSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptWeavingFactorSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset10 = offset9 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset11 = offset10 + SplitRatioProfileSetsPeer.numColumns;


        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset12 = offset11 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj9 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj9 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj10 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj10 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }





             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj11 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj11 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptControllerSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptControllerSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptControllerSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset10 = offset9 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset11 = offset10 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset12 = offset11 + WeavingFactorSetsPeer.numColumns;


        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset13 = offset12 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj9 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj9 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj10 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj10 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj11 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj11 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }





             omClass = EventSetsPeer.getOMClass();
            EventSets obj12 = (EventSets) EventSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj12 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptEventSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptEventSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptEventSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset10 = offset9 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset11 = offset10 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset12 = offset11 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset13 = offset12 + ControllerSetsPeer.numColumns;


        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);
        int offset14 = offset13 + EnkfNoiseParameterSetsPeer.numColumns;

        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj9 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj9 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj10 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj10 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj11 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj11 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj12 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj12 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }





             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj13 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj13 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptEnkfNoiseParameterSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptEnkfNoiseParameterSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptEnkfNoiseParameterSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset10 = offset9 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset11 = offset10 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset12 = offset11 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset13 = offset12 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset14 = offset13 + EventSetsPeer.numColumns;


        VehicleTypeSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.VEHICLE_TYPE_SET_ID, VehicleTypeSetsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj9 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj9 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj10 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj10 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj11 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj11 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj12 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj12 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj13 = (EventSets) EventSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj13 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }





             omClass = VehicleTypeSetsPeer.getOMClass();
            VehicleTypeSets obj14 = (VehicleTypeSets) VehicleTypeSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                VehicleTypeSets temp_obj14 = (VehicleTypeSets) temp_obj1.getVehicleTypeSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptVehicleTypeSets(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptVehicleTypeSets(criteria, null);
    }

    /**
     * selects a collection of Scenarios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ScenariosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptVehicleTypeSets(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        ProjectsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.PROJECT_ID, ProjectsPeer.ID);
        int offset3 = offset2 + ProjectsPeer.numColumns;

        NetworkConnectionSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.NETWORK_CONNECTION_SET_ID, NetworkConnectionSetsPeer.ID);
        int offset4 = offset3 + NetworkConnectionSetsPeer.numColumns;

        SignalSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SIGNAL_SET_ID, SignalSetsPeer.ID);
        int offset5 = offset4 + SignalSetsPeer.numColumns;

        SensorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SENSOR_SET_ID, SensorSetsPeer.ID);
        int offset6 = offset5 + SensorSetsPeer.numColumns;

        InitialDensitySetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.INITIAL_DENSITY_SET_ID, InitialDensitySetsPeer.ID);
        int offset7 = offset6 + InitialDensitySetsPeer.numColumns;

        FundamentalDiagramProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID, FundamentalDiagramProfileSetsPeer.ID);
        int offset8 = offset7 + FundamentalDiagramProfileSetsPeer.numColumns;

        DemandProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DEMAND_PROFILE_SET_ID, DemandProfileSetsPeer.ID);
        int offset9 = offset8 + DemandProfileSetsPeer.numColumns;

        DownstreamBoundaryCapacityProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID, DownstreamBoundaryCapacityProfileSetsPeer.ID);
        int offset10 = offset9 + DownstreamBoundaryCapacityProfileSetsPeer.numColumns;

        SplitRatioProfileSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID, SplitRatioProfileSetsPeer.ID);
        int offset11 = offset10 + SplitRatioProfileSetsPeer.numColumns;

        WeavingFactorSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.WEAVING_FACTOR_SET_ID, WeavingFactorSetsPeer.ID);
        int offset12 = offset11 + WeavingFactorSetsPeer.numColumns;

        ControllerSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.CONTROLLER_SET_ID, ControllerSetsPeer.ID);
        int offset13 = offset12 + ControllerSetsPeer.numColumns;

        EventSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.EVENT_SET_ID, EventSetsPeer.ID);
        int offset14 = offset13 + EventSetsPeer.numColumns;

        EnkfNoiseParameterSetsPeer.addSelectColumns(criteria);
        criteria.addJoin(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID, EnkfNoiseParameterSetsPeer.ID);


        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = ScenariosPeer.getOMClass();
            Scenarios obj1 = (Scenarios) ScenariosPeer
                .row2Object(row, 1, omClass);




             omClass = ProjectsPeer.getOMClass();
            Projects obj2 = (Projects) ProjectsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                Projects temp_obj2 = (Projects) temp_obj1.getProjects();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initScenarioss();
                obj2.addScenarios(obj1);
            }




             omClass = NetworkConnectionSetsPeer.getOMClass();
            NetworkConnectionSets obj3 = (NetworkConnectionSets) NetworkConnectionSetsPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                NetworkConnectionSets temp_obj3 = (NetworkConnectionSets) temp_obj1.getNetworkConnectionSets();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initScenarioss();
                obj3.addScenarios(obj1);
            }




             omClass = SignalSetsPeer.getOMClass();
            SignalSets obj4 = (SignalSets) SignalSetsPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SignalSets temp_obj4 = (SignalSets) temp_obj1.getSignalSets();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initScenarioss();
                obj4.addScenarios(obj1);
            }




             omClass = SensorSetsPeer.getOMClass();
            SensorSets obj5 = (SensorSets) SensorSetsPeer
                .row2Object( row, offset5, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SensorSets temp_obj5 = (SensorSets) temp_obj1.getSensorSets();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initScenarioss();
                obj5.addScenarios(obj1);
            }




             omClass = InitialDensitySetsPeer.getOMClass();
            InitialDensitySets obj6 = (InitialDensitySets) InitialDensitySetsPeer
                .row2Object( row, offset6, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                InitialDensitySets temp_obj6 = (InitialDensitySets) temp_obj1.getInitialDensitySets();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initScenarioss();
                obj6.addScenarios(obj1);
            }




             omClass = FundamentalDiagramProfileSetsPeer.getOMClass();
            FundamentalDiagramProfileSets obj7 = (FundamentalDiagramProfileSets) FundamentalDiagramProfileSetsPeer
                .row2Object( row, offset7, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                FundamentalDiagramProfileSets temp_obj7 = (FundamentalDiagramProfileSets) temp_obj1.getFundamentalDiagramProfileSets();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj7.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj7.initScenarioss();
                obj7.addScenarios(obj1);
            }




             omClass = DemandProfileSetsPeer.getOMClass();
            DemandProfileSets obj8 = (DemandProfileSets) DemandProfileSetsPeer
                .row2Object( row, offset8, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DemandProfileSets temp_obj8 = (DemandProfileSets) temp_obj1.getDemandProfileSets();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj8.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj8.initScenarioss();
                obj8.addScenarios(obj1);
            }




             omClass = DownstreamBoundaryCapacityProfileSetsPeer.getOMClass();
            DownstreamBoundaryCapacityProfileSets obj9 = (DownstreamBoundaryCapacityProfileSets) DownstreamBoundaryCapacityProfileSetsPeer
                .row2Object( row, offset9, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                DownstreamBoundaryCapacityProfileSets temp_obj9 = (DownstreamBoundaryCapacityProfileSets) temp_obj1.getDownstreamBoundaryCapacityProfileSets();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj9.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj9.initScenarioss();
                obj9.addScenarios(obj1);
            }




             omClass = SplitRatioProfileSetsPeer.getOMClass();
            SplitRatioProfileSets obj10 = (SplitRatioProfileSets) SplitRatioProfileSetsPeer
                .row2Object( row, offset10, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                SplitRatioProfileSets temp_obj10 = (SplitRatioProfileSets) temp_obj1.getSplitRatioProfileSets();
                if (temp_obj10.getPrimaryKey().equals(obj10.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj10.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj10.initScenarioss();
                obj10.addScenarios(obj1);
            }




             omClass = WeavingFactorSetsPeer.getOMClass();
            WeavingFactorSets obj11 = (WeavingFactorSets) WeavingFactorSetsPeer
                .row2Object( row, offset11, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                WeavingFactorSets temp_obj11 = (WeavingFactorSets) temp_obj1.getWeavingFactorSets();
                if (temp_obj11.getPrimaryKey().equals(obj11.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj11.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj11.initScenarioss();
                obj11.addScenarios(obj1);
            }




             omClass = ControllerSetsPeer.getOMClass();
            ControllerSets obj12 = (ControllerSets) ControllerSetsPeer
                .row2Object( row, offset12, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                ControllerSets temp_obj12 = (ControllerSets) temp_obj1.getControllerSets();
                if (temp_obj12.getPrimaryKey().equals(obj12.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj12.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj12.initScenarioss();
                obj12.addScenarios(obj1);
            }




             omClass = EventSetsPeer.getOMClass();
            EventSets obj13 = (EventSets) EventSetsPeer
                .row2Object( row, offset13, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EventSets temp_obj13 = (EventSets) temp_obj1.getEventSets();
                if (temp_obj13.getPrimaryKey().equals(obj13.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj13.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj13.initScenarioss();
                obj13.addScenarios(obj1);
            }




             omClass = EnkfNoiseParameterSetsPeer.getOMClass();
            EnkfNoiseParameterSets obj14 = (EnkfNoiseParameterSets) EnkfNoiseParameterSetsPeer
                .row2Object( row, offset14, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Scenarios temp_obj1 = (Scenarios) results.get(j);
                EnkfNoiseParameterSets temp_obj14 = (EnkfNoiseParameterSets) temp_obj1.getEnkfNoiseParameterSets();
                if (temp_obj14.getPrimaryKey().equals(obj14.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj14.addScenarios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj14.initScenarioss();
                obj14.addScenarios(obj1);
            }

            results.add(obj1);
        }
        return results;
    }


    /**
     * Returns the TableMap related to this peer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
 
    private static void setDbName(Criteria crit)
    {
        // Set the correct dbName if it has not been overridden
        // crit.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (crit.getDbName() == Torque.getDefaultDB())
        {
            crit.setDbName(DATABASE_NAME);
        }
    }
    

}
