package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to DestinationNetworks
 */
public abstract class BaseDestinationNetworks extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final DestinationNetworksPeer peer =
        new DestinationNetworksPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the destinationLinkId field */
    private Long destinationLinkId;

    /** The value for the projectId field */
    private Long projectId;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated DestinationNetworkLinks
        if (collDestinationNetworkLinkss != null)
        {
            for (int i = 0; i < collDestinationNetworkLinkss.size(); i++)
            {
                ((DestinationNetworkLinks) collDestinationNetworkLinkss.get(i))
                        .setDestinationNetworkId(v);
            }
        }

        // update associated DestinationNetworkSets
        if (collDestinationNetworkSetss != null)
        {
            for (int i = 0; i < collDestinationNetworkSetss.size(); i++)
            {
                ((DestinationNetworkSets) collDestinationNetworkSetss.get(i))
                        .setDestinationNetworkId(v);
            }
        }
    }

    /**
     * Get the DestinationLinkId
     *
     * @return Long
     */
    public Long getDestinationLinkId()
    {
        return destinationLinkId;
    }


    /**
     * Set the value of DestinationLinkId
     *
     * @param v new value
     */
    public void setDestinationLinkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.destinationLinkId, v))
        {
            this.destinationLinkId = v;
            setModified(true);
        }


        if (aLinkFamilies != null && !ObjectUtils.equals(aLinkFamilies.getId(), v))
        {
            aLinkFamilies = null;
        }

    }

    /**
     * Get the ProjectId
     *
     * @return Long
     */
    public Long getProjectId()
    {
        return projectId;
    }


    /**
     * Set the value of ProjectId
     *
     * @param v new value
     */
    public void setProjectId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.projectId, v))
        {
            this.projectId = v;
            setModified(true);
        }


        if (aProjects != null && !ObjectUtils.equals(aProjects.getId(), v))
        {
            aProjects = null;
        }

    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private LinkFamilies aLinkFamilies;

    /**
     * Declares an association between this object and a LinkFamilies object
     *
     * @param v LinkFamilies
     * @throws TorqueException
     */
    public void setLinkFamilies(LinkFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setDestinationLinkId((Long) null);
        }
        else
        {
            setDestinationLinkId(v.getId());
        }
        aLinkFamilies = v;
    }


    /**
     * Returns the associated LinkFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamilies()
        throws TorqueException
    {
        if (aLinkFamilies == null && (!ObjectUtils.equals(this.destinationLinkId, null)))
        {
            aLinkFamilies = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.destinationLinkId));
        }
        return aLinkFamilies;
    }

    /**
     * Return the associated LinkFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamilies(Connection connection)
        throws TorqueException
    {
        if (aLinkFamilies == null && (!ObjectUtils.equals(this.destinationLinkId, null)))
        {
            aLinkFamilies = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.destinationLinkId), connection);
        }
        return aLinkFamilies;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLinkFamiliesKey(ObjectKey key) throws TorqueException
    {

        setDestinationLinkId(new Long(((NumberKey) key).longValue()));
    }




    private Projects aProjects;

    /**
     * Declares an association between this object and a Projects object
     *
     * @param v Projects
     * @throws TorqueException
     */
    public void setProjects(Projects v) throws TorqueException
    {
        if (v == null)
        {
            setProjectId((Long) null);
        }
        else
        {
            setProjectId(v.getId());
        }
        aProjects = v;
    }


    /**
     * Returns the associated Projects object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Projects object
     * @throws TorqueException
     */
    public Projects getProjects()
        throws TorqueException
    {
        if (aProjects == null && (!ObjectUtils.equals(this.projectId, null)))
        {
            aProjects = ProjectsPeer.retrieveByPK(SimpleKey.keyFor(this.projectId));
        }
        return aProjects;
    }

    /**
     * Return the associated Projects object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Projects object
     * @throws TorqueException
     */
    public Projects getProjects(Connection connection)
        throws TorqueException
    {
        if (aProjects == null && (!ObjectUtils.equals(this.projectId, null)))
        {
            aProjects = ProjectsPeer.retrieveByPK(SimpleKey.keyFor(this.projectId), connection);
        }
        return aProjects;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectsKey(ObjectKey key) throws TorqueException
    {

        setProjectId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collDestinationNetworkLinkss
     */
    protected List collDestinationNetworkLinkss;

    /**
     * Temporary storage of collDestinationNetworkLinkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDestinationNetworkLinkss()
    {
        if (collDestinationNetworkLinkss == null)
        {
            collDestinationNetworkLinkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DestinationNetworkLinks object to this object
     * through the DestinationNetworkLinks foreign key attribute
     *
     * @param l DestinationNetworkLinks
     * @throws TorqueException
     */
    public void addDestinationNetworkLinks(DestinationNetworkLinks l) throws TorqueException
    {
        getDestinationNetworkLinkss().add(l);
        l.setDestinationNetworks((DestinationNetworks) this);
    }

    /**
     * Method called to associate a DestinationNetworkLinks object to this object
     * through the DestinationNetworkLinks foreign key attribute using connection.
     *
     * @param l DestinationNetworkLinks
     * @throws TorqueException
     */
    public void addDestinationNetworkLinks(DestinationNetworkLinks l, Connection con) throws TorqueException
    {
        getDestinationNetworkLinkss(con).add(l);
        l.setDestinationNetworks((DestinationNetworks) this);
    }

    /**
     * The criteria used to select the current contents of collDestinationNetworkLinkss
     */
    private Criteria lastDestinationNetworkLinkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkLinkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDestinationNetworkLinkss()
        throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            collDestinationNetworkLinkss = getDestinationNetworkLinkss(new Criteria(10));
        }
        return collDestinationNetworkLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     * If this DestinationNetworks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDestinationNetworkLinkss(Criteria criteria) throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId() );
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
                if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
                {
                    collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria);
                }
            }
        }
        lastDestinationNetworkLinkssCriteria = criteria;

        return collDestinationNetworkLinkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkLinkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkLinkss(Connection con) throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            collDestinationNetworkLinkss = getDestinationNetworkLinkss(new Criteria(10), con);
        }
        return collDestinationNetworkLinkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     * If this DestinationNetworks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkLinkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                 criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
                 collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
                 if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
                 {
                     collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDestinationNetworkLinkssCriteria = criteria;

         return collDestinationNetworkLinkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks is new, it will return
     * an empty collection; or if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DestinationNetworks.
     */
    protected List getDestinationNetworkLinkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
            if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
            {
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastDestinationNetworkLinkssCriteria = criteria;

        return collDestinationNetworkLinkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks is new, it will return
     * an empty collection; or if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkLinkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DestinationNetworks.
     */
    protected List getDestinationNetworkLinkssJoinDestinationNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkLinkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkLinkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkLinksPeer.DESTINATION_NETWORK_ID, getId());
            if (!lastDestinationNetworkLinkssCriteria.equals(criteria))
            {
                collDestinationNetworkLinkss = DestinationNetworkLinksPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        lastDestinationNetworkLinkssCriteria = criteria;

        return collDestinationNetworkLinkss;
    }





    /**
     * Collection to store aggregation of collDestinationNetworkSetss
     */
    protected List collDestinationNetworkSetss;

    /**
     * Temporary storage of collDestinationNetworkSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDestinationNetworkSetss()
    {
        if (collDestinationNetworkSetss == null)
        {
            collDestinationNetworkSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DestinationNetworkSets object to this object
     * through the DestinationNetworkSets foreign key attribute
     *
     * @param l DestinationNetworkSets
     * @throws TorqueException
     */
    public void addDestinationNetworkSets(DestinationNetworkSets l) throws TorqueException
    {
        getDestinationNetworkSetss().add(l);
        l.setDestinationNetworks((DestinationNetworks) this);
    }

    /**
     * Method called to associate a DestinationNetworkSets object to this object
     * through the DestinationNetworkSets foreign key attribute using connection.
     *
     * @param l DestinationNetworkSets
     * @throws TorqueException
     */
    public void addDestinationNetworkSets(DestinationNetworkSets l, Connection con) throws TorqueException
    {
        getDestinationNetworkSetss(con).add(l);
        l.setDestinationNetworks((DestinationNetworks) this);
    }

    /**
     * The criteria used to select the current contents of collDestinationNetworkSetss
     */
    private Criteria lastDestinationNetworkSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDestinationNetworkSetss()
        throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            collDestinationNetworkSetss = getDestinationNetworkSetss(new Criteria(10));
        }
        return collDestinationNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     * If this DestinationNetworks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDestinationNetworkSetss(Criteria criteria) throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId() );
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
                if (!lastDestinationNetworkSetssCriteria.equals(criteria))
                {
                    collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria);
                }
            }
        }
        lastDestinationNetworkSetssCriteria = criteria;

        return collDestinationNetworkSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkSetss(Connection con) throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            collDestinationNetworkSetss = getDestinationNetworkSetss(new Criteria(10), con);
        }
        return collDestinationNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     * If this DestinationNetworks is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                 criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
                 collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
                 if (!lastDestinationNetworkSetssCriteria.equals(criteria))
                 {
                     collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDestinationNetworkSetssCriteria = criteria;

         return collDestinationNetworkSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks is new, it will return
     * an empty collection; or if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DestinationNetworks.
     */
    protected List getDestinationNetworkSetssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
            if (!lastDestinationNetworkSetssCriteria.equals(criteria))
            {
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastDestinationNetworkSetssCriteria = criteria;

        return collDestinationNetworkSetss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DestinationNetworks is new, it will return
     * an empty collection; or if this DestinationNetworks has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DestinationNetworks.
     */
    protected List getDestinationNetworkSetssJoinDestinationNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkSetsPeer.DESTINATION_NETWORK_ID, getId());
            if (!lastDestinationNetworkSetssCriteria.equals(criteria))
            {
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        lastDestinationNetworkSetssCriteria = criteria;

        return collDestinationNetworkSetss;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("DestinationLinkId");
            fieldNames.add("ProjectId");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("DestinationLinkId"))
        {
            return getDestinationLinkId();
        }
        if (name.equals("ProjectId"))
        {
            return getProjectId();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("DestinationLinkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDestinationLinkId((Long) value);
            return true;
        }
        if (name.equals("ProjectId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setProjectId((Long) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(DestinationNetworksPeer.ID))
        {
            return getId();
        }
        if (name.equals(DestinationNetworksPeer.DESTINATION_LINK_ID))
        {
            return getDestinationLinkId();
        }
        if (name.equals(DestinationNetworksPeer.PROJECT_ID))
        {
            return getProjectId();
        }
        if (name.equals(DestinationNetworksPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(DestinationNetworksPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(DestinationNetworksPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(DestinationNetworksPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(DestinationNetworksPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (DestinationNetworksPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (DestinationNetworksPeer.DESTINATION_LINK_ID.equals(name))
        {
            return setByName("DestinationLinkId", value);
        }
      if (DestinationNetworksPeer.PROJECT_ID.equals(name))
        {
            return setByName("ProjectId", value);
        }
      if (DestinationNetworksPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (DestinationNetworksPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (DestinationNetworksPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (DestinationNetworksPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (DestinationNetworksPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getDestinationLinkId();
        }
        if (pos == 2)
        {
            return getProjectId();
        }
        if (pos == 3)
        {
            return getCreated();
        }
        if (pos == 4)
        {
            return getModified();
        }
        if (pos == 5)
        {
            return getCreatedBy();
        }
        if (pos == 6)
        {
            return getModifiedBy();
        }
        if (pos == 7)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("DestinationLinkId", value);
        }
    if (position == 2)
        {
            return setByName("ProjectId", value);
        }
    if (position == 3)
        {
            return setByName("Created", value);
        }
    if (position == 4)
        {
            return setByName("Modified", value);
        }
    if (position == 5)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 6)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 7)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(DestinationNetworksPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    DestinationNetworksPeer.doInsert((DestinationNetworks) this, con);
                    setNew(false);
                }
                else
                {
                    DestinationNetworksPeer.doUpdate((DestinationNetworks) this, con);
                }
            }


            if (collDestinationNetworkLinkss != null)
            {
                for (int i = 0; i < collDestinationNetworkLinkss.size(); i++)
                {
                    ((DestinationNetworkLinks) collDestinationNetworkLinkss.get(i)).save(con);
                }
            }

            if (collDestinationNetworkSetss != null)
            {
                for (int i = 0; i < collDestinationNetworkSetss.size(); i++)
                {
                    ((DestinationNetworkSets) collDestinationNetworkSetss.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public DestinationNetworks copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public DestinationNetworks copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public DestinationNetworks copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new DestinationNetworks(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public DestinationNetworks copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new DestinationNetworks(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected DestinationNetworks copyInto(DestinationNetworks copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected DestinationNetworks copyInto(DestinationNetworks copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected DestinationNetworks copyInto(DestinationNetworks copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setDestinationLinkId(destinationLinkId);
        copyObj.setProjectId(projectId);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vDestinationNetworkLinkss = getDestinationNetworkLinkss();
        if (vDestinationNetworkLinkss != null)
        {
            for (int i = 0; i < vDestinationNetworkLinkss.size(); i++)
            {
                DestinationNetworkLinks obj = (DestinationNetworkLinks) vDestinationNetworkLinkss.get(i);
                copyObj.addDestinationNetworkLinks(obj.copy());
            }
        }
        else
        {
            copyObj.collDestinationNetworkLinkss = null;
        }


        List vDestinationNetworkSetss = getDestinationNetworkSetss();
        if (vDestinationNetworkSetss != null)
        {
            for (int i = 0; i < vDestinationNetworkSetss.size(); i++)
            {
                DestinationNetworkSets obj = (DestinationNetworkSets) vDestinationNetworkSetss.get(i);
                copyObj.addDestinationNetworkSets(obj.copy());
            }
        }
        else
        {
            copyObj.collDestinationNetworkSetss = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected DestinationNetworks copyInto(DestinationNetworks copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setDestinationLinkId(destinationLinkId);
        copyObj.setProjectId(projectId);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vDestinationNetworkLinkss = getDestinationNetworkLinkss(con);
        if (vDestinationNetworkLinkss != null)
        {
            for (int i = 0; i < vDestinationNetworkLinkss.size(); i++)
            {
                DestinationNetworkLinks obj = (DestinationNetworkLinks) vDestinationNetworkLinkss.get(i);
                copyObj.addDestinationNetworkLinks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDestinationNetworkLinkss = null;
        }


        List vDestinationNetworkSetss = getDestinationNetworkSetss(con);
        if (vDestinationNetworkSetss != null)
        {
            for (int i = 0; i < vDestinationNetworkSetss.size(); i++)
            {
                DestinationNetworkSets obj = (DestinationNetworkSets) vDestinationNetworkSetss.get(i);
                copyObj.addDestinationNetworkSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDestinationNetworkSetss = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DestinationNetworksPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return DestinationNetworksPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("DestinationNetworks:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("DestinationLinkId = ")
           .append(getDestinationLinkId())
           .append("\n");
        str.append("ProjectId = ")
           .append(getProjectId())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
