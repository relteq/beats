package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Nodes
 */
public abstract class BaseNodes extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final NodesPeer peer =
        new NodesPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the networkId field */
    private Long networkId;

    /** The value for the geom field */
    private String geom;

    /** The value for the inSynch field */
    private Boolean inSynch;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }


        if (aNodeFamilies != null && !ObjectUtils.equals(aNodeFamilies.getId(), v))
        {
            aNodeFamilies = null;
        }


        // update associated NodeName
        if (collNodeNames != null)
        {
            for (int i = 0; i < collNodeNames.size(); i++)
            {
                ((NodeName) collNodeNames.get(i))
                        .setId(v);
            }
        }

        // update associated NodeType
        if (collNodeTypes != null)
        {
            for (int i = 0; i < collNodeTypes.size(); i++)
            {
                ((NodeType) collNodeTypes.get(i))
                        .setId(v);
            }
        }

        // update associated Postmiles
        if (collPostmiless != null)
        {
            for (int i = 0; i < collPostmiless.size(); i++)
            {
                ((Postmiles) collPostmiless.get(i))
                        .setNodeId(v);
            }
        }

        // update associated SplitRatioProfiles
        if (collSplitRatioProfiless != null)
        {
            for (int i = 0; i < collSplitRatioProfiless.size(); i++)
            {
                ((SplitRatioProfiles) collSplitRatioProfiless.get(i))
                        .setNodeId(v);
            }
        }
    }

    /**
     * Get the NetworkId
     *
     * @return Long
     */
    public Long getNetworkId()
    {
        return networkId;
    }


    /**
     * Set the value of NetworkId
     *
     * @param v new value
     */
    public void setNetworkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.networkId, v))
        {
            this.networkId = v;
            setModified(true);
        }


        if (aNetworks != null && !ObjectUtils.equals(aNetworks.getId(), v))
        {
            aNetworks = null;
        }


        // update associated NodeName
        if (collNodeNames != null)
        {
            for (int i = 0; i < collNodeNames.size(); i++)
            {
                ((NodeName) collNodeNames.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated NodeType
        if (collNodeTypes != null)
        {
            for (int i = 0; i < collNodeTypes.size(); i++)
            {
                ((NodeType) collNodeTypes.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated Postmiles
        if (collPostmiless != null)
        {
            for (int i = 0; i < collPostmiless.size(); i++)
            {
                ((Postmiles) collPostmiless.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated SplitRatioProfiles
        if (collSplitRatioProfiless != null)
        {
            for (int i = 0; i < collSplitRatioProfiless.size(); i++)
            {
                ((SplitRatioProfiles) collSplitRatioProfiless.get(i))
                        .setNetworkId(v);
            }
        }
    }

    /**
     * Get the Geom
     *
     * @return String
     */
    public String getGeom()
    {
        return geom;
    }


    /**
     * Set the value of Geom
     *
     * @param v new value
     */
    public void setGeom(String v) 
    {

        if (!ObjectUtils.equals(this.geom, v))
        {
            this.geom = v;
            setModified(true);
        }


    }

    /**
     * Get the InSynch
     *
     * @return Boolean
     */
    public Boolean getInSynch()
    {
        return inSynch;
    }


    /**
     * Set the value of InSynch
     *
     * @param v new value
     */
    public void setInSynch(Boolean v) 
    {

        if (!ObjectUtils.equals(this.inSynch, v))
        {
            this.inSynch = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private NodeFamilies aNodeFamilies;

    /**
     * Declares an association between this object and a NodeFamilies object
     *
     * @param v NodeFamilies
     * @throws TorqueException
     */
    public void setNodeFamilies(NodeFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setId((Long) null);
        }
        else
        {
            setId(v.getId());
        }
        aNodeFamilies = v;
    }


    /**
     * Returns the associated NodeFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamilies()
        throws TorqueException
    {
        if (aNodeFamilies == null && (!ObjectUtils.equals(this.id, null)))
        {
            aNodeFamilies = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.id));
        }
        return aNodeFamilies;
    }

    /**
     * Return the associated NodeFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamilies(Connection connection)
        throws TorqueException
    {
        if (aNodeFamilies == null && (!ObjectUtils.equals(this.id, null)))
        {
            aNodeFamilies = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.id), connection);
        }
        return aNodeFamilies;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNodeFamiliesKey(ObjectKey key) throws TorqueException
    {

        setId(new Long(((NumberKey) key).longValue()));
    }




    private Networks aNetworks;

    /**
     * Declares an association between this object and a Networks object
     *
     * @param v Networks
     * @throws TorqueException
     */
    public void setNetworks(Networks v) throws TorqueException
    {
        if (v == null)
        {
            setNetworkId((Long) null);
        }
        else
        {
            setNetworkId(v.getId());
        }
        aNetworks = v;
    }


    /**
     * Returns the associated Networks object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks()
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId));
        }
        return aNetworks;
    }

    /**
     * Return the associated Networks object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks(Connection connection)
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId), connection);
        }
        return aNetworks;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNetworksKey(ObjectKey key) throws TorqueException
    {

        setNetworkId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collNodeNames
     */
    protected List collNodeNames;

    /**
     * Temporary storage of collNodeNames to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNodeNames()
    {
        if (collNodeNames == null)
        {
            collNodeNames = new ArrayList();
        }
    }


    /**
     * Method called to associate a NodeName object to this object
     * through the NodeName foreign key attribute
     *
     * @param l NodeName
     * @throws TorqueException
     */
    public void addNodeName(NodeName l) throws TorqueException
    {
        getNodeNames().add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * Method called to associate a NodeName object to this object
     * through the NodeName foreign key attribute using connection.
     *
     * @param l NodeName
     * @throws TorqueException
     */
    public void addNodeName(NodeName l, Connection con) throws TorqueException
    {
        getNodeNames(con).add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * The criteria used to select the current contents of collNodeNames
     */
    private Criteria lastNodeNamesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodeNames(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNodeNames()
        throws TorqueException
    {
        if (collNodeNames == null)
        {
            collNodeNames = getNodeNames(new Criteria(10));
        }
        return collNodeNames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related NodeNames from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNodeNames(Criteria criteria) throws TorqueException
    {
        if (collNodeNames == null)
        {
            if (isNew())
            {
               collNodeNames = new ArrayList();
            }
            else
            {
                criteria.add(NodeNamePeer.ID, getId() );
                criteria.add(NodeNamePeer.NETWORK_ID, getNetworkId() );
                collNodeNames = NodeNamePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NodeNamePeer.ID, getId());
                criteria.add(NodeNamePeer.NETWORK_ID, getNetworkId());
                if (!lastNodeNamesCriteria.equals(criteria))
                {
                    collNodeNames = NodeNamePeer.doSelect(criteria);
                }
            }
        }
        lastNodeNamesCriteria = criteria;

        return collNodeNames;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodeNames(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodeNames(Connection con) throws TorqueException
    {
        if (collNodeNames == null)
        {
            collNodeNames = getNodeNames(new Criteria(10), con);
        }
        return collNodeNames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related NodeNames from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodeNames(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNodeNames == null)
        {
            if (isNew())
            {
               collNodeNames = new ArrayList();
            }
            else
            {
                 criteria.add(NodeNamePeer.ID, getId());
                 criteria.add(NodeNamePeer.NETWORK_ID, getNetworkId());
                 collNodeNames = NodeNamePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NodeNamePeer.ID, getId());
                 criteria.add(NodeNamePeer.NETWORK_ID, getNetworkId());
                 if (!lastNodeNamesCriteria.equals(criteria))
                 {
                     collNodeNames = NodeNamePeer.doSelect(criteria, con);
                 }
             }
         }
         lastNodeNamesCriteria = criteria;

         return collNodeNames;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related NodeNames from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getNodeNamesJoinNodes(Criteria criteria)
        throws TorqueException
    {
        if (collNodeNames == null)
        {
            if (isNew())
            {
               collNodeNames = new ArrayList();
            }
            else
            {
                criteria.add(NodeNamePeer.ID, getId());
                criteria.add(NodeNamePeer.NETWORK_ID, getNetworkId());
                collNodeNames = NodeNamePeer.doSelectJoinNodes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NodeNamePeer.ID, getId());
            criteria.add(NodeNamePeer.NETWORK_ID, getNetworkId());
            if (!lastNodeNamesCriteria.equals(criteria))
            {
                collNodeNames = NodeNamePeer.doSelectJoinNodes(criteria);
            }
        }
        lastNodeNamesCriteria = criteria;

        return collNodeNames;
    }





    /**
     * Collection to store aggregation of collNodeTypes
     */
    protected List collNodeTypes;

    /**
     * Temporary storage of collNodeTypes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNodeTypes()
    {
        if (collNodeTypes == null)
        {
            collNodeTypes = new ArrayList();
        }
    }


    /**
     * Method called to associate a NodeType object to this object
     * through the NodeType foreign key attribute
     *
     * @param l NodeType
     * @throws TorqueException
     */
    public void addNodeType(NodeType l) throws TorqueException
    {
        getNodeTypes().add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * Method called to associate a NodeType object to this object
     * through the NodeType foreign key attribute using connection.
     *
     * @param l NodeType
     * @throws TorqueException
     */
    public void addNodeType(NodeType l, Connection con) throws TorqueException
    {
        getNodeTypes(con).add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * The criteria used to select the current contents of collNodeTypes
     */
    private Criteria lastNodeTypesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodeTypes(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNodeTypes()
        throws TorqueException
    {
        if (collNodeTypes == null)
        {
            collNodeTypes = getNodeTypes(new Criteria(10));
        }
        return collNodeTypes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related NodeTypes from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNodeTypes(Criteria criteria) throws TorqueException
    {
        if (collNodeTypes == null)
        {
            if (isNew())
            {
               collNodeTypes = new ArrayList();
            }
            else
            {
                criteria.add(NodeTypePeer.ID, getId() );
                criteria.add(NodeTypePeer.NETWORK_ID, getNetworkId() );
                collNodeTypes = NodeTypePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NodeTypePeer.ID, getId());
                criteria.add(NodeTypePeer.NETWORK_ID, getNetworkId());
                if (!lastNodeTypesCriteria.equals(criteria))
                {
                    collNodeTypes = NodeTypePeer.doSelect(criteria);
                }
            }
        }
        lastNodeTypesCriteria = criteria;

        return collNodeTypes;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNodeTypes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodeTypes(Connection con) throws TorqueException
    {
        if (collNodeTypes == null)
        {
            collNodeTypes = getNodeTypes(new Criteria(10), con);
        }
        return collNodeTypes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related NodeTypes from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNodeTypes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNodeTypes == null)
        {
            if (isNew())
            {
               collNodeTypes = new ArrayList();
            }
            else
            {
                 criteria.add(NodeTypePeer.ID, getId());
                 criteria.add(NodeTypePeer.NETWORK_ID, getNetworkId());
                 collNodeTypes = NodeTypePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NodeTypePeer.ID, getId());
                 criteria.add(NodeTypePeer.NETWORK_ID, getNetworkId());
                 if (!lastNodeTypesCriteria.equals(criteria))
                 {
                     collNodeTypes = NodeTypePeer.doSelect(criteria, con);
                 }
             }
         }
         lastNodeTypesCriteria = criteria;

         return collNodeTypes;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related NodeTypes from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getNodeTypesJoinNodes(Criteria criteria)
        throws TorqueException
    {
        if (collNodeTypes == null)
        {
            if (isNew())
            {
               collNodeTypes = new ArrayList();
            }
            else
            {
                criteria.add(NodeTypePeer.ID, getId());
                criteria.add(NodeTypePeer.NETWORK_ID, getNetworkId());
                collNodeTypes = NodeTypePeer.doSelectJoinNodes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NodeTypePeer.ID, getId());
            criteria.add(NodeTypePeer.NETWORK_ID, getNetworkId());
            if (!lastNodeTypesCriteria.equals(criteria))
            {
                collNodeTypes = NodeTypePeer.doSelectJoinNodes(criteria);
            }
        }
        lastNodeTypesCriteria = criteria;

        return collNodeTypes;
    }





    /**
     * Collection to store aggregation of collPostmiless
     */
    protected List collPostmiless;

    /**
     * Temporary storage of collPostmiless to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPostmiless()
    {
        if (collPostmiless == null)
        {
            collPostmiless = new ArrayList();
        }
    }


    /**
     * Method called to associate a Postmiles object to this object
     * through the Postmiles foreign key attribute
     *
     * @param l Postmiles
     * @throws TorqueException
     */
    public void addPostmiles(Postmiles l) throws TorqueException
    {
        getPostmiless().add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * Method called to associate a Postmiles object to this object
     * through the Postmiles foreign key attribute using connection.
     *
     * @param l Postmiles
     * @throws TorqueException
     */
    public void addPostmiles(Postmiles l, Connection con) throws TorqueException
    {
        getPostmiless(con).add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * The criteria used to select the current contents of collPostmiless
     */
    private Criteria lastPostmilessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPostmiless(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getPostmiless()
        throws TorqueException
    {
        if (collPostmiless == null)
        {
            collPostmiless = getPostmiless(new Criteria(10));
        }
        return collPostmiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related Postmiless from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPostmiless(Criteria criteria) throws TorqueException
    {
        if (collPostmiless == null)
        {
            if (isNew())
            {
               collPostmiless = new ArrayList();
            }
            else
            {
                criteria.add(PostmilesPeer.NODE_ID, getId() );
                criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId() );
                collPostmiless = PostmilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(PostmilesPeer.NODE_ID, getId());
                criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
                if (!lastPostmilessCriteria.equals(criteria))
                {
                    collPostmiless = PostmilesPeer.doSelect(criteria);
                }
            }
        }
        lastPostmilessCriteria = criteria;

        return collPostmiless;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPostmiless(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPostmiless(Connection con) throws TorqueException
    {
        if (collPostmiless == null)
        {
            collPostmiless = getPostmiless(new Criteria(10), con);
        }
        return collPostmiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related Postmiless from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPostmiless(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPostmiless == null)
        {
            if (isNew())
            {
               collPostmiless = new ArrayList();
            }
            else
            {
                 criteria.add(PostmilesPeer.NODE_ID, getId());
                 criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
                 collPostmiless = PostmilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(PostmilesPeer.NODE_ID, getId());
                 criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
                 if (!lastPostmilessCriteria.equals(criteria))
                 {
                     collPostmiless = PostmilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPostmilessCriteria = criteria;

         return collPostmiless;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related Postmiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getPostmilessJoinNodes(Criteria criteria)
        throws TorqueException
    {
        if (collPostmiless == null)
        {
            if (isNew())
            {
               collPostmiless = new ArrayList();
            }
            else
            {
                criteria.add(PostmilesPeer.NODE_ID, getId());
                criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
                collPostmiless = PostmilesPeer.doSelectJoinNodes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(PostmilesPeer.NODE_ID, getId());
            criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
            if (!lastPostmilessCriteria.equals(criteria))
            {
                collPostmiless = PostmilesPeer.doSelectJoinNodes(criteria);
            }
        }
        lastPostmilessCriteria = criteria;

        return collPostmiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related Postmiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getPostmilessJoinPostmileHighways(Criteria criteria)
        throws TorqueException
    {
        if (collPostmiless == null)
        {
            if (isNew())
            {
               collPostmiless = new ArrayList();
            }
            else
            {
                criteria.add(PostmilesPeer.NODE_ID, getId());
                criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
                collPostmiless = PostmilesPeer.doSelectJoinPostmileHighways(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(PostmilesPeer.NODE_ID, getId());
            criteria.add(PostmilesPeer.NETWORK_ID, getNetworkId());
            if (!lastPostmilessCriteria.equals(criteria))
            {
                collPostmiless = PostmilesPeer.doSelectJoinPostmileHighways(criteria);
            }
        }
        lastPostmilessCriteria = criteria;

        return collPostmiless;
    }





    /**
     * Collection to store aggregation of collSplitRatioProfiless
     */
    protected List collSplitRatioProfiless;

    /**
     * Temporary storage of collSplitRatioProfiless to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSplitRatioProfiless()
    {
        if (collSplitRatioProfiless == null)
        {
            collSplitRatioProfiless = new ArrayList();
        }
    }


    /**
     * Method called to associate a SplitRatioProfiles object to this object
     * through the SplitRatioProfiles foreign key attribute
     *
     * @param l SplitRatioProfiles
     * @throws TorqueException
     */
    public void addSplitRatioProfiles(SplitRatioProfiles l) throws TorqueException
    {
        getSplitRatioProfiless().add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * Method called to associate a SplitRatioProfiles object to this object
     * through the SplitRatioProfiles foreign key attribute using connection.
     *
     * @param l SplitRatioProfiles
     * @throws TorqueException
     */
    public void addSplitRatioProfiles(SplitRatioProfiles l, Connection con) throws TorqueException
    {
        getSplitRatioProfiless(con).add(l);
        l.setNodes((Nodes) this);
    }

    /**
     * The criteria used to select the current contents of collSplitRatioProfiless
     */
    private Criteria lastSplitRatioProfilessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatioProfiless(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSplitRatioProfiless()
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            collSplitRatioProfiless = getSplitRatioProfiless(new Criteria(10));
        }
        return collSplitRatioProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSplitRatioProfiless(Criteria criteria) throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.NODE_ID, getId() );
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId() );
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                if (!lastSplitRatioProfilessCriteria.equals(criteria))
                {
                    collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria);
                }
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatioProfiless(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatioProfiless(Connection con) throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            collSplitRatioProfiless = getSplitRatioProfiless(new Criteria(10), con);
        }
        return collSplitRatioProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     * If this Nodes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatioProfiless(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                 criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
                 criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                 collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
                 criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                 if (!lastSplitRatioProfilessCriteria.equals(criteria))
                 {
                     collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSplitRatioProfilessCriteria = criteria;

         return collSplitRatioProfiless;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getSplitRatioProfilessJoinSplitRatioProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinSplitRatioProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
            criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
            if (!lastSplitRatioProfilessCriteria.equals(criteria))
            {
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinSplitRatioProfileSets(criteria);
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getSplitRatioProfilessJoinNodes(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinNodes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
            criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
            if (!lastSplitRatioProfilessCriteria.equals(criteria))
            {
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinNodes(criteria);
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Nodes is new, it will return
     * an empty collection; or if this Nodes has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Nodes.
     */
    protected List getSplitRatioProfilessJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatioProfilesPeer.NODE_ID, getId());
            criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
            if (!lastSplitRatioProfilessCriteria.equals(criteria))
            {
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinLinks(criteria);
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("NetworkId");
            fieldNames.add("Geom");
            fieldNames.add("InSynch");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("NetworkId"))
        {
            return getNetworkId();
        }
        if (name.equals("Geom"))
        {
            return getGeom();
        }
        if (name.equals("InSynch"))
        {
            return getInSynch();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("NetworkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNetworkId((Long) value);
            return true;
        }
        if (name.equals("Geom"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setGeom((String) value);
            return true;
        }
        if (name.equals("InSynch"))
        {
            // Object fields can be null
            if (value != null && ! Boolean.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setInSynch((Boolean) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(NodesPeer.ID))
        {
            return getId();
        }
        if (name.equals(NodesPeer.NETWORK_ID))
        {
            return getNetworkId();
        }
        if (name.equals(NodesPeer.GEOM))
        {
            return getGeom();
        }
        if (name.equals(NodesPeer.IN_SYNCH))
        {
            return getInSynch();
        }
        if (name.equals(NodesPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(NodesPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(NodesPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(NodesPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(NodesPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (NodesPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (NodesPeer.NETWORK_ID.equals(name))
        {
            return setByName("NetworkId", value);
        }
      if (NodesPeer.GEOM.equals(name))
        {
            return setByName("Geom", value);
        }
      if (NodesPeer.IN_SYNCH.equals(name))
        {
            return setByName("InSynch", value);
        }
      if (NodesPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (NodesPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (NodesPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (NodesPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (NodesPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getNetworkId();
        }
        if (pos == 2)
        {
            return getGeom();
        }
        if (pos == 3)
        {
            return getInSynch();
        }
        if (pos == 4)
        {
            return getCreated();
        }
        if (pos == 5)
        {
            return getModified();
        }
        if (pos == 6)
        {
            return getCreatedBy();
        }
        if (pos == 7)
        {
            return getModifiedBy();
        }
        if (pos == 8)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("NetworkId", value);
        }
    if (position == 2)
        {
            return setByName("Geom", value);
        }
    if (position == 3)
        {
            return setByName("InSynch", value);
        }
    if (position == 4)
        {
            return setByName("Created", value);
        }
    if (position == 5)
        {
            return setByName("Modified", value);
        }
    if (position == 6)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 7)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 8)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(NodesPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    NodesPeer.doInsert((Nodes) this, con);
                    setNew(false);
                }
                else
                {
                    NodesPeer.doUpdate((Nodes) this, con);
                }
            }


            if (collNodeNames != null)
            {
                for (int i = 0; i < collNodeNames.size(); i++)
                {
                    ((NodeName) collNodeNames.get(i)).save(con);
                }
            }

            if (collNodeTypes != null)
            {
                for (int i = 0; i < collNodeTypes.size(); i++)
                {
                    ((NodeType) collNodeTypes.get(i)).save(con);
                }
            }

            if (collPostmiless != null)
            {
                for (int i = 0; i < collPostmiless.size(); i++)
                {
                    ((Postmiles) collPostmiless.get(i)).save(con);
                }
            }

            if (collSplitRatioProfiless != null)
            {
                for (int i = 0; i < collSplitRatioProfiless.size(); i++)
                {
                    ((SplitRatioProfiles) collSplitRatioProfiless.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setId(new Long(((NumberKey)keys[0]).longValue()));
        setNetworkId(new Long(((NumberKey)keys[1]).longValue()));
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param id Long
     * @param networkId Long
     */
    public void setPrimaryKey( Long id, Long networkId)
        throws TorqueException
    {
        setId(id);
        setNetworkId(networkId);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getId());
        pks[1] = SimpleKey.keyFor(getNetworkId());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Nodes copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Nodes copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Nodes copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Nodes(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Nodes copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Nodes(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Nodes copyInto(Nodes copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Nodes copyInto(Nodes copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Nodes copyInto(Nodes copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setNetworkId(networkId);
        copyObj.setGeom(geom);
        copyObj.setInSynch(inSynch);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);
        copyObj.setNetworkId((Long)null);

        if (deepcopy)
        {


        List vNodeNames = getNodeNames();
        if (vNodeNames != null)
        {
            for (int i = 0; i < vNodeNames.size(); i++)
            {
                NodeName obj = (NodeName) vNodeNames.get(i);
                copyObj.addNodeName(obj.copy());
            }
        }
        else
        {
            copyObj.collNodeNames = null;
        }


        List vNodeTypes = getNodeTypes();
        if (vNodeTypes != null)
        {
            for (int i = 0; i < vNodeTypes.size(); i++)
            {
                NodeType obj = (NodeType) vNodeTypes.get(i);
                copyObj.addNodeType(obj.copy());
            }
        }
        else
        {
            copyObj.collNodeTypes = null;
        }


        List vPostmiless = getPostmiless();
        if (vPostmiless != null)
        {
            for (int i = 0; i < vPostmiless.size(); i++)
            {
                Postmiles obj = (Postmiles) vPostmiless.get(i);
                copyObj.addPostmiles(obj.copy());
            }
        }
        else
        {
            copyObj.collPostmiless = null;
        }


        List vSplitRatioProfiless = getSplitRatioProfiless();
        if (vSplitRatioProfiless != null)
        {
            for (int i = 0; i < vSplitRatioProfiless.size(); i++)
            {
                SplitRatioProfiles obj = (SplitRatioProfiles) vSplitRatioProfiless.get(i);
                copyObj.addSplitRatioProfiles(obj.copy());
            }
        }
        else
        {
            copyObj.collSplitRatioProfiless = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Nodes copyInto(Nodes copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setNetworkId(networkId);
        copyObj.setGeom(geom);
        copyObj.setInSynch(inSynch);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);
        copyObj.setNetworkId((Long)null);

        if (deepcopy)
        {


        List vNodeNames = getNodeNames(con);
        if (vNodeNames != null)
        {
            for (int i = 0; i < vNodeNames.size(); i++)
            {
                NodeName obj = (NodeName) vNodeNames.get(i);
                copyObj.addNodeName(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNodeNames = null;
        }


        List vNodeTypes = getNodeTypes(con);
        if (vNodeTypes != null)
        {
            for (int i = 0; i < vNodeTypes.size(); i++)
            {
                NodeType obj = (NodeType) vNodeTypes.get(i);
                copyObj.addNodeType(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNodeTypes = null;
        }


        List vPostmiless = getPostmiless(con);
        if (vPostmiless != null)
        {
            for (int i = 0; i < vPostmiless.size(); i++)
            {
                Postmiles obj = (Postmiles) vPostmiless.get(i);
                copyObj.addPostmiles(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collPostmiless = null;
        }


        List vSplitRatioProfiless = getSplitRatioProfiless(con);
        if (vSplitRatioProfiless != null)
        {
            for (int i = 0; i < vSplitRatioProfiless.size(); i++)
            {
                SplitRatioProfiles obj = (SplitRatioProfiles) vSplitRatioProfiless.get(i);
                copyObj.addSplitRatioProfiles(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSplitRatioProfiless = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public NodesPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return NodesPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Nodes:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("NetworkId = ")
           .append(getNetworkId())
           .append("\n");
        str.append("Geom = ")
           .append(getGeom())
           .append("\n");
        str.append("InSynch = ")
           .append(getInSynch())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
