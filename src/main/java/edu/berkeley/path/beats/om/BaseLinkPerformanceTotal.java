package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to LinkPerformanceTotal
 */
public abstract class BaseLinkPerformanceTotal extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final LinkPerformanceTotalPeer peer =
        new LinkPerformanceTotalPeer();


    /** The value for the networkId field */
    private Long networkId;

    /** The value for the linkId field */
    private Long linkId;

    /** The value for the dataSourceId field */
    private Long dataSourceId;

    /** The value for the ts field */
    private Date ts;

    /** The value for the aggregation field */
    private String aggregation;

    /** The value for the type field */
    private String type;

    /** The value for the cellNumber field */
    private Integer cellNumber;

    /** The value for the vmt field */
    private BigDecimal vmt;

    /** The value for the vht field */
    private BigDecimal vht;

    /** The value for the delay field */
    private BigDecimal delay;

    /** The value for the travelTime field */
    private BigDecimal travelTime;

    /** The value for the productivityLoss field */
    private BigDecimal productivityLoss;

    /** The value for the los field */
    private BigDecimal los;

    /** The value for the vcRatio field */
    private BigDecimal vcRatio;


    /**
     * Get the NetworkId
     *
     * @return Long
     */
    public Long getNetworkId()
    {
        return networkId;
    }


    /**
     * Set the value of NetworkId
     *
     * @param v new value
     */
    public void setNetworkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.networkId, v))
        {
            this.networkId = v;
            setModified(true);
        }


        if (aLinks != null && !ObjectUtils.equals(aLinks.getNetworkId(), v))
        {
            aLinks = null;
        }

    }

    /**
     * Get the LinkId
     *
     * @return Long
     */
    public Long getLinkId()
    {
        return linkId;
    }


    /**
     * Set the value of LinkId
     *
     * @param v new value
     */
    public void setLinkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.linkId, v))
        {
            this.linkId = v;
            setModified(true);
        }


        if (aLinks != null && !ObjectUtils.equals(aLinks.getId(), v))
        {
            aLinks = null;
        }

    }

    /**
     * Get the DataSourceId
     *
     * @return Long
     */
    public Long getDataSourceId()
    {
        return dataSourceId;
    }


    /**
     * Set the value of DataSourceId
     *
     * @param v new value
     */
    public void setDataSourceId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.dataSourceId, v))
        {
            this.dataSourceId = v;
            setModified(true);
        }


        if (aDataSources != null && !ObjectUtils.equals(aDataSources.getId(), v))
        {
            aDataSources = null;
        }

    }

    /**
     * Get the Ts
     *
     * @return Date
     */
    public Date getTs()
    {
        return ts;
    }


    /**
     * Set the value of Ts
     *
     * @param v new value
     */
    public void setTs(Date v) 
    {

        if (!ObjectUtils.equals(this.ts, v))
        {
            this.ts = v;
            setModified(true);
        }


    }

    /**
     * Get the Aggregation
     *
     * @return String
     */
    public String getAggregation()
    {
        return aggregation;
    }


    /**
     * Set the value of Aggregation
     *
     * @param v new value
     */
    public void setAggregation(String v) 
    {

        if (!ObjectUtils.equals(this.aggregation, v))
        {
            this.aggregation = v;
            setModified(true);
        }


    }

    /**
     * Get the Type
     *
     * @return String
     */
    public String getType()
    {
        return type;
    }


    /**
     * Set the value of Type
     *
     * @param v new value
     */
    public void setType(String v) 
    {

        if (!ObjectUtils.equals(this.type, v))
        {
            this.type = v;
            setModified(true);
        }


    }

    /**
     * Get the CellNumber
     *
     * @return Integer
     */
    public Integer getCellNumber()
    {
        return cellNumber;
    }


    /**
     * Set the value of CellNumber
     *
     * @param v new value
     */
    public void setCellNumber(Integer v) 
    {

        if (!ObjectUtils.equals(this.cellNumber, v))
        {
            this.cellNumber = v;
            setModified(true);
        }


    }

    /**
     * Get the Vmt
     *
     * @return BigDecimal
     */
    public BigDecimal getVmt()
    {
        return vmt;
    }


    /**
     * Set the value of Vmt
     *
     * @param v new value
     */
    public void setVmt(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.vmt, v))
        {
            this.vmt = v;
            setModified(true);
        }


    }

    /**
     * Get the Vht
     *
     * @return BigDecimal
     */
    public BigDecimal getVht()
    {
        return vht;
    }


    /**
     * Set the value of Vht
     *
     * @param v new value
     */
    public void setVht(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.vht, v))
        {
            this.vht = v;
            setModified(true);
        }


    }

    /**
     * Get the Delay
     *
     * @return BigDecimal
     */
    public BigDecimal getDelay()
    {
        return delay;
    }


    /**
     * Set the value of Delay
     *
     * @param v new value
     */
    public void setDelay(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.delay, v))
        {
            this.delay = v;
            setModified(true);
        }


    }

    /**
     * Get the TravelTime
     *
     * @return BigDecimal
     */
    public BigDecimal getTravelTime()
    {
        return travelTime;
    }


    /**
     * Set the value of TravelTime
     *
     * @param v new value
     */
    public void setTravelTime(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.travelTime, v))
        {
            this.travelTime = v;
            setModified(true);
        }


    }

    /**
     * Get the ProductivityLoss
     *
     * @return BigDecimal
     */
    public BigDecimal getProductivityLoss()
    {
        return productivityLoss;
    }


    /**
     * Set the value of ProductivityLoss
     *
     * @param v new value
     */
    public void setProductivityLoss(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.productivityLoss, v))
        {
            this.productivityLoss = v;
            setModified(true);
        }


    }

    /**
     * Get the Los
     *
     * @return BigDecimal
     */
    public BigDecimal getLos()
    {
        return los;
    }


    /**
     * Set the value of Los
     *
     * @param v new value
     */
    public void setLos(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.los, v))
        {
            this.los = v;
            setModified(true);
        }


    }

    /**
     * Get the VcRatio
     *
     * @return BigDecimal
     */
    public BigDecimal getVcRatio()
    {
        return vcRatio;
    }


    /**
     * Set the value of VcRatio
     *
     * @param v new value
     */
    public void setVcRatio(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.vcRatio, v))
        {
            this.vcRatio = v;
            setModified(true);
        }


    }

    



    private Links aLinks;

    /**
     * Declares an association between this object and a Links object
     *
     * @param v Links
     * @throws TorqueException
     */
    public void setLinks(Links v) throws TorqueException
    {
        if (v == null)
        {
            setLinkId((Long) null);
        }
        else
        {
            setLinkId(v.getId());
        }
        if (v == null)
        {
            setNetworkId((Long) null);
        }
        else
        {
            setNetworkId(v.getNetworkId());
        }
        aLinks = v;
    }


    /**
     * Returns the associated Links object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Links object
     * @throws TorqueException
     */
    public Links getLinks()
        throws TorqueException
    {
        if (aLinks == null && (!ObjectUtils.equals(this.linkId, null) && !ObjectUtils.equals(this.networkId, null)))
        {
            aLinks = LinksPeer.retrieveByPK(this.linkId, this.networkId);
        }
        return aLinks;
    }

    /**
     * Return the associated Links object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Links object
     * @throws TorqueException
     */
    public Links getLinks(Connection connection)
        throws TorqueException
    {
        if (aLinks == null && (!ObjectUtils.equals(this.linkId, null) && !ObjectUtils.equals(this.networkId, null)))
        {
            aLinks = LinksPeer.retrieveByPK(this.linkId, this.networkId, connection);
        }
        return aLinks;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     * Note: It is important that the xml schema used to create this class
     * maintains consistency in the order of related columns between
     * link_performance_total and links.
     * If for some reason this is impossible, this method should be
     * overridden in <code>LinkPerformanceTotal</code>.
     */
    public void setLinksKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();

        setLinkId(new Long(((NumberKey) keys[0]).longValue()));

        setNetworkId(new Long(((NumberKey) keys[1]).longValue()));
    }




    private DataSources aDataSources;

    /**
     * Declares an association between this object and a DataSources object
     *
     * @param v DataSources
     * @throws TorqueException
     */
    public void setDataSources(DataSources v) throws TorqueException
    {
        if (v == null)
        {
            setDataSourceId((Long) null);
        }
        else
        {
            setDataSourceId(v.getId());
        }
        aDataSources = v;
    }


    /**
     * Returns the associated DataSources object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources()
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId));
        }
        return aDataSources;
    }

    /**
     * Return the associated DataSources object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources(Connection connection)
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId), connection);
        }
        return aDataSources;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDataSourcesKey(ObjectKey key) throws TorqueException
    {

        setDataSourceId(new Long(((NumberKey) key).longValue()));
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("NetworkId");
            fieldNames.add("LinkId");
            fieldNames.add("DataSourceId");
            fieldNames.add("Ts");
            fieldNames.add("Aggregation");
            fieldNames.add("Type");
            fieldNames.add("CellNumber");
            fieldNames.add("Vmt");
            fieldNames.add("Vht");
            fieldNames.add("Delay");
            fieldNames.add("TravelTime");
            fieldNames.add("ProductivityLoss");
            fieldNames.add("Los");
            fieldNames.add("VcRatio");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("NetworkId"))
        {
            return getNetworkId();
        }
        if (name.equals("LinkId"))
        {
            return getLinkId();
        }
        if (name.equals("DataSourceId"))
        {
            return getDataSourceId();
        }
        if (name.equals("Ts"))
        {
            return getTs();
        }
        if (name.equals("Aggregation"))
        {
            return getAggregation();
        }
        if (name.equals("Type"))
        {
            return getType();
        }
        if (name.equals("CellNumber"))
        {
            return getCellNumber();
        }
        if (name.equals("Vmt"))
        {
            return getVmt();
        }
        if (name.equals("Vht"))
        {
            return getVht();
        }
        if (name.equals("Delay"))
        {
            return getDelay();
        }
        if (name.equals("TravelTime"))
        {
            return getTravelTime();
        }
        if (name.equals("ProductivityLoss"))
        {
            return getProductivityLoss();
        }
        if (name.equals("Los"))
        {
            return getLos();
        }
        if (name.equals("VcRatio"))
        {
            return getVcRatio();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("NetworkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNetworkId((Long) value);
            return true;
        }
        if (name.equals("LinkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLinkId((Long) value);
            return true;
        }
        if (name.equals("DataSourceId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDataSourceId((Long) value);
            return true;
        }
        if (name.equals("Ts"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setTs((Date) value);
            return true;
        }
        if (name.equals("Aggregation"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setAggregation((String) value);
            return true;
        }
        if (name.equals("Type"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setType((String) value);
            return true;
        }
        if (name.equals("CellNumber"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCellNumber((Integer) value);
            return true;
        }
        if (name.equals("Vmt"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVmt((BigDecimal) value);
            return true;
        }
        if (name.equals("Vht"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVht((BigDecimal) value);
            return true;
        }
        if (name.equals("Delay"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDelay((BigDecimal) value);
            return true;
        }
        if (name.equals("TravelTime"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setTravelTime((BigDecimal) value);
            return true;
        }
        if (name.equals("ProductivityLoss"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setProductivityLoss((BigDecimal) value);
            return true;
        }
        if (name.equals("Los"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLos((BigDecimal) value);
            return true;
        }
        if (name.equals("VcRatio"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVcRatio((BigDecimal) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(LinkPerformanceTotalPeer.NETWORK_ID))
        {
            return getNetworkId();
        }
        if (name.equals(LinkPerformanceTotalPeer.LINK_ID))
        {
            return getLinkId();
        }
        if (name.equals(LinkPerformanceTotalPeer.DATA_SOURCE_ID))
        {
            return getDataSourceId();
        }
        if (name.equals(LinkPerformanceTotalPeer.TS))
        {
            return getTs();
        }
        if (name.equals(LinkPerformanceTotalPeer.AGGREGATION))
        {
            return getAggregation();
        }
        if (name.equals(LinkPerformanceTotalPeer.TYPE))
        {
            return getType();
        }
        if (name.equals(LinkPerformanceTotalPeer.CELL_NUMBER))
        {
            return getCellNumber();
        }
        if (name.equals(LinkPerformanceTotalPeer.VMT))
        {
            return getVmt();
        }
        if (name.equals(LinkPerformanceTotalPeer.VHT))
        {
            return getVht();
        }
        if (name.equals(LinkPerformanceTotalPeer.DELAY))
        {
            return getDelay();
        }
        if (name.equals(LinkPerformanceTotalPeer.TRAVEL_TIME))
        {
            return getTravelTime();
        }
        if (name.equals(LinkPerformanceTotalPeer.PRODUCTIVITY_LOSS))
        {
            return getProductivityLoss();
        }
        if (name.equals(LinkPerformanceTotalPeer.LOS))
        {
            return getLos();
        }
        if (name.equals(LinkPerformanceTotalPeer.VC_RATIO))
        {
            return getVcRatio();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (LinkPerformanceTotalPeer.NETWORK_ID.equals(name))
        {
            return setByName("NetworkId", value);
        }
      if (LinkPerformanceTotalPeer.LINK_ID.equals(name))
        {
            return setByName("LinkId", value);
        }
      if (LinkPerformanceTotalPeer.DATA_SOURCE_ID.equals(name))
        {
            return setByName("DataSourceId", value);
        }
      if (LinkPerformanceTotalPeer.TS.equals(name))
        {
            return setByName("Ts", value);
        }
      if (LinkPerformanceTotalPeer.AGGREGATION.equals(name))
        {
            return setByName("Aggregation", value);
        }
      if (LinkPerformanceTotalPeer.TYPE.equals(name))
        {
            return setByName("Type", value);
        }
      if (LinkPerformanceTotalPeer.CELL_NUMBER.equals(name))
        {
            return setByName("CellNumber", value);
        }
      if (LinkPerformanceTotalPeer.VMT.equals(name))
        {
            return setByName("Vmt", value);
        }
      if (LinkPerformanceTotalPeer.VHT.equals(name))
        {
            return setByName("Vht", value);
        }
      if (LinkPerformanceTotalPeer.DELAY.equals(name))
        {
            return setByName("Delay", value);
        }
      if (LinkPerformanceTotalPeer.TRAVEL_TIME.equals(name))
        {
            return setByName("TravelTime", value);
        }
      if (LinkPerformanceTotalPeer.PRODUCTIVITY_LOSS.equals(name))
        {
            return setByName("ProductivityLoss", value);
        }
      if (LinkPerformanceTotalPeer.LOS.equals(name))
        {
            return setByName("Los", value);
        }
      if (LinkPerformanceTotalPeer.VC_RATIO.equals(name))
        {
            return setByName("VcRatio", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getNetworkId();
        }
        if (pos == 1)
        {
            return getLinkId();
        }
        if (pos == 2)
        {
            return getDataSourceId();
        }
        if (pos == 3)
        {
            return getTs();
        }
        if (pos == 4)
        {
            return getAggregation();
        }
        if (pos == 5)
        {
            return getType();
        }
        if (pos == 6)
        {
            return getCellNumber();
        }
        if (pos == 7)
        {
            return getVmt();
        }
        if (pos == 8)
        {
            return getVht();
        }
        if (pos == 9)
        {
            return getDelay();
        }
        if (pos == 10)
        {
            return getTravelTime();
        }
        if (pos == 11)
        {
            return getProductivityLoss();
        }
        if (pos == 12)
        {
            return getLos();
        }
        if (pos == 13)
        {
            return getVcRatio();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("NetworkId", value);
        }
    if (position == 1)
        {
            return setByName("LinkId", value);
        }
    if (position == 2)
        {
            return setByName("DataSourceId", value);
        }
    if (position == 3)
        {
            return setByName("Ts", value);
        }
    if (position == 4)
        {
            return setByName("Aggregation", value);
        }
    if (position == 5)
        {
            return setByName("Type", value);
        }
    if (position == 6)
        {
            return setByName("CellNumber", value);
        }
    if (position == 7)
        {
            return setByName("Vmt", value);
        }
    if (position == 8)
        {
            return setByName("Vht", value);
        }
    if (position == 9)
        {
            return setByName("Delay", value);
        }
    if (position == 10)
        {
            return setByName("TravelTime", value);
        }
    if (position == 11)
        {
            return setByName("ProductivityLoss", value);
        }
    if (position == 12)
        {
            return setByName("Los", value);
        }
    if (position == 13)
        {
            return setByName("VcRatio", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(LinkPerformanceTotalPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    LinkPerformanceTotalPeer.doInsert((LinkPerformanceTotal) this, con);
                    setNew(false);
                }
                else
                {
                    LinkPerformanceTotalPeer.doUpdate((LinkPerformanceTotal) this, con);
                }
            }

            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[7];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setNetworkId(new Long(((NumberKey)keys[0]).longValue()));
        setLinkId(new Long(((NumberKey)keys[1]).longValue()));
        setDataSourceId(new Long(((NumberKey)keys[2]).longValue()));
        setTs(((DateKey)keys[3]).getDate());
        setAggregation(keys[4].toString());
        setType(keys[5].toString());
        setCellNumber(new Integer(((NumberKey)keys[6]).intValue()));
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param networkId Long
     * @param linkId Long
     * @param dataSourceId Long
     * @param ts Date
     * @param aggregation String
     * @param type String
     * @param cellNumber Integer
     */
    public void setPrimaryKey( Long networkId, Long linkId, Long dataSourceId, Date ts, String aggregation, String type, Integer cellNumber)
        throws TorqueException
    {
        setNetworkId(networkId);
        setLinkId(linkId);
        setDataSourceId(dataSourceId);
        setTs(ts);
        setAggregation(aggregation);
        setType(type);
        setCellNumber(cellNumber);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getNetworkId());
        pks[1] = SimpleKey.keyFor(getLinkId());
        pks[2] = SimpleKey.keyFor(getDataSourceId());
        pks[3] = SimpleKey.keyFor(getTs());
        pks[4] = SimpleKey.keyFor(getAggregation());
        pks[5] = SimpleKey.keyFor(getType());
        pks[6] = SimpleKey.keyFor(getCellNumber());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public LinkPerformanceTotal copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public LinkPerformanceTotal copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public LinkPerformanceTotal copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new LinkPerformanceTotal(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public LinkPerformanceTotal copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new LinkPerformanceTotal(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected LinkPerformanceTotal copyInto(LinkPerformanceTotal copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected LinkPerformanceTotal copyInto(LinkPerformanceTotal copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected LinkPerformanceTotal copyInto(LinkPerformanceTotal copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setNetworkId(networkId);
        copyObj.setLinkId(linkId);
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setTs(ts);
        copyObj.setAggregation(aggregation);
        copyObj.setType(type);
        copyObj.setCellNumber(cellNumber);
        copyObj.setVmt(vmt);
        copyObj.setVht(vht);
        copyObj.setDelay(delay);
        copyObj.setTravelTime(travelTime);
        copyObj.setProductivityLoss(productivityLoss);
        copyObj.setLos(los);
        copyObj.setVcRatio(vcRatio);

        copyObj.setNetworkId((Long)null);
        copyObj.setLinkId((Long)null);
        copyObj.setDataSourceId((Long)null);
        copyObj.setTs((Date)null);
        copyObj.setAggregation((String)null);
        copyObj.setType((String)null);
        copyObj.setCellNumber((Integer)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected LinkPerformanceTotal copyInto(LinkPerformanceTotal copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setNetworkId(networkId);
        copyObj.setLinkId(linkId);
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setTs(ts);
        copyObj.setAggregation(aggregation);
        copyObj.setType(type);
        copyObj.setCellNumber(cellNumber);
        copyObj.setVmt(vmt);
        copyObj.setVht(vht);
        copyObj.setDelay(delay);
        copyObj.setTravelTime(travelTime);
        copyObj.setProductivityLoss(productivityLoss);
        copyObj.setLos(los);
        copyObj.setVcRatio(vcRatio);

        copyObj.setNetworkId((Long)null);
        copyObj.setLinkId((Long)null);
        copyObj.setDataSourceId((Long)null);
        copyObj.setTs((Date)null);
        copyObj.setAggregation((String)null);
        copyObj.setType((String)null);
        copyObj.setCellNumber((Integer)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LinkPerformanceTotalPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return LinkPerformanceTotalPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("LinkPerformanceTotal:\n");
        str.append("NetworkId = ")
           .append(getNetworkId())
           .append("\n");
        str.append("LinkId = ")
           .append(getLinkId())
           .append("\n");
        str.append("DataSourceId = ")
           .append(getDataSourceId())
           .append("\n");
        str.append("Ts = ")
           .append(getTs())
           .append("\n");
        str.append("Aggregation = ")
           .append(getAggregation())
           .append("\n");
        str.append("Type = ")
           .append(getType())
           .append("\n");
        str.append("CellNumber = ")
           .append(getCellNumber())
           .append("\n");
        str.append("Vmt = ")
           .append(getVmt())
           .append("\n");
        str.append("Vht = ")
           .append(getVht())
           .append("\n");
        str.append("Delay = ")
           .append(getDelay())
           .append("\n");
        str.append("TravelTime = ")
           .append(getTravelTime())
           .append("\n");
        str.append("ProductivityLoss = ")
           .append(getProductivityLoss())
           .append("\n");
        str.append("Los = ")
           .append(getLos())
           .append("\n");
        str.append("VcRatio = ")
           .append(getVcRatio())
           .append("\n");
        return(str.toString());
    }
}
