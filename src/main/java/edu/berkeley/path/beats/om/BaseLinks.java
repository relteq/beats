package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Links
 */
public abstract class BaseLinks extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final LinksPeer peer =
        new LinksPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the networkId field */
    private Long networkId;

    /** The value for the begNodeId field */
    private Long begNodeId;

    /** The value for the endNodeId field */
    private Long endNodeId;

    /** The value for the geom field */
    private String geom;

    /** The value for the length field */
    private BigDecimal length;

    /** The value for the detailLevel field */
    private Integer detailLevel;

    /** The value for the inSynch field */
    private Boolean inSynch;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }


        if (aLinkFamilies != null && !ObjectUtils.equals(aLinkFamilies.getId(), v))
        {
            aLinkFamilies = null;
        }


        // update associated LinkName
        if (collLinkNames != null)
        {
            for (int i = 0; i < collLinkNames.size(); i++)
            {
                ((LinkName) collLinkNames.get(i))
                        .setId(v);
            }
        }

        // update associated LinkType
        if (collLinkTypes != null)
        {
            for (int i = 0; i < collLinkTypes.size(); i++)
            {
                ((LinkType) collLinkTypes.get(i))
                        .setId(v);
            }
        }

        // update associated LinkLanes
        if (collLinkLaness != null)
        {
            for (int i = 0; i < collLinkLaness.size(); i++)
            {
                ((LinkLanes) collLinkLaness.get(i))
                        .setId(v);
            }
        }

        // update associated LinkLaneOffset
        if (collLinkLaneOffsets != null)
        {
            for (int i = 0; i < collLinkLaneOffsets.size(); i++)
            {
                ((LinkLaneOffset) collLinkLaneOffsets.get(i))
                        .setId(v);
            }
        }

        // update associated LinkSpeedLimit
        if (collLinkSpeedLimits != null)
        {
            for (int i = 0; i < collLinkSpeedLimits.size(); i++)
            {
                ((LinkSpeedLimit) collLinkSpeedLimits.get(i))
                        .setId(v);
            }
        }

        // update associated SplitRatioProfiles
        if (collSplitRatioProfiless != null)
        {
            for (int i = 0; i < collSplitRatioProfiless.size(); i++)
            {
                ((SplitRatioProfiles) collSplitRatioProfiless.get(i))
                        .setDestinationLinkId(v);
            }
        }

        // update associated LinkDataTotal
        if (collLinkDataTotals != null)
        {
            for (int i = 0; i < collLinkDataTotals.size(); i++)
            {
                ((LinkDataTotal) collLinkDataTotals.get(i))
                        .setLinkId(v);
            }
        }

        // update associated LinkPerformanceTotal
        if (collLinkPerformanceTotals != null)
        {
            for (int i = 0; i < collLinkPerformanceTotals.size(); i++)
            {
                ((LinkPerformanceTotal) collLinkPerformanceTotals.get(i))
                        .setLinkId(v);
            }
        }
    }

    /**
     * Get the NetworkId
     *
     * @return Long
     */
    public Long getNetworkId()
    {
        return networkId;
    }


    /**
     * Set the value of NetworkId
     *
     * @param v new value
     */
    public void setNetworkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.networkId, v))
        {
            this.networkId = v;
            setModified(true);
        }


        if (aNetworks != null && !ObjectUtils.equals(aNetworks.getId(), v))
        {
            aNetworks = null;
        }


        // update associated LinkName
        if (collLinkNames != null)
        {
            for (int i = 0; i < collLinkNames.size(); i++)
            {
                ((LinkName) collLinkNames.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkType
        if (collLinkTypes != null)
        {
            for (int i = 0; i < collLinkTypes.size(); i++)
            {
                ((LinkType) collLinkTypes.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkLanes
        if (collLinkLaness != null)
        {
            for (int i = 0; i < collLinkLaness.size(); i++)
            {
                ((LinkLanes) collLinkLaness.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkLaneOffset
        if (collLinkLaneOffsets != null)
        {
            for (int i = 0; i < collLinkLaneOffsets.size(); i++)
            {
                ((LinkLaneOffset) collLinkLaneOffsets.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkSpeedLimit
        if (collLinkSpeedLimits != null)
        {
            for (int i = 0; i < collLinkSpeedLimits.size(); i++)
            {
                ((LinkSpeedLimit) collLinkSpeedLimits.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated SplitRatioProfiles
        if (collSplitRatioProfiless != null)
        {
            for (int i = 0; i < collSplitRatioProfiless.size(); i++)
            {
                ((SplitRatioProfiles) collSplitRatioProfiless.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkDataTotal
        if (collLinkDataTotals != null)
        {
            for (int i = 0; i < collLinkDataTotals.size(); i++)
            {
                ((LinkDataTotal) collLinkDataTotals.get(i))
                        .setNetworkId(v);
            }
        }

        // update associated LinkPerformanceTotal
        if (collLinkPerformanceTotals != null)
        {
            for (int i = 0; i < collLinkPerformanceTotals.size(); i++)
            {
                ((LinkPerformanceTotal) collLinkPerformanceTotals.get(i))
                        .setNetworkId(v);
            }
        }
    }

    /**
     * Get the BegNodeId
     *
     * @return Long
     */
    public Long getBegNodeId()
    {
        return begNodeId;
    }


    /**
     * Set the value of BegNodeId
     *
     * @param v new value
     */
    public void setBegNodeId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.begNodeId, v))
        {
            this.begNodeId = v;
            setModified(true);
        }


        if (aNodeFamiliesRelatedByBegNodeId != null && !ObjectUtils.equals(aNodeFamiliesRelatedByBegNodeId.getId(), v))
        {
            aNodeFamiliesRelatedByBegNodeId = null;
        }

    }

    /**
     * Get the EndNodeId
     *
     * @return Long
     */
    public Long getEndNodeId()
    {
        return endNodeId;
    }


    /**
     * Set the value of EndNodeId
     *
     * @param v new value
     */
    public void setEndNodeId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.endNodeId, v))
        {
            this.endNodeId = v;
            setModified(true);
        }


        if (aNodeFamiliesRelatedByEndNodeId != null && !ObjectUtils.equals(aNodeFamiliesRelatedByEndNodeId.getId(), v))
        {
            aNodeFamiliesRelatedByEndNodeId = null;
        }

    }

    /**
     * Get the Geom
     *
     * @return String
     */
    public String getGeom()
    {
        return geom;
    }


    /**
     * Set the value of Geom
     *
     * @param v new value
     */
    public void setGeom(String v) 
    {

        if (!ObjectUtils.equals(this.geom, v))
        {
            this.geom = v;
            setModified(true);
        }


    }

    /**
     * Get the Length
     *
     * @return BigDecimal
     */
    public BigDecimal getLength()
    {
        return length;
    }


    /**
     * Set the value of Length
     *
     * @param v new value
     */
    public void setLength(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.length, v))
        {
            this.length = v;
            setModified(true);
        }


    }

    /**
     * Get the DetailLevel
     *
     * @return Integer
     */
    public Integer getDetailLevel()
    {
        return detailLevel;
    }


    /**
     * Set the value of DetailLevel
     *
     * @param v new value
     */
    public void setDetailLevel(Integer v) 
    {

        if (!ObjectUtils.equals(this.detailLevel, v))
        {
            this.detailLevel = v;
            setModified(true);
        }


    }

    /**
     * Get the InSynch
     *
     * @return Boolean
     */
    public Boolean getInSynch()
    {
        return inSynch;
    }


    /**
     * Set the value of InSynch
     *
     * @param v new value
     */
    public void setInSynch(Boolean v) 
    {

        if (!ObjectUtils.equals(this.inSynch, v))
        {
            this.inSynch = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private LinkFamilies aLinkFamilies;

    /**
     * Declares an association between this object and a LinkFamilies object
     *
     * @param v LinkFamilies
     * @throws TorqueException
     */
    public void setLinkFamilies(LinkFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setId((Long) null);
        }
        else
        {
            setId(v.getId());
        }
        aLinkFamilies = v;
    }


    /**
     * Returns the associated LinkFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamilies()
        throws TorqueException
    {
        if (aLinkFamilies == null && (!ObjectUtils.equals(this.id, null)))
        {
            aLinkFamilies = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.id));
        }
        return aLinkFamilies;
    }

    /**
     * Return the associated LinkFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamilies(Connection connection)
        throws TorqueException
    {
        if (aLinkFamilies == null && (!ObjectUtils.equals(this.id, null)))
        {
            aLinkFamilies = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.id), connection);
        }
        return aLinkFamilies;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLinkFamiliesKey(ObjectKey key) throws TorqueException
    {

        setId(new Long(((NumberKey) key).longValue()));
    }




    private Networks aNetworks;

    /**
     * Declares an association between this object and a Networks object
     *
     * @param v Networks
     * @throws TorqueException
     */
    public void setNetworks(Networks v) throws TorqueException
    {
        if (v == null)
        {
            setNetworkId((Long) null);
        }
        else
        {
            setNetworkId(v.getId());
        }
        aNetworks = v;
    }


    /**
     * Returns the associated Networks object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks()
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId));
        }
        return aNetworks;
    }

    /**
     * Return the associated Networks object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks(Connection connection)
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId), connection);
        }
        return aNetworks;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNetworksKey(ObjectKey key) throws TorqueException
    {

        setNetworkId(new Long(((NumberKey) key).longValue()));
    }




    private NodeFamilies aNodeFamiliesRelatedByBegNodeId;

    /**
     * Declares an association between this object and a NodeFamilies object
     *
     * @param v NodeFamilies
     * @throws TorqueException
     */
    public void setNodeFamiliesRelatedByBegNodeId(NodeFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setBegNodeId((Long) null);
        }
        else
        {
            setBegNodeId(v.getId());
        }
        aNodeFamiliesRelatedByBegNodeId = v;
    }


    /**
     * Returns the associated NodeFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamiliesRelatedByBegNodeId()
        throws TorqueException
    {
        if (aNodeFamiliesRelatedByBegNodeId == null && (!ObjectUtils.equals(this.begNodeId, null)))
        {
            aNodeFamiliesRelatedByBegNodeId = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.begNodeId));
        }
        return aNodeFamiliesRelatedByBegNodeId;
    }

    /**
     * Return the associated NodeFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamiliesRelatedByBegNodeId(Connection connection)
        throws TorqueException
    {
        if (aNodeFamiliesRelatedByBegNodeId == null && (!ObjectUtils.equals(this.begNodeId, null)))
        {
            aNodeFamiliesRelatedByBegNodeId = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.begNodeId), connection);
        }
        return aNodeFamiliesRelatedByBegNodeId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNodeFamiliesRelatedByBegNodeIdKey(ObjectKey key) throws TorqueException
    {

        setBegNodeId(new Long(((NumberKey) key).longValue()));
    }




    private NodeFamilies aNodeFamiliesRelatedByEndNodeId;

    /**
     * Declares an association between this object and a NodeFamilies object
     *
     * @param v NodeFamilies
     * @throws TorqueException
     */
    public void setNodeFamiliesRelatedByEndNodeId(NodeFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setEndNodeId((Long) null);
        }
        else
        {
            setEndNodeId(v.getId());
        }
        aNodeFamiliesRelatedByEndNodeId = v;
    }


    /**
     * Returns the associated NodeFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamiliesRelatedByEndNodeId()
        throws TorqueException
    {
        if (aNodeFamiliesRelatedByEndNodeId == null && (!ObjectUtils.equals(this.endNodeId, null)))
        {
            aNodeFamiliesRelatedByEndNodeId = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.endNodeId));
        }
        return aNodeFamiliesRelatedByEndNodeId;
    }

    /**
     * Return the associated NodeFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamiliesRelatedByEndNodeId(Connection connection)
        throws TorqueException
    {
        if (aNodeFamiliesRelatedByEndNodeId == null && (!ObjectUtils.equals(this.endNodeId, null)))
        {
            aNodeFamiliesRelatedByEndNodeId = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.endNodeId), connection);
        }
        return aNodeFamiliesRelatedByEndNodeId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNodeFamiliesRelatedByEndNodeIdKey(ObjectKey key) throws TorqueException
    {

        setEndNodeId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collLinkNames
     */
    protected List collLinkNames;

    /**
     * Temporary storage of collLinkNames to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkNames()
    {
        if (collLinkNames == null)
        {
            collLinkNames = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkName object to this object
     * through the LinkName foreign key attribute
     *
     * @param l LinkName
     * @throws TorqueException
     */
    public void addLinkName(LinkName l) throws TorqueException
    {
        getLinkNames().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkName object to this object
     * through the LinkName foreign key attribute using connection.
     *
     * @param l LinkName
     * @throws TorqueException
     */
    public void addLinkName(LinkName l, Connection con) throws TorqueException
    {
        getLinkNames(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkNames
     */
    private Criteria lastLinkNamesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkNames(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkNames()
        throws TorqueException
    {
        if (collLinkNames == null)
        {
            collLinkNames = getLinkNames(new Criteria(10));
        }
        return collLinkNames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkNames from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkNames(Criteria criteria) throws TorqueException
    {
        if (collLinkNames == null)
        {
            if (isNew())
            {
               collLinkNames = new ArrayList();
            }
            else
            {
                criteria.add(LinkNamePeer.ID, getId() );
                criteria.add(LinkNamePeer.NETWORK_ID, getNetworkId() );
                collLinkNames = LinkNamePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkNamePeer.ID, getId());
                criteria.add(LinkNamePeer.NETWORK_ID, getNetworkId());
                if (!lastLinkNamesCriteria.equals(criteria))
                {
                    collLinkNames = LinkNamePeer.doSelect(criteria);
                }
            }
        }
        lastLinkNamesCriteria = criteria;

        return collLinkNames;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkNames(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkNames(Connection con) throws TorqueException
    {
        if (collLinkNames == null)
        {
            collLinkNames = getLinkNames(new Criteria(10), con);
        }
        return collLinkNames;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkNames from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkNames(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkNames == null)
        {
            if (isNew())
            {
               collLinkNames = new ArrayList();
            }
            else
            {
                 criteria.add(LinkNamePeer.ID, getId());
                 criteria.add(LinkNamePeer.NETWORK_ID, getNetworkId());
                 collLinkNames = LinkNamePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkNamePeer.ID, getId());
                 criteria.add(LinkNamePeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkNamesCriteria.equals(criteria))
                 {
                     collLinkNames = LinkNamePeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkNamesCriteria = criteria;

         return collLinkNames;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkNames from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkNamesJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkNames == null)
        {
            if (isNew())
            {
               collLinkNames = new ArrayList();
            }
            else
            {
                criteria.add(LinkNamePeer.ID, getId());
                criteria.add(LinkNamePeer.NETWORK_ID, getNetworkId());
                collLinkNames = LinkNamePeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkNamePeer.ID, getId());
            criteria.add(LinkNamePeer.NETWORK_ID, getNetworkId());
            if (!lastLinkNamesCriteria.equals(criteria))
            {
                collLinkNames = LinkNamePeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkNamesCriteria = criteria;

        return collLinkNames;
    }





    /**
     * Collection to store aggregation of collLinkTypes
     */
    protected List collLinkTypes;

    /**
     * Temporary storage of collLinkTypes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkTypes()
    {
        if (collLinkTypes == null)
        {
            collLinkTypes = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkType object to this object
     * through the LinkType foreign key attribute
     *
     * @param l LinkType
     * @throws TorqueException
     */
    public void addLinkType(LinkType l) throws TorqueException
    {
        getLinkTypes().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkType object to this object
     * through the LinkType foreign key attribute using connection.
     *
     * @param l LinkType
     * @throws TorqueException
     */
    public void addLinkType(LinkType l, Connection con) throws TorqueException
    {
        getLinkTypes(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkTypes
     */
    private Criteria lastLinkTypesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTypes(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkTypes()
        throws TorqueException
    {
        if (collLinkTypes == null)
        {
            collLinkTypes = getLinkTypes(new Criteria(10));
        }
        return collLinkTypes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkTypes from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkTypes(Criteria criteria) throws TorqueException
    {
        if (collLinkTypes == null)
        {
            if (isNew())
            {
               collLinkTypes = new ArrayList();
            }
            else
            {
                criteria.add(LinkTypePeer.ID, getId() );
                criteria.add(LinkTypePeer.NETWORK_ID, getNetworkId() );
                collLinkTypes = LinkTypePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkTypePeer.ID, getId());
                criteria.add(LinkTypePeer.NETWORK_ID, getNetworkId());
                if (!lastLinkTypesCriteria.equals(criteria))
                {
                    collLinkTypes = LinkTypePeer.doSelect(criteria);
                }
            }
        }
        lastLinkTypesCriteria = criteria;

        return collLinkTypes;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkTypes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTypes(Connection con) throws TorqueException
    {
        if (collLinkTypes == null)
        {
            collLinkTypes = getLinkTypes(new Criteria(10), con);
        }
        return collLinkTypes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkTypes from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkTypes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkTypes == null)
        {
            if (isNew())
            {
               collLinkTypes = new ArrayList();
            }
            else
            {
                 criteria.add(LinkTypePeer.ID, getId());
                 criteria.add(LinkTypePeer.NETWORK_ID, getNetworkId());
                 collLinkTypes = LinkTypePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkTypePeer.ID, getId());
                 criteria.add(LinkTypePeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkTypesCriteria.equals(criteria))
                 {
                     collLinkTypes = LinkTypePeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkTypesCriteria = criteria;

         return collLinkTypes;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkTypes from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkTypesJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkTypes == null)
        {
            if (isNew())
            {
               collLinkTypes = new ArrayList();
            }
            else
            {
                criteria.add(LinkTypePeer.ID, getId());
                criteria.add(LinkTypePeer.NETWORK_ID, getNetworkId());
                collLinkTypes = LinkTypePeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkTypePeer.ID, getId());
            criteria.add(LinkTypePeer.NETWORK_ID, getNetworkId());
            if (!lastLinkTypesCriteria.equals(criteria))
            {
                collLinkTypes = LinkTypePeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkTypesCriteria = criteria;

        return collLinkTypes;
    }





    /**
     * Collection to store aggregation of collLinkLaness
     */
    protected List collLinkLaness;

    /**
     * Temporary storage of collLinkLaness to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkLaness()
    {
        if (collLinkLaness == null)
        {
            collLinkLaness = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkLanes object to this object
     * through the LinkLanes foreign key attribute
     *
     * @param l LinkLanes
     * @throws TorqueException
     */
    public void addLinkLanes(LinkLanes l) throws TorqueException
    {
        getLinkLaness().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkLanes object to this object
     * through the LinkLanes foreign key attribute using connection.
     *
     * @param l LinkLanes
     * @throws TorqueException
     */
    public void addLinkLanes(LinkLanes l, Connection con) throws TorqueException
    {
        getLinkLaness(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkLaness
     */
    private Criteria lastLinkLanessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkLaness(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkLaness()
        throws TorqueException
    {
        if (collLinkLaness == null)
        {
            collLinkLaness = getLinkLaness(new Criteria(10));
        }
        return collLinkLaness;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkLaness from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkLaness(Criteria criteria) throws TorqueException
    {
        if (collLinkLaness == null)
        {
            if (isNew())
            {
               collLinkLaness = new ArrayList();
            }
            else
            {
                criteria.add(LinkLanesPeer.ID, getId() );
                criteria.add(LinkLanesPeer.NETWORK_ID, getNetworkId() );
                collLinkLaness = LinkLanesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkLanesPeer.ID, getId());
                criteria.add(LinkLanesPeer.NETWORK_ID, getNetworkId());
                if (!lastLinkLanessCriteria.equals(criteria))
                {
                    collLinkLaness = LinkLanesPeer.doSelect(criteria);
                }
            }
        }
        lastLinkLanessCriteria = criteria;

        return collLinkLaness;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkLaness(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkLaness(Connection con) throws TorqueException
    {
        if (collLinkLaness == null)
        {
            collLinkLaness = getLinkLaness(new Criteria(10), con);
        }
        return collLinkLaness;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkLaness from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkLaness(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkLaness == null)
        {
            if (isNew())
            {
               collLinkLaness = new ArrayList();
            }
            else
            {
                 criteria.add(LinkLanesPeer.ID, getId());
                 criteria.add(LinkLanesPeer.NETWORK_ID, getNetworkId());
                 collLinkLaness = LinkLanesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkLanesPeer.ID, getId());
                 criteria.add(LinkLanesPeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkLanessCriteria.equals(criteria))
                 {
                     collLinkLaness = LinkLanesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkLanessCriteria = criteria;

         return collLinkLaness;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkLaness from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkLanessJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkLaness == null)
        {
            if (isNew())
            {
               collLinkLaness = new ArrayList();
            }
            else
            {
                criteria.add(LinkLanesPeer.ID, getId());
                criteria.add(LinkLanesPeer.NETWORK_ID, getNetworkId());
                collLinkLaness = LinkLanesPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkLanesPeer.ID, getId());
            criteria.add(LinkLanesPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkLanessCriteria.equals(criteria))
            {
                collLinkLaness = LinkLanesPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkLanessCriteria = criteria;

        return collLinkLaness;
    }





    /**
     * Collection to store aggregation of collLinkLaneOffsets
     */
    protected List collLinkLaneOffsets;

    /**
     * Temporary storage of collLinkLaneOffsets to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkLaneOffsets()
    {
        if (collLinkLaneOffsets == null)
        {
            collLinkLaneOffsets = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkLaneOffset object to this object
     * through the LinkLaneOffset foreign key attribute
     *
     * @param l LinkLaneOffset
     * @throws TorqueException
     */
    public void addLinkLaneOffset(LinkLaneOffset l) throws TorqueException
    {
        getLinkLaneOffsets().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkLaneOffset object to this object
     * through the LinkLaneOffset foreign key attribute using connection.
     *
     * @param l LinkLaneOffset
     * @throws TorqueException
     */
    public void addLinkLaneOffset(LinkLaneOffset l, Connection con) throws TorqueException
    {
        getLinkLaneOffsets(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkLaneOffsets
     */
    private Criteria lastLinkLaneOffsetsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkLaneOffsets(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkLaneOffsets()
        throws TorqueException
    {
        if (collLinkLaneOffsets == null)
        {
            collLinkLaneOffsets = getLinkLaneOffsets(new Criteria(10));
        }
        return collLinkLaneOffsets;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkLaneOffsets from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkLaneOffsets(Criteria criteria) throws TorqueException
    {
        if (collLinkLaneOffsets == null)
        {
            if (isNew())
            {
               collLinkLaneOffsets = new ArrayList();
            }
            else
            {
                criteria.add(LinkLaneOffsetPeer.ID, getId() );
                criteria.add(LinkLaneOffsetPeer.NETWORK_ID, getNetworkId() );
                collLinkLaneOffsets = LinkLaneOffsetPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkLaneOffsetPeer.ID, getId());
                criteria.add(LinkLaneOffsetPeer.NETWORK_ID, getNetworkId());
                if (!lastLinkLaneOffsetsCriteria.equals(criteria))
                {
                    collLinkLaneOffsets = LinkLaneOffsetPeer.doSelect(criteria);
                }
            }
        }
        lastLinkLaneOffsetsCriteria = criteria;

        return collLinkLaneOffsets;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkLaneOffsets(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkLaneOffsets(Connection con) throws TorqueException
    {
        if (collLinkLaneOffsets == null)
        {
            collLinkLaneOffsets = getLinkLaneOffsets(new Criteria(10), con);
        }
        return collLinkLaneOffsets;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkLaneOffsets from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkLaneOffsets(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkLaneOffsets == null)
        {
            if (isNew())
            {
               collLinkLaneOffsets = new ArrayList();
            }
            else
            {
                 criteria.add(LinkLaneOffsetPeer.ID, getId());
                 criteria.add(LinkLaneOffsetPeer.NETWORK_ID, getNetworkId());
                 collLinkLaneOffsets = LinkLaneOffsetPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkLaneOffsetPeer.ID, getId());
                 criteria.add(LinkLaneOffsetPeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkLaneOffsetsCriteria.equals(criteria))
                 {
                     collLinkLaneOffsets = LinkLaneOffsetPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkLaneOffsetsCriteria = criteria;

         return collLinkLaneOffsets;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkLaneOffsets from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkLaneOffsetsJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkLaneOffsets == null)
        {
            if (isNew())
            {
               collLinkLaneOffsets = new ArrayList();
            }
            else
            {
                criteria.add(LinkLaneOffsetPeer.ID, getId());
                criteria.add(LinkLaneOffsetPeer.NETWORK_ID, getNetworkId());
                collLinkLaneOffsets = LinkLaneOffsetPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkLaneOffsetPeer.ID, getId());
            criteria.add(LinkLaneOffsetPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkLaneOffsetsCriteria.equals(criteria))
            {
                collLinkLaneOffsets = LinkLaneOffsetPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkLaneOffsetsCriteria = criteria;

        return collLinkLaneOffsets;
    }





    /**
     * Collection to store aggregation of collLinkSpeedLimits
     */
    protected List collLinkSpeedLimits;

    /**
     * Temporary storage of collLinkSpeedLimits to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkSpeedLimits()
    {
        if (collLinkSpeedLimits == null)
        {
            collLinkSpeedLimits = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkSpeedLimit object to this object
     * through the LinkSpeedLimit foreign key attribute
     *
     * @param l LinkSpeedLimit
     * @throws TorqueException
     */
    public void addLinkSpeedLimit(LinkSpeedLimit l) throws TorqueException
    {
        getLinkSpeedLimits().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkSpeedLimit object to this object
     * through the LinkSpeedLimit foreign key attribute using connection.
     *
     * @param l LinkSpeedLimit
     * @throws TorqueException
     */
    public void addLinkSpeedLimit(LinkSpeedLimit l, Connection con) throws TorqueException
    {
        getLinkSpeedLimits(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkSpeedLimits
     */
    private Criteria lastLinkSpeedLimitsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkSpeedLimits(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkSpeedLimits()
        throws TorqueException
    {
        if (collLinkSpeedLimits == null)
        {
            collLinkSpeedLimits = getLinkSpeedLimits(new Criteria(10));
        }
        return collLinkSpeedLimits;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkSpeedLimits from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkSpeedLimits(Criteria criteria) throws TorqueException
    {
        if (collLinkSpeedLimits == null)
        {
            if (isNew())
            {
               collLinkSpeedLimits = new ArrayList();
            }
            else
            {
                criteria.add(LinkSpeedLimitPeer.ID, getId() );
                criteria.add(LinkSpeedLimitPeer.NETWORK_ID, getNetworkId() );
                collLinkSpeedLimits = LinkSpeedLimitPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkSpeedLimitPeer.ID, getId());
                criteria.add(LinkSpeedLimitPeer.NETWORK_ID, getNetworkId());
                if (!lastLinkSpeedLimitsCriteria.equals(criteria))
                {
                    collLinkSpeedLimits = LinkSpeedLimitPeer.doSelect(criteria);
                }
            }
        }
        lastLinkSpeedLimitsCriteria = criteria;

        return collLinkSpeedLimits;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkSpeedLimits(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkSpeedLimits(Connection con) throws TorqueException
    {
        if (collLinkSpeedLimits == null)
        {
            collLinkSpeedLimits = getLinkSpeedLimits(new Criteria(10), con);
        }
        return collLinkSpeedLimits;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkSpeedLimits from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkSpeedLimits(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkSpeedLimits == null)
        {
            if (isNew())
            {
               collLinkSpeedLimits = new ArrayList();
            }
            else
            {
                 criteria.add(LinkSpeedLimitPeer.ID, getId());
                 criteria.add(LinkSpeedLimitPeer.NETWORK_ID, getNetworkId());
                 collLinkSpeedLimits = LinkSpeedLimitPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkSpeedLimitPeer.ID, getId());
                 criteria.add(LinkSpeedLimitPeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkSpeedLimitsCriteria.equals(criteria))
                 {
                     collLinkSpeedLimits = LinkSpeedLimitPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkSpeedLimitsCriteria = criteria;

         return collLinkSpeedLimits;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkSpeedLimits from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkSpeedLimitsJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkSpeedLimits == null)
        {
            if (isNew())
            {
               collLinkSpeedLimits = new ArrayList();
            }
            else
            {
                criteria.add(LinkSpeedLimitPeer.ID, getId());
                criteria.add(LinkSpeedLimitPeer.NETWORK_ID, getNetworkId());
                collLinkSpeedLimits = LinkSpeedLimitPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkSpeedLimitPeer.ID, getId());
            criteria.add(LinkSpeedLimitPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkSpeedLimitsCriteria.equals(criteria))
            {
                collLinkSpeedLimits = LinkSpeedLimitPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkSpeedLimitsCriteria = criteria;

        return collLinkSpeedLimits;
    }





    /**
     * Collection to store aggregation of collSplitRatioProfiless
     */
    protected List collSplitRatioProfiless;

    /**
     * Temporary storage of collSplitRatioProfiless to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSplitRatioProfiless()
    {
        if (collSplitRatioProfiless == null)
        {
            collSplitRatioProfiless = new ArrayList();
        }
    }


    /**
     * Method called to associate a SplitRatioProfiles object to this object
     * through the SplitRatioProfiles foreign key attribute
     *
     * @param l SplitRatioProfiles
     * @throws TorqueException
     */
    public void addSplitRatioProfiles(SplitRatioProfiles l) throws TorqueException
    {
        getSplitRatioProfiless().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a SplitRatioProfiles object to this object
     * through the SplitRatioProfiles foreign key attribute using connection.
     *
     * @param l SplitRatioProfiles
     * @throws TorqueException
     */
    public void addSplitRatioProfiles(SplitRatioProfiles l, Connection con) throws TorqueException
    {
        getSplitRatioProfiless(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collSplitRatioProfiless
     */
    private Criteria lastSplitRatioProfilessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatioProfiless(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSplitRatioProfiless()
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            collSplitRatioProfiless = getSplitRatioProfiless(new Criteria(10));
        }
        return collSplitRatioProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSplitRatioProfiless(Criteria criteria) throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId() );
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId() );
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                if (!lastSplitRatioProfilessCriteria.equals(criteria))
                {
                    collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria);
                }
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatioProfiless(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatioProfiless(Connection con) throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            collSplitRatioProfiless = getSplitRatioProfiless(new Criteria(10), con);
        }
        return collSplitRatioProfiless;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatioProfiless(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                 criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
                 criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                 collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
                 criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                 if (!lastSplitRatioProfilessCriteria.equals(criteria))
                 {
                     collSplitRatioProfiless = SplitRatioProfilesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSplitRatioProfilessCriteria = criteria;

         return collSplitRatioProfiless;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getSplitRatioProfilessJoinSplitRatioProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinSplitRatioProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
            criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
            if (!lastSplitRatioProfilessCriteria.equals(criteria))
            {
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinSplitRatioProfileSets(criteria);
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getSplitRatioProfilessJoinNodes(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinNodes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
            criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
            if (!lastSplitRatioProfilessCriteria.equals(criteria))
            {
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinNodes(criteria);
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related SplitRatioProfiless from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getSplitRatioProfilessJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioProfiless == null)
        {
            if (isNew())
            {
               collSplitRatioProfiless = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
                criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatioProfilesPeer.DESTINATION_LINK_ID, getId());
            criteria.add(SplitRatioProfilesPeer.NETWORK_ID, getNetworkId());
            if (!lastSplitRatioProfilessCriteria.equals(criteria))
            {
                collSplitRatioProfiless = SplitRatioProfilesPeer.doSelectJoinLinks(criteria);
            }
        }
        lastSplitRatioProfilessCriteria = criteria;

        return collSplitRatioProfiless;
    }





    /**
     * Collection to store aggregation of collLinkDataTotals
     */
    protected List collLinkDataTotals;

    /**
     * Temporary storage of collLinkDataTotals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataTotals()
    {
        if (collLinkDataTotals == null)
        {
            collLinkDataTotals = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataTotal object to this object
     * through the LinkDataTotal foreign key attribute
     *
     * @param l LinkDataTotal
     * @throws TorqueException
     */
    public void addLinkDataTotal(LinkDataTotal l) throws TorqueException
    {
        getLinkDataTotals().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkDataTotal object to this object
     * through the LinkDataTotal foreign key attribute using connection.
     *
     * @param l LinkDataTotal
     * @throws TorqueException
     */
    public void addLinkDataTotal(LinkDataTotal l, Connection con) throws TorqueException
    {
        getLinkDataTotals(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataTotals
     */
    private Criteria lastLinkDataTotalsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataTotals(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataTotals()
        throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            collLinkDataTotals = getLinkDataTotals(new Criteria(10));
        }
        return collLinkDataTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataTotals(Criteria criteria) throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataTotalPeer.LINK_ID, getId() );
                criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId() );
                collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataTotalPeer.LINK_ID, getId());
                criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
                if (!lastLinkDataTotalsCriteria.equals(criteria))
                {
                    collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataTotalsCriteria = criteria;

        return collLinkDataTotals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataTotals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataTotals(Connection con) throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            collLinkDataTotals = getLinkDataTotals(new Criteria(10), con);
        }
        return collLinkDataTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataTotals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataTotalPeer.LINK_ID, getId());
                 criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
                 collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataTotalPeer.LINK_ID, getId());
                 criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkDataTotalsCriteria.equals(criteria))
                 {
                     collLinkDataTotals = LinkDataTotalPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataTotalsCriteria = criteria;

         return collLinkDataTotals;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkDataTotalsJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataTotalPeer.LINK_ID, getId());
                criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataTotalPeer.LINK_ID, getId());
            criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkDataTotalsCriteria.equals(criteria))
            {
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkDataTotalsCriteria = criteria;

        return collLinkDataTotals;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkDataTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkDataTotalsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataTotals == null)
        {
            if (isNew())
            {
               collLinkDataTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataTotalPeer.LINK_ID, getId());
                criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataTotalPeer.LINK_ID, getId());
            criteria.add(LinkDataTotalPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkDataTotalsCriteria.equals(criteria))
            {
                collLinkDataTotals = LinkDataTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataTotalsCriteria = criteria;

        return collLinkDataTotals;
    }





    /**
     * Collection to store aggregation of collLinkPerformanceTotals
     */
    protected List collLinkPerformanceTotals;

    /**
     * Temporary storage of collLinkPerformanceTotals to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkPerformanceTotals()
    {
        if (collLinkPerformanceTotals == null)
        {
            collLinkPerformanceTotals = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkPerformanceTotal object to this object
     * through the LinkPerformanceTotal foreign key attribute
     *
     * @param l LinkPerformanceTotal
     * @throws TorqueException
     */
    public void addLinkPerformanceTotal(LinkPerformanceTotal l) throws TorqueException
    {
        getLinkPerformanceTotals().add(l);
        l.setLinks((Links) this);
    }

    /**
     * Method called to associate a LinkPerformanceTotal object to this object
     * through the LinkPerformanceTotal foreign key attribute using connection.
     *
     * @param l LinkPerformanceTotal
     * @throws TorqueException
     */
    public void addLinkPerformanceTotal(LinkPerformanceTotal l, Connection con) throws TorqueException
    {
        getLinkPerformanceTotals(con).add(l);
        l.setLinks((Links) this);
    }

    /**
     * The criteria used to select the current contents of collLinkPerformanceTotals
     */
    private Criteria lastLinkPerformanceTotalsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceTotals(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkPerformanceTotals()
        throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            collLinkPerformanceTotals = getLinkPerformanceTotals(new Criteria(10));
        }
        return collLinkPerformanceTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkPerformanceTotals(Criteria criteria) throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId() );
                criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId() );
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
                criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
                if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
                {
                    collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria);
                }
            }
        }
        lastLinkPerformanceTotalsCriteria = criteria;

        return collLinkPerformanceTotals;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkPerformanceTotals(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceTotals(Connection con) throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            collLinkPerformanceTotals = getLinkPerformanceTotals(new Criteria(10), con);
        }
        return collLinkPerformanceTotals;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     * If this Links is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkPerformanceTotals(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                 criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
                 criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
                 collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
                 criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
                 if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
                 {
                     collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkPerformanceTotalsCriteria = criteria;

         return collLinkPerformanceTotals;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkPerformanceTotalsJoinLinks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
                criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
            criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
            {
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinLinks(criteria);
            }
        }
        lastLinkPerformanceTotalsCriteria = criteria;

        return collLinkPerformanceTotals;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Links is new, it will return
     * an empty collection; or if this Links has previously
     * been saved, it will retrieve related LinkPerformanceTotals from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Links.
     */
    protected List getLinkPerformanceTotalsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkPerformanceTotals == null)
        {
            if (isNew())
            {
               collLinkPerformanceTotals = new ArrayList();
            }
            else
            {
                criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
                criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkPerformanceTotalPeer.LINK_ID, getId());
            criteria.add(LinkPerformanceTotalPeer.NETWORK_ID, getNetworkId());
            if (!lastLinkPerformanceTotalsCriteria.equals(criteria))
            {
                collLinkPerformanceTotals = LinkPerformanceTotalPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkPerformanceTotalsCriteria = criteria;

        return collLinkPerformanceTotals;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("NetworkId");
            fieldNames.add("BegNodeId");
            fieldNames.add("EndNodeId");
            fieldNames.add("Geom");
            fieldNames.add("Length");
            fieldNames.add("DetailLevel");
            fieldNames.add("InSynch");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("NetworkId"))
        {
            return getNetworkId();
        }
        if (name.equals("BegNodeId"))
        {
            return getBegNodeId();
        }
        if (name.equals("EndNodeId"))
        {
            return getEndNodeId();
        }
        if (name.equals("Geom"))
        {
            return getGeom();
        }
        if (name.equals("Length"))
        {
            return getLength();
        }
        if (name.equals("DetailLevel"))
        {
            return getDetailLevel();
        }
        if (name.equals("InSynch"))
        {
            return getInSynch();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("NetworkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNetworkId((Long) value);
            return true;
        }
        if (name.equals("BegNodeId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setBegNodeId((Long) value);
            return true;
        }
        if (name.equals("EndNodeId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEndNodeId((Long) value);
            return true;
        }
        if (name.equals("Geom"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setGeom((String) value);
            return true;
        }
        if (name.equals("Length"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLength((BigDecimal) value);
            return true;
        }
        if (name.equals("DetailLevel"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDetailLevel((Integer) value);
            return true;
        }
        if (name.equals("InSynch"))
        {
            // Object fields can be null
            if (value != null && ! Boolean.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setInSynch((Boolean) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(LinksPeer.ID))
        {
            return getId();
        }
        if (name.equals(LinksPeer.NETWORK_ID))
        {
            return getNetworkId();
        }
        if (name.equals(LinksPeer.BEG_NODE_ID))
        {
            return getBegNodeId();
        }
        if (name.equals(LinksPeer.END_NODE_ID))
        {
            return getEndNodeId();
        }
        if (name.equals(LinksPeer.GEOM))
        {
            return getGeom();
        }
        if (name.equals(LinksPeer.LENGTH))
        {
            return getLength();
        }
        if (name.equals(LinksPeer.DETAIL_LEVEL))
        {
            return getDetailLevel();
        }
        if (name.equals(LinksPeer.IN_SYNCH))
        {
            return getInSynch();
        }
        if (name.equals(LinksPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(LinksPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(LinksPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(LinksPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(LinksPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (LinksPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (LinksPeer.NETWORK_ID.equals(name))
        {
            return setByName("NetworkId", value);
        }
      if (LinksPeer.BEG_NODE_ID.equals(name))
        {
            return setByName("BegNodeId", value);
        }
      if (LinksPeer.END_NODE_ID.equals(name))
        {
            return setByName("EndNodeId", value);
        }
      if (LinksPeer.GEOM.equals(name))
        {
            return setByName("Geom", value);
        }
      if (LinksPeer.LENGTH.equals(name))
        {
            return setByName("Length", value);
        }
      if (LinksPeer.DETAIL_LEVEL.equals(name))
        {
            return setByName("DetailLevel", value);
        }
      if (LinksPeer.IN_SYNCH.equals(name))
        {
            return setByName("InSynch", value);
        }
      if (LinksPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (LinksPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (LinksPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (LinksPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (LinksPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getNetworkId();
        }
        if (pos == 2)
        {
            return getBegNodeId();
        }
        if (pos == 3)
        {
            return getEndNodeId();
        }
        if (pos == 4)
        {
            return getGeom();
        }
        if (pos == 5)
        {
            return getLength();
        }
        if (pos == 6)
        {
            return getDetailLevel();
        }
        if (pos == 7)
        {
            return getInSynch();
        }
        if (pos == 8)
        {
            return getCreated();
        }
        if (pos == 9)
        {
            return getModified();
        }
        if (pos == 10)
        {
            return getCreatedBy();
        }
        if (pos == 11)
        {
            return getModifiedBy();
        }
        if (pos == 12)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("NetworkId", value);
        }
    if (position == 2)
        {
            return setByName("BegNodeId", value);
        }
    if (position == 3)
        {
            return setByName("EndNodeId", value);
        }
    if (position == 4)
        {
            return setByName("Geom", value);
        }
    if (position == 5)
        {
            return setByName("Length", value);
        }
    if (position == 6)
        {
            return setByName("DetailLevel", value);
        }
    if (position == 7)
        {
            return setByName("InSynch", value);
        }
    if (position == 8)
        {
            return setByName("Created", value);
        }
    if (position == 9)
        {
            return setByName("Modified", value);
        }
    if (position == 10)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 11)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 12)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(LinksPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    LinksPeer.doInsert((Links) this, con);
                    setNew(false);
                }
                else
                {
                    LinksPeer.doUpdate((Links) this, con);
                }
            }


            if (collLinkNames != null)
            {
                for (int i = 0; i < collLinkNames.size(); i++)
                {
                    ((LinkName) collLinkNames.get(i)).save(con);
                }
            }

            if (collLinkTypes != null)
            {
                for (int i = 0; i < collLinkTypes.size(); i++)
                {
                    ((LinkType) collLinkTypes.get(i)).save(con);
                }
            }

            if (collLinkLaness != null)
            {
                for (int i = 0; i < collLinkLaness.size(); i++)
                {
                    ((LinkLanes) collLinkLaness.get(i)).save(con);
                }
            }

            if (collLinkLaneOffsets != null)
            {
                for (int i = 0; i < collLinkLaneOffsets.size(); i++)
                {
                    ((LinkLaneOffset) collLinkLaneOffsets.get(i)).save(con);
                }
            }

            if (collLinkSpeedLimits != null)
            {
                for (int i = 0; i < collLinkSpeedLimits.size(); i++)
                {
                    ((LinkSpeedLimit) collLinkSpeedLimits.get(i)).save(con);
                }
            }

            if (collSplitRatioProfiless != null)
            {
                for (int i = 0; i < collSplitRatioProfiless.size(); i++)
                {
                    ((SplitRatioProfiles) collSplitRatioProfiless.get(i)).save(con);
                }
            }

            if (collLinkDataTotals != null)
            {
                for (int i = 0; i < collLinkDataTotals.size(); i++)
                {
                    ((LinkDataTotal) collLinkDataTotals.get(i)).save(con);
                }
            }

            if (collLinkPerformanceTotals != null)
            {
                for (int i = 0; i < collLinkPerformanceTotals.size(); i++)
                {
                    ((LinkPerformanceTotal) collLinkPerformanceTotals.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setId(new Long(((NumberKey)keys[0]).longValue()));
        setNetworkId(new Long(((NumberKey)keys[1]).longValue()));
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param id Long
     * @param networkId Long
     */
    public void setPrimaryKey( Long id, Long networkId)
        throws TorqueException
    {
        setId(id);
        setNetworkId(networkId);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getId());
        pks[1] = SimpleKey.keyFor(getNetworkId());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Links copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Links copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Links copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Links(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Links copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Links(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Links copyInto(Links copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Links copyInto(Links copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Links copyInto(Links copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setNetworkId(networkId);
        copyObj.setBegNodeId(begNodeId);
        copyObj.setEndNodeId(endNodeId);
        copyObj.setGeom(geom);
        copyObj.setLength(length);
        copyObj.setDetailLevel(detailLevel);
        copyObj.setInSynch(inSynch);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);
        copyObj.setNetworkId((Long)null);

        if (deepcopy)
        {


        List vLinkNames = getLinkNames();
        if (vLinkNames != null)
        {
            for (int i = 0; i < vLinkNames.size(); i++)
            {
                LinkName obj = (LinkName) vLinkNames.get(i);
                copyObj.addLinkName(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkNames = null;
        }


        List vLinkTypes = getLinkTypes();
        if (vLinkTypes != null)
        {
            for (int i = 0; i < vLinkTypes.size(); i++)
            {
                LinkType obj = (LinkType) vLinkTypes.get(i);
                copyObj.addLinkType(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkTypes = null;
        }


        List vLinkLaness = getLinkLaness();
        if (vLinkLaness != null)
        {
            for (int i = 0; i < vLinkLaness.size(); i++)
            {
                LinkLanes obj = (LinkLanes) vLinkLaness.get(i);
                copyObj.addLinkLanes(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkLaness = null;
        }


        List vLinkLaneOffsets = getLinkLaneOffsets();
        if (vLinkLaneOffsets != null)
        {
            for (int i = 0; i < vLinkLaneOffsets.size(); i++)
            {
                LinkLaneOffset obj = (LinkLaneOffset) vLinkLaneOffsets.get(i);
                copyObj.addLinkLaneOffset(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkLaneOffsets = null;
        }


        List vLinkSpeedLimits = getLinkSpeedLimits();
        if (vLinkSpeedLimits != null)
        {
            for (int i = 0; i < vLinkSpeedLimits.size(); i++)
            {
                LinkSpeedLimit obj = (LinkSpeedLimit) vLinkSpeedLimits.get(i);
                copyObj.addLinkSpeedLimit(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkSpeedLimits = null;
        }


        List vSplitRatioProfiless = getSplitRatioProfiless();
        if (vSplitRatioProfiless != null)
        {
            for (int i = 0; i < vSplitRatioProfiless.size(); i++)
            {
                SplitRatioProfiles obj = (SplitRatioProfiles) vSplitRatioProfiless.get(i);
                copyObj.addSplitRatioProfiles(obj.copy());
            }
        }
        else
        {
            copyObj.collSplitRatioProfiless = null;
        }


        List vLinkDataTotals = getLinkDataTotals();
        if (vLinkDataTotals != null)
        {
            for (int i = 0; i < vLinkDataTotals.size(); i++)
            {
                LinkDataTotal obj = (LinkDataTotal) vLinkDataTotals.get(i);
                copyObj.addLinkDataTotal(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataTotals = null;
        }


        List vLinkPerformanceTotals = getLinkPerformanceTotals();
        if (vLinkPerformanceTotals != null)
        {
            for (int i = 0; i < vLinkPerformanceTotals.size(); i++)
            {
                LinkPerformanceTotal obj = (LinkPerformanceTotal) vLinkPerformanceTotals.get(i);
                copyObj.addLinkPerformanceTotal(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkPerformanceTotals = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Links copyInto(Links copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setNetworkId(networkId);
        copyObj.setBegNodeId(begNodeId);
        copyObj.setEndNodeId(endNodeId);
        copyObj.setGeom(geom);
        copyObj.setLength(length);
        copyObj.setDetailLevel(detailLevel);
        copyObj.setInSynch(inSynch);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);
        copyObj.setNetworkId((Long)null);

        if (deepcopy)
        {


        List vLinkNames = getLinkNames(con);
        if (vLinkNames != null)
        {
            for (int i = 0; i < vLinkNames.size(); i++)
            {
                LinkName obj = (LinkName) vLinkNames.get(i);
                copyObj.addLinkName(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkNames = null;
        }


        List vLinkTypes = getLinkTypes(con);
        if (vLinkTypes != null)
        {
            for (int i = 0; i < vLinkTypes.size(); i++)
            {
                LinkType obj = (LinkType) vLinkTypes.get(i);
                copyObj.addLinkType(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkTypes = null;
        }


        List vLinkLaness = getLinkLaness(con);
        if (vLinkLaness != null)
        {
            for (int i = 0; i < vLinkLaness.size(); i++)
            {
                LinkLanes obj = (LinkLanes) vLinkLaness.get(i);
                copyObj.addLinkLanes(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkLaness = null;
        }


        List vLinkLaneOffsets = getLinkLaneOffsets(con);
        if (vLinkLaneOffsets != null)
        {
            for (int i = 0; i < vLinkLaneOffsets.size(); i++)
            {
                LinkLaneOffset obj = (LinkLaneOffset) vLinkLaneOffsets.get(i);
                copyObj.addLinkLaneOffset(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkLaneOffsets = null;
        }


        List vLinkSpeedLimits = getLinkSpeedLimits(con);
        if (vLinkSpeedLimits != null)
        {
            for (int i = 0; i < vLinkSpeedLimits.size(); i++)
            {
                LinkSpeedLimit obj = (LinkSpeedLimit) vLinkSpeedLimits.get(i);
                copyObj.addLinkSpeedLimit(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkSpeedLimits = null;
        }


        List vSplitRatioProfiless = getSplitRatioProfiless(con);
        if (vSplitRatioProfiless != null)
        {
            for (int i = 0; i < vSplitRatioProfiless.size(); i++)
            {
                SplitRatioProfiles obj = (SplitRatioProfiles) vSplitRatioProfiless.get(i);
                copyObj.addSplitRatioProfiles(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSplitRatioProfiless = null;
        }


        List vLinkDataTotals = getLinkDataTotals(con);
        if (vLinkDataTotals != null)
        {
            for (int i = 0; i < vLinkDataTotals.size(); i++)
            {
                LinkDataTotal obj = (LinkDataTotal) vLinkDataTotals.get(i);
                copyObj.addLinkDataTotal(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataTotals = null;
        }


        List vLinkPerformanceTotals = getLinkPerformanceTotals(con);
        if (vLinkPerformanceTotals != null)
        {
            for (int i = 0; i < vLinkPerformanceTotals.size(); i++)
            {
                LinkPerformanceTotal obj = (LinkPerformanceTotal) vLinkPerformanceTotals.get(i);
                copyObj.addLinkPerformanceTotal(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkPerformanceTotals = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LinksPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return LinksPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Links:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("NetworkId = ")
           .append(getNetworkId())
           .append("\n");
        str.append("BegNodeId = ")
           .append(getBegNodeId())
           .append("\n");
        str.append("EndNodeId = ")
           .append(getEndNodeId())
           .append("\n");
        str.append("Geom = ")
           .append(getGeom())
           .append("\n");
        str.append("Length = ")
           .append(getLength())
           .append("\n");
        str.append("DetailLevel = ")
           .append(getDetailLevel())
           .append("\n");
        str.append("InSynch = ")
           .append(getInSynch())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
