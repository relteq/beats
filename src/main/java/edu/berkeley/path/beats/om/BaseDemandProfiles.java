package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to DemandProfiles
 */
public abstract class BaseDemandProfiles extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final DemandProfilesPeer peer =
        new DemandProfilesPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the demandProfileSetId field */
    private Long demandProfileSetId;

    /** The value for the originLinkId field */
    private Long originLinkId;

    /** The value for the destinationLinkId field */
    private Long destinationLinkId;

    /** The value for the dt field */
    private BigDecimal dt;

    /** The value for the startTime field */
    private BigDecimal startTime;

    /** The value for the knob field */
    private BigDecimal knob;

    /** The value for the stdDeviationAdditive field */
    private BigDecimal stdDeviationAdditive;

    /** The value for the stdDeviationMultiplicative field */
    private BigDecimal stdDeviationMultiplicative;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated Demands
        if (collDemandss != null)
        {
            for (int i = 0; i < collDemandss.size(); i++)
            {
                ((Demands) collDemandss.get(i))
                        .setDemandProfileId(v);
            }
        }
    }

    /**
     * Get the DemandProfileSetId
     *
     * @return Long
     */
    public Long getDemandProfileSetId()
    {
        return demandProfileSetId;
    }


    /**
     * Set the value of DemandProfileSetId
     *
     * @param v new value
     */
    public void setDemandProfileSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.demandProfileSetId, v))
        {
            this.demandProfileSetId = v;
            setModified(true);
        }


        if (aDemandProfileSets != null && !ObjectUtils.equals(aDemandProfileSets.getId(), v))
        {
            aDemandProfileSets = null;
        }

    }

    /**
     * Get the OriginLinkId
     *
     * @return Long
     */
    public Long getOriginLinkId()
    {
        return originLinkId;
    }


    /**
     * Set the value of OriginLinkId
     *
     * @param v new value
     */
    public void setOriginLinkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.originLinkId, v))
        {
            this.originLinkId = v;
            setModified(true);
        }


        if (aLinkFamiliesRelatedByOriginLinkId != null && !ObjectUtils.equals(aLinkFamiliesRelatedByOriginLinkId.getId(), v))
        {
            aLinkFamiliesRelatedByOriginLinkId = null;
        }

    }

    /**
     * Get the DestinationLinkId
     *
     * @return Long
     */
    public Long getDestinationLinkId()
    {
        return destinationLinkId;
    }


    /**
     * Set the value of DestinationLinkId
     *
     * @param v new value
     */
    public void setDestinationLinkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.destinationLinkId, v))
        {
            this.destinationLinkId = v;
            setModified(true);
        }


        if (aLinkFamiliesRelatedByDestinationLinkId != null && !ObjectUtils.equals(aLinkFamiliesRelatedByDestinationLinkId.getId(), v))
        {
            aLinkFamiliesRelatedByDestinationLinkId = null;
        }

    }

    /**
     * Get the Dt
     *
     * @return BigDecimal
     */
    public BigDecimal getDt()
    {
        return dt;
    }


    /**
     * Set the value of Dt
     *
     * @param v new value
     */
    public void setDt(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.dt, v))
        {
            this.dt = v;
            setModified(true);
        }


    }

    /**
     * Get the StartTime
     *
     * @return BigDecimal
     */
    public BigDecimal getStartTime()
    {
        return startTime;
    }


    /**
     * Set the value of StartTime
     *
     * @param v new value
     */
    public void setStartTime(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.startTime, v))
        {
            this.startTime = v;
            setModified(true);
        }


    }

    /**
     * Get the Knob
     *
     * @return BigDecimal
     */
    public BigDecimal getKnob()
    {
        return knob;
    }


    /**
     * Set the value of Knob
     *
     * @param v new value
     */
    public void setKnob(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.knob, v))
        {
            this.knob = v;
            setModified(true);
        }


    }

    /**
     * Get the StdDeviationAdditive
     *
     * @return BigDecimal
     */
    public BigDecimal getStdDeviationAdditive()
    {
        return stdDeviationAdditive;
    }


    /**
     * Set the value of StdDeviationAdditive
     *
     * @param v new value
     */
    public void setStdDeviationAdditive(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.stdDeviationAdditive, v))
        {
            this.stdDeviationAdditive = v;
            setModified(true);
        }


    }

    /**
     * Get the StdDeviationMultiplicative
     *
     * @return BigDecimal
     */
    public BigDecimal getStdDeviationMultiplicative()
    {
        return stdDeviationMultiplicative;
    }


    /**
     * Set the value of StdDeviationMultiplicative
     *
     * @param v new value
     */
    public void setStdDeviationMultiplicative(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.stdDeviationMultiplicative, v))
        {
            this.stdDeviationMultiplicative = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private DemandProfileSets aDemandProfileSets;

    /**
     * Declares an association between this object and a DemandProfileSets object
     *
     * @param v DemandProfileSets
     * @throws TorqueException
     */
    public void setDemandProfileSets(DemandProfileSets v) throws TorqueException
    {
        if (v == null)
        {
            setDemandProfileSetId((Long) null);
        }
        else
        {
            setDemandProfileSetId(v.getId());
        }
        aDemandProfileSets = v;
    }


    /**
     * Returns the associated DemandProfileSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DemandProfileSets object
     * @throws TorqueException
     */
    public DemandProfileSets getDemandProfileSets()
        throws TorqueException
    {
        if (aDemandProfileSets == null && (!ObjectUtils.equals(this.demandProfileSetId, null)))
        {
            aDemandProfileSets = DemandProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.demandProfileSetId));
        }
        return aDemandProfileSets;
    }

    /**
     * Return the associated DemandProfileSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DemandProfileSets object
     * @throws TorqueException
     */
    public DemandProfileSets getDemandProfileSets(Connection connection)
        throws TorqueException
    {
        if (aDemandProfileSets == null && (!ObjectUtils.equals(this.demandProfileSetId, null)))
        {
            aDemandProfileSets = DemandProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.demandProfileSetId), connection);
        }
        return aDemandProfileSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDemandProfileSetsKey(ObjectKey key) throws TorqueException
    {

        setDemandProfileSetId(new Long(((NumberKey) key).longValue()));
    }




    private LinkFamilies aLinkFamiliesRelatedByOriginLinkId;

    /**
     * Declares an association between this object and a LinkFamilies object
     *
     * @param v LinkFamilies
     * @throws TorqueException
     */
    public void setLinkFamiliesRelatedByOriginLinkId(LinkFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setOriginLinkId((Long) null);
        }
        else
        {
            setOriginLinkId(v.getId());
        }
        aLinkFamiliesRelatedByOriginLinkId = v;
    }


    /**
     * Returns the associated LinkFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByOriginLinkId()
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByOriginLinkId == null && (!ObjectUtils.equals(this.originLinkId, null)))
        {
            aLinkFamiliesRelatedByOriginLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.originLinkId));
        }
        return aLinkFamiliesRelatedByOriginLinkId;
    }

    /**
     * Return the associated LinkFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByOriginLinkId(Connection connection)
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByOriginLinkId == null && (!ObjectUtils.equals(this.originLinkId, null)))
        {
            aLinkFamiliesRelatedByOriginLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.originLinkId), connection);
        }
        return aLinkFamiliesRelatedByOriginLinkId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLinkFamiliesRelatedByOriginLinkIdKey(ObjectKey key) throws TorqueException
    {

        setOriginLinkId(new Long(((NumberKey) key).longValue()));
    }




    private LinkFamilies aLinkFamiliesRelatedByDestinationLinkId;

    /**
     * Declares an association between this object and a LinkFamilies object
     *
     * @param v LinkFamilies
     * @throws TorqueException
     */
    public void setLinkFamiliesRelatedByDestinationLinkId(LinkFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setDestinationLinkId((Long) null);
        }
        else
        {
            setDestinationLinkId(v.getId());
        }
        aLinkFamiliesRelatedByDestinationLinkId = v;
    }


    /**
     * Returns the associated LinkFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByDestinationLinkId()
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByDestinationLinkId == null && (!ObjectUtils.equals(this.destinationLinkId, null)))
        {
            aLinkFamiliesRelatedByDestinationLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.destinationLinkId));
        }
        return aLinkFamiliesRelatedByDestinationLinkId;
    }

    /**
     * Return the associated LinkFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByDestinationLinkId(Connection connection)
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByDestinationLinkId == null && (!ObjectUtils.equals(this.destinationLinkId, null)))
        {
            aLinkFamiliesRelatedByDestinationLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.destinationLinkId), connection);
        }
        return aLinkFamiliesRelatedByDestinationLinkId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLinkFamiliesRelatedByDestinationLinkIdKey(ObjectKey key) throws TorqueException
    {

        setDestinationLinkId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collDemandss
     */
    protected List collDemandss;

    /**
     * Temporary storage of collDemandss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDemandss()
    {
        if (collDemandss == null)
        {
            collDemandss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Demands object to this object
     * through the Demands foreign key attribute
     *
     * @param l Demands
     * @throws TorqueException
     */
    public void addDemands(Demands l) throws TorqueException
    {
        getDemandss().add(l);
        l.setDemandProfiles((DemandProfiles) this);
    }

    /**
     * Method called to associate a Demands object to this object
     * through the Demands foreign key attribute using connection.
     *
     * @param l Demands
     * @throws TorqueException
     */
    public void addDemands(Demands l, Connection con) throws TorqueException
    {
        getDemandss(con).add(l);
        l.setDemandProfiles((DemandProfiles) this);
    }

    /**
     * The criteria used to select the current contents of collDemandss
     */
    private Criteria lastDemandssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDemandss()
        throws TorqueException
    {
        if (collDemandss == null)
        {
            collDemandss = getDemandss(new Criteria(10));
        }
        return collDemandss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DemandProfiles has previously
     * been saved, it will retrieve related Demandss from storage.
     * If this DemandProfiles is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDemandss(Criteria criteria) throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId() );
                collDemandss = DemandsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
                if (!lastDemandssCriteria.equals(criteria))
                {
                    collDemandss = DemandsPeer.doSelect(criteria);
                }
            }
        }
        lastDemandssCriteria = criteria;

        return collDemandss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandss(Connection con) throws TorqueException
    {
        if (collDemandss == null)
        {
            collDemandss = getDemandss(new Criteria(10), con);
        }
        return collDemandss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DemandProfiles has previously
     * been saved, it will retrieve related Demandss from storage.
     * If this DemandProfiles is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                 criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
                 collDemandss = DemandsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
                 if (!lastDemandssCriteria.equals(criteria))
                 {
                     collDemandss = DemandsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDemandssCriteria = criteria;

         return collDemandss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DemandProfiles is new, it will return
     * an empty collection; or if this DemandProfiles has previously
     * been saved, it will retrieve related Demandss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DemandProfiles.
     */
    protected List getDemandssJoinDemandProfiles(Criteria criteria)
        throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
                collDemandss = DemandsPeer.doSelectJoinDemandProfiles(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
            if (!lastDemandssCriteria.equals(criteria))
            {
                collDemandss = DemandsPeer.doSelectJoinDemandProfiles(criteria);
            }
        }
        lastDemandssCriteria = criteria;

        return collDemandss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DemandProfiles is new, it will return
     * an empty collection; or if this DemandProfiles has previously
     * been saved, it will retrieve related Demandss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DemandProfiles.
     */
    protected List getDemandssJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
                collDemandss = DemandsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandsPeer.DEMAND_PROFILE_ID, getId());
            if (!lastDemandssCriteria.equals(criteria))
            {
                collDemandss = DemandsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastDemandssCriteria = criteria;

        return collDemandss;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("DemandProfileSetId");
            fieldNames.add("OriginLinkId");
            fieldNames.add("DestinationLinkId");
            fieldNames.add("Dt");
            fieldNames.add("StartTime");
            fieldNames.add("Knob");
            fieldNames.add("StdDeviationAdditive");
            fieldNames.add("StdDeviationMultiplicative");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("DemandProfileSetId"))
        {
            return getDemandProfileSetId();
        }
        if (name.equals("OriginLinkId"))
        {
            return getOriginLinkId();
        }
        if (name.equals("DestinationLinkId"))
        {
            return getDestinationLinkId();
        }
        if (name.equals("Dt"))
        {
            return getDt();
        }
        if (name.equals("StartTime"))
        {
            return getStartTime();
        }
        if (name.equals("Knob"))
        {
            return getKnob();
        }
        if (name.equals("StdDeviationAdditive"))
        {
            return getStdDeviationAdditive();
        }
        if (name.equals("StdDeviationMultiplicative"))
        {
            return getStdDeviationMultiplicative();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("DemandProfileSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDemandProfileSetId((Long) value);
            return true;
        }
        if (name.equals("OriginLinkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setOriginLinkId((Long) value);
            return true;
        }
        if (name.equals("DestinationLinkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDestinationLinkId((Long) value);
            return true;
        }
        if (name.equals("Dt"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDt((BigDecimal) value);
            return true;
        }
        if (name.equals("StartTime"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setStartTime((BigDecimal) value);
            return true;
        }
        if (name.equals("Knob"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setKnob((BigDecimal) value);
            return true;
        }
        if (name.equals("StdDeviationAdditive"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setStdDeviationAdditive((BigDecimal) value);
            return true;
        }
        if (name.equals("StdDeviationMultiplicative"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setStdDeviationMultiplicative((BigDecimal) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(DemandProfilesPeer.ID))
        {
            return getId();
        }
        if (name.equals(DemandProfilesPeer.DEMAND_PROFILE_SET_ID))
        {
            return getDemandProfileSetId();
        }
        if (name.equals(DemandProfilesPeer.ORIGIN_LINK_ID))
        {
            return getOriginLinkId();
        }
        if (name.equals(DemandProfilesPeer.DESTINATION_LINK_ID))
        {
            return getDestinationLinkId();
        }
        if (name.equals(DemandProfilesPeer.DT))
        {
            return getDt();
        }
        if (name.equals(DemandProfilesPeer.START_TIME))
        {
            return getStartTime();
        }
        if (name.equals(DemandProfilesPeer.KNOB))
        {
            return getKnob();
        }
        if (name.equals(DemandProfilesPeer.STD_DEVIATION_ADDITIVE))
        {
            return getStdDeviationAdditive();
        }
        if (name.equals(DemandProfilesPeer.STD_DEVIATION_MULTIPLICATIVE))
        {
            return getStdDeviationMultiplicative();
        }
        if (name.equals(DemandProfilesPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(DemandProfilesPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(DemandProfilesPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(DemandProfilesPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(DemandProfilesPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (DemandProfilesPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (DemandProfilesPeer.DEMAND_PROFILE_SET_ID.equals(name))
        {
            return setByName("DemandProfileSetId", value);
        }
      if (DemandProfilesPeer.ORIGIN_LINK_ID.equals(name))
        {
            return setByName("OriginLinkId", value);
        }
      if (DemandProfilesPeer.DESTINATION_LINK_ID.equals(name))
        {
            return setByName("DestinationLinkId", value);
        }
      if (DemandProfilesPeer.DT.equals(name))
        {
            return setByName("Dt", value);
        }
      if (DemandProfilesPeer.START_TIME.equals(name))
        {
            return setByName("StartTime", value);
        }
      if (DemandProfilesPeer.KNOB.equals(name))
        {
            return setByName("Knob", value);
        }
      if (DemandProfilesPeer.STD_DEVIATION_ADDITIVE.equals(name))
        {
            return setByName("StdDeviationAdditive", value);
        }
      if (DemandProfilesPeer.STD_DEVIATION_MULTIPLICATIVE.equals(name))
        {
            return setByName("StdDeviationMultiplicative", value);
        }
      if (DemandProfilesPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (DemandProfilesPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (DemandProfilesPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (DemandProfilesPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (DemandProfilesPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getDemandProfileSetId();
        }
        if (pos == 2)
        {
            return getOriginLinkId();
        }
        if (pos == 3)
        {
            return getDestinationLinkId();
        }
        if (pos == 4)
        {
            return getDt();
        }
        if (pos == 5)
        {
            return getStartTime();
        }
        if (pos == 6)
        {
            return getKnob();
        }
        if (pos == 7)
        {
            return getStdDeviationAdditive();
        }
        if (pos == 8)
        {
            return getStdDeviationMultiplicative();
        }
        if (pos == 9)
        {
            return getCreated();
        }
        if (pos == 10)
        {
            return getModified();
        }
        if (pos == 11)
        {
            return getCreatedBy();
        }
        if (pos == 12)
        {
            return getModifiedBy();
        }
        if (pos == 13)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("DemandProfileSetId", value);
        }
    if (position == 2)
        {
            return setByName("OriginLinkId", value);
        }
    if (position == 3)
        {
            return setByName("DestinationLinkId", value);
        }
    if (position == 4)
        {
            return setByName("Dt", value);
        }
    if (position == 5)
        {
            return setByName("StartTime", value);
        }
    if (position == 6)
        {
            return setByName("Knob", value);
        }
    if (position == 7)
        {
            return setByName("StdDeviationAdditive", value);
        }
    if (position == 8)
        {
            return setByName("StdDeviationMultiplicative", value);
        }
    if (position == 9)
        {
            return setByName("Created", value);
        }
    if (position == 10)
        {
            return setByName("Modified", value);
        }
    if (position == 11)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 12)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 13)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(DemandProfilesPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    DemandProfilesPeer.doInsert((DemandProfiles) this, con);
                    setNew(false);
                }
                else
                {
                    DemandProfilesPeer.doUpdate((DemandProfiles) this, con);
                }
            }


            if (collDemandss != null)
            {
                for (int i = 0; i < collDemandss.size(); i++)
                {
                    ((Demands) collDemandss.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public DemandProfiles copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public DemandProfiles copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public DemandProfiles copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new DemandProfiles(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public DemandProfiles copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new DemandProfiles(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected DemandProfiles copyInto(DemandProfiles copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected DemandProfiles copyInto(DemandProfiles copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected DemandProfiles copyInto(DemandProfiles copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setDemandProfileSetId(demandProfileSetId);
        copyObj.setOriginLinkId(originLinkId);
        copyObj.setDestinationLinkId(destinationLinkId);
        copyObj.setDt(dt);
        copyObj.setStartTime(startTime);
        copyObj.setKnob(knob);
        copyObj.setStdDeviationAdditive(stdDeviationAdditive);
        copyObj.setStdDeviationMultiplicative(stdDeviationMultiplicative);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vDemandss = getDemandss();
        if (vDemandss != null)
        {
            for (int i = 0; i < vDemandss.size(); i++)
            {
                Demands obj = (Demands) vDemandss.get(i);
                copyObj.addDemands(obj.copy());
            }
        }
        else
        {
            copyObj.collDemandss = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected DemandProfiles copyInto(DemandProfiles copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setDemandProfileSetId(demandProfileSetId);
        copyObj.setOriginLinkId(originLinkId);
        copyObj.setDestinationLinkId(destinationLinkId);
        copyObj.setDt(dt);
        copyObj.setStartTime(startTime);
        copyObj.setKnob(knob);
        copyObj.setStdDeviationAdditive(stdDeviationAdditive);
        copyObj.setStdDeviationMultiplicative(stdDeviationMultiplicative);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vDemandss = getDemandss(con);
        if (vDemandss != null)
        {
            for (int i = 0; i < vDemandss.size(); i++)
            {
                Demands obj = (Demands) vDemandss.get(i);
                copyObj.addDemands(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDemandss = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DemandProfilesPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return DemandProfilesPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("DemandProfiles:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("DemandProfileSetId = ")
           .append(getDemandProfileSetId())
           .append("\n");
        str.append("OriginLinkId = ")
           .append(getOriginLinkId())
           .append("\n");
        str.append("DestinationLinkId = ")
           .append(getDestinationLinkId())
           .append("\n");
        str.append("Dt = ")
           .append(getDt())
           .append("\n");
        str.append("StartTime = ")
           .append(getStartTime())
           .append("\n");
        str.append("Knob = ")
           .append(getKnob())
           .append("\n");
        str.append("StdDeviationAdditive = ")
           .append(getStdDeviationAdditive())
           .append("\n");
        str.append("StdDeviationMultiplicative = ")
           .append(getStdDeviationMultiplicative())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
