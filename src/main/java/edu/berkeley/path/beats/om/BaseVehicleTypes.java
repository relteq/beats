package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to VehicleTypes
 */
public abstract class BaseVehicleTypes extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final VehicleTypesPeer peer =
        new VehicleTypesPeer();


    /** The value for the vehicleTypeId field */
    private Long vehicleTypeId;

    /** The value for the projectId field */
    private Long projectId;

    /** The value for the weight field */
    private BigDecimal weight;

    /** The value for the name field */
    private String name;

    /** The value for the standard field */
    private Boolean standard;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the VehicleTypeId
     *
     * @return Long
     */
    public Long getVehicleTypeId()
    {
        return vehicleTypeId;
    }


    /**
     * Set the value of VehicleTypeId
     *
     * @param v new value
     */
    public void setVehicleTypeId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.vehicleTypeId, v))
        {
            this.vehicleTypeId = v;
            setModified(true);
        }



        // update associated VehicleTypesInSets
        if (collVehicleTypesInSetss != null)
        {
            for (int i = 0; i < collVehicleTypesInSetss.size(); i++)
            {
                ((VehicleTypesInSets) collVehicleTypesInSetss.get(i))
                        .setVehicleTypeId(v);
            }
        }

        // update associated InitialDensities
        if (collInitialDensitiess != null)
        {
            for (int i = 0; i < collInitialDensitiess.size(); i++)
            {
                ((InitialDensities) collInitialDensitiess.get(i))
                        .setVehicleTypeId(v);
            }
        }

        // update associated WeavingFactors
        if (collWeavingFactorss != null)
        {
            for (int i = 0; i < collWeavingFactorss.size(); i++)
            {
                ((WeavingFactors) collWeavingFactorss.get(i))
                        .setVehicleTypeId(v);
            }
        }

        // update associated SplitRatios
        if (collSplitRatioss != null)
        {
            for (int i = 0; i < collSplitRatioss.size(); i++)
            {
                ((SplitRatios) collSplitRatioss.get(i))
                        .setVehicleTypeId(v);
            }
        }

        // update associated Demands
        if (collDemandss != null)
        {
            for (int i = 0; i < collDemandss.size(); i++)
            {
                ((Demands) collDemandss.get(i))
                        .setVehicleTypeId(v);
            }
        }

        // update associated EventSplitRatios
        if (collEventSplitRatioss != null)
        {
            for (int i = 0; i < collEventSplitRatioss.size(); i++)
            {
                ((EventSplitRatios) collEventSplitRatioss.get(i))
                        .setVehicleTypeId(v);
            }
        }

        // update associated LinkDataDetailed
        if (collLinkDataDetaileds != null)
        {
            for (int i = 0; i < collLinkDataDetaileds.size(); i++)
            {
                ((LinkDataDetailed) collLinkDataDetaileds.get(i))
                        .setVehicleTypeId(v);
            }
        }
    }

    /**
     * Get the ProjectId
     *
     * @return Long
     */
    public Long getProjectId()
    {
        return projectId;
    }


    /**
     * Set the value of ProjectId
     *
     * @param v new value
     */
    public void setProjectId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.projectId, v))
        {
            this.projectId = v;
            setModified(true);
        }


        if (aProjects != null && !ObjectUtils.equals(aProjects.getId(), v))
        {
            aProjects = null;
        }

    }

    /**
     * Get the Weight
     *
     * @return BigDecimal
     */
    public BigDecimal getWeight()
    {
        return weight;
    }


    /**
     * Set the value of Weight
     *
     * @param v new value
     */
    public void setWeight(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.weight, v))
        {
            this.weight = v;
            setModified(true);
        }


    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Standard
     *
     * @return Boolean
     */
    public Boolean getStandard()
    {
        return standard;
    }


    /**
     * Set the value of Standard
     *
     * @param v new value
     */
    public void setStandard(Boolean v) 
    {

        if (!ObjectUtils.equals(this.standard, v))
        {
            this.standard = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private Projects aProjects;

    /**
     * Declares an association between this object and a Projects object
     *
     * @param v Projects
     * @throws TorqueException
     */
    public void setProjects(Projects v) throws TorqueException
    {
        if (v == null)
        {
            setProjectId((Long) null);
        }
        else
        {
            setProjectId(v.getId());
        }
        aProjects = v;
    }


    /**
     * Returns the associated Projects object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Projects object
     * @throws TorqueException
     */
    public Projects getProjects()
        throws TorqueException
    {
        if (aProjects == null && (!ObjectUtils.equals(this.projectId, null)))
        {
            aProjects = ProjectsPeer.retrieveByPK(SimpleKey.keyFor(this.projectId));
        }
        return aProjects;
    }

    /**
     * Return the associated Projects object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Projects object
     * @throws TorqueException
     */
    public Projects getProjects(Connection connection)
        throws TorqueException
    {
        if (aProjects == null && (!ObjectUtils.equals(this.projectId, null)))
        {
            aProjects = ProjectsPeer.retrieveByPK(SimpleKey.keyFor(this.projectId), connection);
        }
        return aProjects;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectsKey(ObjectKey key) throws TorqueException
    {

        setProjectId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collVehicleTypesInSetss
     */
    protected List collVehicleTypesInSetss;

    /**
     * Temporary storage of collVehicleTypesInSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initVehicleTypesInSetss()
    {
        if (collVehicleTypesInSetss == null)
        {
            collVehicleTypesInSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a VehicleTypesInSets object to this object
     * through the VehicleTypesInSets foreign key attribute
     *
     * @param l VehicleTypesInSets
     * @throws TorqueException
     */
    public void addVehicleTypesInSets(VehicleTypesInSets l) throws TorqueException
    {
        getVehicleTypesInSetss().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a VehicleTypesInSets object to this object
     * through the VehicleTypesInSets foreign key attribute using connection.
     *
     * @param l VehicleTypesInSets
     * @throws TorqueException
     */
    public void addVehicleTypesInSets(VehicleTypesInSets l, Connection con) throws TorqueException
    {
        getVehicleTypesInSetss(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collVehicleTypesInSetss
     */
    private Criteria lastVehicleTypesInSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehicleTypesInSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getVehicleTypesInSetss()
        throws TorqueException
    {
        if (collVehicleTypesInSetss == null)
        {
            collVehicleTypesInSetss = getVehicleTypesInSetss(new Criteria(10));
        }
        return collVehicleTypesInSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related VehicleTypesInSetss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getVehicleTypesInSetss(Criteria criteria) throws TorqueException
    {
        if (collVehicleTypesInSetss == null)
        {
            if (isNew())
            {
               collVehicleTypesInSetss = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastVehicleTypesInSetssCriteria.equals(criteria))
                {
                    collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelect(criteria);
                }
            }
        }
        lastVehicleTypesInSetssCriteria = criteria;

        return collVehicleTypesInSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehicleTypesInSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehicleTypesInSetss(Connection con) throws TorqueException
    {
        if (collVehicleTypesInSetss == null)
        {
            collVehicleTypesInSetss = getVehicleTypesInSetss(new Criteria(10), con);
        }
        return collVehicleTypesInSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related VehicleTypesInSetss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehicleTypesInSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collVehicleTypesInSetss == null)
        {
            if (isNew())
            {
               collVehicleTypesInSetss = new ArrayList();
            }
            else
            {
                 criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastVehicleTypesInSetssCriteria.equals(criteria))
                 {
                     collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastVehicleTypesInSetssCriteria = criteria;

         return collVehicleTypesInSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related VehicleTypesInSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getVehicleTypesInSetssJoinVehicleTypeSets(Criteria criteria)
        throws TorqueException
    {
        if (collVehicleTypesInSetss == null)
        {
            if (isNew())
            {
               collVehicleTypesInSetss = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelectJoinVehicleTypeSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastVehicleTypesInSetssCriteria.equals(criteria))
            {
                collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelectJoinVehicleTypeSets(criteria);
            }
        }
        lastVehicleTypesInSetssCriteria = criteria;

        return collVehicleTypesInSetss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related VehicleTypesInSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getVehicleTypesInSetssJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collVehicleTypesInSetss == null)
        {
            if (isNew())
            {
               collVehicleTypesInSetss = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastVehicleTypesInSetssCriteria.equals(criteria))
            {
                collVehicleTypesInSetss = VehicleTypesInSetsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastVehicleTypesInSetssCriteria = criteria;

        return collVehicleTypesInSetss;
    }





    /**
     * Collection to store aggregation of collInitialDensitiess
     */
    protected List collInitialDensitiess;

    /**
     * Temporary storage of collInitialDensitiess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInitialDensitiess()
    {
        if (collInitialDensitiess == null)
        {
            collInitialDensitiess = new ArrayList();
        }
    }


    /**
     * Method called to associate a InitialDensities object to this object
     * through the InitialDensities foreign key attribute
     *
     * @param l InitialDensities
     * @throws TorqueException
     */
    public void addInitialDensities(InitialDensities l) throws TorqueException
    {
        getInitialDensitiess().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a InitialDensities object to this object
     * through the InitialDensities foreign key attribute using connection.
     *
     * @param l InitialDensities
     * @throws TorqueException
     */
    public void addInitialDensities(InitialDensities l, Connection con) throws TorqueException
    {
        getInitialDensitiess(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collInitialDensitiess
     */
    private Criteria lastInitialDensitiessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitiess(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getInitialDensitiess()
        throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            collInitialDensitiess = getInitialDensitiess(new Criteria(10));
        }
        return collInitialDensitiess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related InitialDensitiess from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInitialDensitiess(Criteria criteria) throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            if (isNew())
            {
               collInitialDensitiess = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collInitialDensitiess = InitialDensitiesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastInitialDensitiessCriteria.equals(criteria))
                {
                    collInitialDensitiess = InitialDensitiesPeer.doSelect(criteria);
                }
            }
        }
        lastInitialDensitiessCriteria = criteria;

        return collInitialDensitiess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitiess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitiess(Connection con) throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            collInitialDensitiess = getInitialDensitiess(new Criteria(10), con);
        }
        return collInitialDensitiess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related InitialDensitiess from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitiess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            if (isNew())
            {
               collInitialDensitiess = new ArrayList();
            }
            else
            {
                 criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collInitialDensitiess = InitialDensitiesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastInitialDensitiessCriteria.equals(criteria))
                 {
                     collInitialDensitiess = InitialDensitiesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInitialDensitiessCriteria = criteria;

         return collInitialDensitiess;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related InitialDensitiess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getInitialDensitiessJoinInitialDensitySets(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            if (isNew())
            {
               collInitialDensitiess = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastInitialDensitiessCriteria.equals(criteria))
            {
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        lastInitialDensitiessCriteria = criteria;

        return collInitialDensitiess;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related InitialDensitiess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getInitialDensitiessJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            if (isNew())
            {
               collInitialDensitiess = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastInitialDensitiessCriteria.equals(criteria))
            {
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastInitialDensitiessCriteria = criteria;

        return collInitialDensitiess;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related InitialDensitiess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getInitialDensitiessJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            if (isNew())
            {
               collInitialDensitiess = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastInitialDensitiessCriteria.equals(criteria))
            {
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastInitialDensitiessCriteria = criteria;

        return collInitialDensitiess;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related InitialDensitiess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getInitialDensitiessJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitiess == null)
        {
            if (isNew())
            {
               collInitialDensitiess = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitiesPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastInitialDensitiessCriteria.equals(criteria))
            {
                collInitialDensitiess = InitialDensitiesPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastInitialDensitiessCriteria = criteria;

        return collInitialDensitiess;
    }





    /**
     * Collection to store aggregation of collWeavingFactorss
     */
    protected List collWeavingFactorss;

    /**
     * Temporary storage of collWeavingFactorss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initWeavingFactorss()
    {
        if (collWeavingFactorss == null)
        {
            collWeavingFactorss = new ArrayList();
        }
    }


    /**
     * Method called to associate a WeavingFactors object to this object
     * through the WeavingFactors foreign key attribute
     *
     * @param l WeavingFactors
     * @throws TorqueException
     */
    public void addWeavingFactors(WeavingFactors l) throws TorqueException
    {
        getWeavingFactorss().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a WeavingFactors object to this object
     * through the WeavingFactors foreign key attribute using connection.
     *
     * @param l WeavingFactors
     * @throws TorqueException
     */
    public void addWeavingFactors(WeavingFactors l, Connection con) throws TorqueException
    {
        getWeavingFactorss(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collWeavingFactorss
     */
    private Criteria lastWeavingFactorssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getWeavingFactorss()
        throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            collWeavingFactorss = getWeavingFactorss(new Criteria(10));
        }
        return collWeavingFactorss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related WeavingFactorss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getWeavingFactorss(Criteria criteria) throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            if (isNew())
            {
               collWeavingFactorss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collWeavingFactorss = WeavingFactorsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastWeavingFactorssCriteria.equals(criteria))
                {
                    collWeavingFactorss = WeavingFactorsPeer.doSelect(criteria);
                }
            }
        }
        lastWeavingFactorssCriteria = criteria;

        return collWeavingFactorss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorss(Connection con) throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            collWeavingFactorss = getWeavingFactorss(new Criteria(10), con);
        }
        return collWeavingFactorss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related WeavingFactorss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            if (isNew())
            {
               collWeavingFactorss = new ArrayList();
            }
            else
            {
                 criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collWeavingFactorss = WeavingFactorsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastWeavingFactorssCriteria.equals(criteria))
                 {
                     collWeavingFactorss = WeavingFactorsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastWeavingFactorssCriteria = criteria;

         return collWeavingFactorss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related WeavingFactorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getWeavingFactorssJoinWeavingFactorSets(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            if (isNew())
            {
               collWeavingFactorss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastWeavingFactorssCriteria.equals(criteria))
            {
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        lastWeavingFactorssCriteria = criteria;

        return collWeavingFactorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related WeavingFactorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getWeavingFactorssJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            if (isNew())
            {
               collWeavingFactorss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastWeavingFactorssCriteria.equals(criteria))
            {
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        lastWeavingFactorssCriteria = criteria;

        return collWeavingFactorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related WeavingFactorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getWeavingFactorssJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            if (isNew())
            {
               collWeavingFactorss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastWeavingFactorssCriteria.equals(criteria))
            {
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        lastWeavingFactorssCriteria = criteria;

        return collWeavingFactorss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related WeavingFactorss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getWeavingFactorssJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorss == null)
        {
            if (isNew())
            {
               collWeavingFactorss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastWeavingFactorssCriteria.equals(criteria))
            {
                collWeavingFactorss = WeavingFactorsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastWeavingFactorssCriteria = criteria;

        return collWeavingFactorss;
    }





    /**
     * Collection to store aggregation of collSplitRatioss
     */
    protected List collSplitRatioss;

    /**
     * Temporary storage of collSplitRatioss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSplitRatioss()
    {
        if (collSplitRatioss == null)
        {
            collSplitRatioss = new ArrayList();
        }
    }


    /**
     * Method called to associate a SplitRatios object to this object
     * through the SplitRatios foreign key attribute
     *
     * @param l SplitRatios
     * @throws TorqueException
     */
    public void addSplitRatios(SplitRatios l) throws TorqueException
    {
        getSplitRatioss().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a SplitRatios object to this object
     * through the SplitRatios foreign key attribute using connection.
     *
     * @param l SplitRatios
     * @throws TorqueException
     */
    public void addSplitRatios(SplitRatios l, Connection con) throws TorqueException
    {
        getSplitRatioss(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collSplitRatioss
     */
    private Criteria lastSplitRatiossCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatioss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSplitRatioss()
        throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            collSplitRatioss = getSplitRatioss(new Criteria(10));
        }
        return collSplitRatioss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related SplitRatioss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSplitRatioss(Criteria criteria) throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            if (isNew())
            {
               collSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collSplitRatioss = SplitRatiosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastSplitRatiossCriteria.equals(criteria))
                {
                    collSplitRatioss = SplitRatiosPeer.doSelect(criteria);
                }
            }
        }
        lastSplitRatiossCriteria = criteria;

        return collSplitRatioss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSplitRatioss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatioss(Connection con) throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            collSplitRatioss = getSplitRatioss(new Criteria(10), con);
        }
        return collSplitRatioss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related SplitRatioss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSplitRatioss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            if (isNew())
            {
               collSplitRatioss = new ArrayList();
            }
            else
            {
                 criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collSplitRatioss = SplitRatiosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastSplitRatiossCriteria.equals(criteria))
                 {
                     collSplitRatioss = SplitRatiosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSplitRatiossCriteria = criteria;

         return collSplitRatioss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related SplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getSplitRatiossJoinSplitRatioProfiles(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            if (isNew())
            {
               collSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collSplitRatioss = SplitRatiosPeer.doSelectJoinSplitRatioProfiles(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastSplitRatiossCriteria.equals(criteria))
            {
                collSplitRatioss = SplitRatiosPeer.doSelectJoinSplitRatioProfiles(criteria);
            }
        }
        lastSplitRatiossCriteria = criteria;

        return collSplitRatioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related SplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getSplitRatiossJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            if (isNew())
            {
               collSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collSplitRatioss = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastSplitRatiossCriteria.equals(criteria))
            {
                collSplitRatioss = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        lastSplitRatiossCriteria = criteria;

        return collSplitRatioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related SplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getSplitRatiossJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            if (isNew())
            {
               collSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collSplitRatioss = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastSplitRatiossCriteria.equals(criteria))
            {
                collSplitRatioss = SplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        lastSplitRatiossCriteria = criteria;

        return collSplitRatioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related SplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getSplitRatiossJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collSplitRatioss == null)
        {
            if (isNew())
            {
               collSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collSplitRatioss = SplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastSplitRatiossCriteria.equals(criteria))
            {
                collSplitRatioss = SplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastSplitRatiossCriteria = criteria;

        return collSplitRatioss;
    }





    /**
     * Collection to store aggregation of collDemandss
     */
    protected List collDemandss;

    /**
     * Temporary storage of collDemandss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDemandss()
    {
        if (collDemandss == null)
        {
            collDemandss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Demands object to this object
     * through the Demands foreign key attribute
     *
     * @param l Demands
     * @throws TorqueException
     */
    public void addDemands(Demands l) throws TorqueException
    {
        getDemandss().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a Demands object to this object
     * through the Demands foreign key attribute using connection.
     *
     * @param l Demands
     * @throws TorqueException
     */
    public void addDemands(Demands l, Connection con) throws TorqueException
    {
        getDemandss(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collDemandss
     */
    private Criteria lastDemandssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDemandss()
        throws TorqueException
    {
        if (collDemandss == null)
        {
            collDemandss = getDemandss(new Criteria(10));
        }
        return collDemandss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related Demandss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDemandss(Criteria criteria) throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collDemandss = DemandsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastDemandssCriteria.equals(criteria))
                {
                    collDemandss = DemandsPeer.doSelect(criteria);
                }
            }
        }
        lastDemandssCriteria = criteria;

        return collDemandss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandss(Connection con) throws TorqueException
    {
        if (collDemandss == null)
        {
            collDemandss = getDemandss(new Criteria(10), con);
        }
        return collDemandss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related Demandss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                 criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collDemandss = DemandsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastDemandssCriteria.equals(criteria))
                 {
                     collDemandss = DemandsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDemandssCriteria = criteria;

         return collDemandss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related Demandss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getDemandssJoinDemandProfiles(Criteria criteria)
        throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collDemandss = DemandsPeer.doSelectJoinDemandProfiles(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastDemandssCriteria.equals(criteria))
            {
                collDemandss = DemandsPeer.doSelectJoinDemandProfiles(criteria);
            }
        }
        lastDemandssCriteria = criteria;

        return collDemandss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related Demandss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getDemandssJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collDemandss == null)
        {
            if (isNew())
            {
               collDemandss = new ArrayList();
            }
            else
            {
                criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collDemandss = DemandsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandsPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastDemandssCriteria.equals(criteria))
            {
                collDemandss = DemandsPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastDemandssCriteria = criteria;

        return collDemandss;
    }





    /**
     * Collection to store aggregation of collEventSplitRatioss
     */
    protected List collEventSplitRatioss;

    /**
     * Temporary storage of collEventSplitRatioss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initEventSplitRatioss()
    {
        if (collEventSplitRatioss == null)
        {
            collEventSplitRatioss = new ArrayList();
        }
    }


    /**
     * Method called to associate a EventSplitRatios object to this object
     * through the EventSplitRatios foreign key attribute
     *
     * @param l EventSplitRatios
     * @throws TorqueException
     */
    public void addEventSplitRatios(EventSplitRatios l) throws TorqueException
    {
        getEventSplitRatioss().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a EventSplitRatios object to this object
     * through the EventSplitRatios foreign key attribute using connection.
     *
     * @param l EventSplitRatios
     * @throws TorqueException
     */
    public void addEventSplitRatios(EventSplitRatios l, Connection con) throws TorqueException
    {
        getEventSplitRatioss(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collEventSplitRatioss
     */
    private Criteria lastEventSplitRatiossCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSplitRatioss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getEventSplitRatioss()
        throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            collEventSplitRatioss = getEventSplitRatioss(new Criteria(10));
        }
        return collEventSplitRatioss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related EventSplitRatioss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getEventSplitRatioss(Criteria criteria) throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            if (isNew())
            {
               collEventSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collEventSplitRatioss = EventSplitRatiosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastEventSplitRatiossCriteria.equals(criteria))
                {
                    collEventSplitRatioss = EventSplitRatiosPeer.doSelect(criteria);
                }
            }
        }
        lastEventSplitRatiossCriteria = criteria;

        return collEventSplitRatioss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSplitRatioss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSplitRatioss(Connection con) throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            collEventSplitRatioss = getEventSplitRatioss(new Criteria(10), con);
        }
        return collEventSplitRatioss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related EventSplitRatioss from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSplitRatioss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            if (isNew())
            {
               collEventSplitRatioss = new ArrayList();
            }
            else
            {
                 criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collEventSplitRatioss = EventSplitRatiosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastEventSplitRatiossCriteria.equals(criteria))
                 {
                     collEventSplitRatioss = EventSplitRatiosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastEventSplitRatiossCriteria = criteria;

         return collEventSplitRatioss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related EventSplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getEventSplitRatiossJoinEvents(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            if (isNew())
            {
               collEventSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinEvents(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastEventSplitRatiossCriteria.equals(criteria))
            {
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinEvents(criteria);
            }
        }
        lastEventSplitRatiossCriteria = criteria;

        return collEventSplitRatioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related EventSplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getEventSplitRatiossJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            if (isNew())
            {
               collEventSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastEventSplitRatiossCriteria.equals(criteria))
            {
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByInLinkId(criteria);
            }
        }
        lastEventSplitRatiossCriteria = criteria;

        return collEventSplitRatioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related EventSplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getEventSplitRatiossJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            if (isNew())
            {
               collEventSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastEventSplitRatiossCriteria.equals(criteria))
            {
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria);
            }
        }
        lastEventSplitRatiossCriteria = criteria;

        return collEventSplitRatioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related EventSplitRatioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getEventSplitRatiossJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collEventSplitRatioss == null)
        {
            if (isNew())
            {
               collEventSplitRatioss = new ArrayList();
            }
            else
            {
                criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSplitRatiosPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastEventSplitRatiossCriteria.equals(criteria))
            {
                collEventSplitRatioss = EventSplitRatiosPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastEventSplitRatiossCriteria = criteria;

        return collEventSplitRatioss;
    }





    /**
     * Collection to store aggregation of collLinkDataDetaileds
     */
    protected List collLinkDataDetaileds;

    /**
     * Temporary storage of collLinkDataDetaileds to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initLinkDataDetaileds()
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = new ArrayList();
        }
    }


    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailed(LinkDataDetailed l) throws TorqueException
    {
        getLinkDataDetaileds().add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * Method called to associate a LinkDataDetailed object to this object
     * through the LinkDataDetailed foreign key attribute using connection.
     *
     * @param l LinkDataDetailed
     * @throws TorqueException
     */
    public void addLinkDataDetailed(LinkDataDetailed l, Connection con) throws TorqueException
    {
        getLinkDataDetaileds(con).add(l);
        l.setVehicleTypes((VehicleTypes) this);
    }

    /**
     * The criteria used to select the current contents of collLinkDataDetaileds
     */
    private Criteria lastLinkDataDetailedsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetaileds(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getLinkDataDetaileds()
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = getLinkDataDetaileds(new Criteria(10));
        }
        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getLinkDataDetaileds(Criteria criteria) throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId() );
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                if (!lastLinkDataDetailedsCriteria.equals(criteria))
                {
                    collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria);
                }
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getLinkDataDetaileds(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetaileds(Connection con) throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            collLinkDataDetaileds = getLinkDataDetaileds(new Criteria(10), con);
        }
        return collLinkDataDetaileds;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     * If this VehicleTypes is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getLinkDataDetaileds(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                 criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                 if (!lastLinkDataDetailedsCriteria.equals(criteria))
                 {
                     collLinkDataDetaileds = LinkDataDetailedPeer.doSelect(criteria, con);
                 }
             }
         }
         lastLinkDataDetailedsCriteria = criteria;

         return collLinkDataDetaileds;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getLinkDataDetailedsJoinLinkFamiliesRelatedByLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByLinkId(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getLinkDataDetailedsJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getLinkDataDetailedsJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getLinkDataDetailedsJoinLinkFamiliesRelatedByDestinationLinkId(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinLinkFamiliesRelatedByDestinationLinkId(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this VehicleTypes is new, it will return
     * an empty collection; or if this VehicleTypes has previously
     * been saved, it will retrieve related LinkDataDetaileds from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in VehicleTypes.
     */
    protected List getLinkDataDetailedsJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        if (collLinkDataDetaileds == null)
        {
            if (isNew())
            {
               collLinkDataDetaileds = new ArrayList();
            }
            else
            {
                criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(LinkDataDetailedPeer.VEHICLE_TYPE_ID, getVehicleTypeId());
            if (!lastLinkDataDetailedsCriteria.equals(criteria))
            {
                collLinkDataDetaileds = LinkDataDetailedPeer.doSelectJoinVehicleTypes(criteria);
            }
        }
        lastLinkDataDetailedsCriteria = criteria;

        return collLinkDataDetaileds;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("VehicleTypeId");
            fieldNames.add("ProjectId");
            fieldNames.add("Weight");
            fieldNames.add("Name");
            fieldNames.add("Standard");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("VehicleTypeId"))
        {
            return getVehicleTypeId();
        }
        if (name.equals("ProjectId"))
        {
            return getProjectId();
        }
        if (name.equals("Weight"))
        {
            return getWeight();
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Standard"))
        {
            return getStandard();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("VehicleTypeId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVehicleTypeId((Long) value);
            return true;
        }
        if (name.equals("ProjectId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setProjectId((Long) value);
            return true;
        }
        if (name.equals("Weight"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setWeight((BigDecimal) value);
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Standard"))
        {
            // Object fields can be null
            if (value != null && ! Boolean.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setStandard((Boolean) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(VehicleTypesPeer.VEHICLE_TYPE_ID))
        {
            return getVehicleTypeId();
        }
        if (name.equals(VehicleTypesPeer.PROJECT_ID))
        {
            return getProjectId();
        }
        if (name.equals(VehicleTypesPeer.WEIGHT))
        {
            return getWeight();
        }
        if (name.equals(VehicleTypesPeer.NAME))
        {
            return getName();
        }
        if (name.equals(VehicleTypesPeer.STANDARD))
        {
            return getStandard();
        }
        if (name.equals(VehicleTypesPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(VehicleTypesPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(VehicleTypesPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(VehicleTypesPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(VehicleTypesPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (VehicleTypesPeer.VEHICLE_TYPE_ID.equals(name))
        {
            return setByName("VehicleTypeId", value);
        }
      if (VehicleTypesPeer.PROJECT_ID.equals(name))
        {
            return setByName("ProjectId", value);
        }
      if (VehicleTypesPeer.WEIGHT.equals(name))
        {
            return setByName("Weight", value);
        }
      if (VehicleTypesPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (VehicleTypesPeer.STANDARD.equals(name))
        {
            return setByName("Standard", value);
        }
      if (VehicleTypesPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (VehicleTypesPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (VehicleTypesPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (VehicleTypesPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (VehicleTypesPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getVehicleTypeId();
        }
        if (pos == 1)
        {
            return getProjectId();
        }
        if (pos == 2)
        {
            return getWeight();
        }
        if (pos == 3)
        {
            return getName();
        }
        if (pos == 4)
        {
            return getStandard();
        }
        if (pos == 5)
        {
            return getCreated();
        }
        if (pos == 6)
        {
            return getModified();
        }
        if (pos == 7)
        {
            return getCreatedBy();
        }
        if (pos == 8)
        {
            return getModifiedBy();
        }
        if (pos == 9)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("VehicleTypeId", value);
        }
    if (position == 1)
        {
            return setByName("ProjectId", value);
        }
    if (position == 2)
        {
            return setByName("Weight", value);
        }
    if (position == 3)
        {
            return setByName("Name", value);
        }
    if (position == 4)
        {
            return setByName("Standard", value);
        }
    if (position == 5)
        {
            return setByName("Created", value);
        }
    if (position == 6)
        {
            return setByName("Modified", value);
        }
    if (position == 7)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 8)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 9)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(VehicleTypesPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    VehicleTypesPeer.doInsert((VehicleTypes) this, con);
                    setNew(false);
                }
                else
                {
                    VehicleTypesPeer.doUpdate((VehicleTypes) this, con);
                }
            }


            if (collVehicleTypesInSetss != null)
            {
                for (int i = 0; i < collVehicleTypesInSetss.size(); i++)
                {
                    ((VehicleTypesInSets) collVehicleTypesInSetss.get(i)).save(con);
                }
            }

            if (collInitialDensitiess != null)
            {
                for (int i = 0; i < collInitialDensitiess.size(); i++)
                {
                    ((InitialDensities) collInitialDensitiess.get(i)).save(con);
                }
            }

            if (collWeavingFactorss != null)
            {
                for (int i = 0; i < collWeavingFactorss.size(); i++)
                {
                    ((WeavingFactors) collWeavingFactorss.get(i)).save(con);
                }
            }

            if (collSplitRatioss != null)
            {
                for (int i = 0; i < collSplitRatioss.size(); i++)
                {
                    ((SplitRatios) collSplitRatioss.get(i)).save(con);
                }
            }

            if (collDemandss != null)
            {
                for (int i = 0; i < collDemandss.size(); i++)
                {
                    ((Demands) collDemandss.get(i)).save(con);
                }
            }

            if (collEventSplitRatioss != null)
            {
                for (int i = 0; i < collEventSplitRatioss.size(); i++)
                {
                    ((EventSplitRatios) collEventSplitRatioss.get(i)).save(con);
                }
            }

            if (collLinkDataDetaileds != null)
            {
                for (int i = 0; i < collLinkDataDetaileds.size(); i++)
                {
                    ((LinkDataDetailed) collLinkDataDetaileds.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key vehicleTypeId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setVehicleTypeId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setVehicleTypeId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getVehicleTypeId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public VehicleTypes copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public VehicleTypes copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public VehicleTypes copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new VehicleTypes(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public VehicleTypes copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new VehicleTypes(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected VehicleTypes copyInto(VehicleTypes copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected VehicleTypes copyInto(VehicleTypes copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected VehicleTypes copyInto(VehicleTypes copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setVehicleTypeId(vehicleTypeId);
        copyObj.setProjectId(projectId);
        copyObj.setWeight(weight);
        copyObj.setName(name);
        copyObj.setStandard(standard);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setVehicleTypeId((Long)null);

        if (deepcopy)
        {


        List vVehicleTypesInSetss = getVehicleTypesInSetss();
        if (vVehicleTypesInSetss != null)
        {
            for (int i = 0; i < vVehicleTypesInSetss.size(); i++)
            {
                VehicleTypesInSets obj = (VehicleTypesInSets) vVehicleTypesInSetss.get(i);
                copyObj.addVehicleTypesInSets(obj.copy());
            }
        }
        else
        {
            copyObj.collVehicleTypesInSetss = null;
        }


        List vInitialDensitiess = getInitialDensitiess();
        if (vInitialDensitiess != null)
        {
            for (int i = 0; i < vInitialDensitiess.size(); i++)
            {
                InitialDensities obj = (InitialDensities) vInitialDensitiess.get(i);
                copyObj.addInitialDensities(obj.copy());
            }
        }
        else
        {
            copyObj.collInitialDensitiess = null;
        }


        List vWeavingFactorss = getWeavingFactorss();
        if (vWeavingFactorss != null)
        {
            for (int i = 0; i < vWeavingFactorss.size(); i++)
            {
                WeavingFactors obj = (WeavingFactors) vWeavingFactorss.get(i);
                copyObj.addWeavingFactors(obj.copy());
            }
        }
        else
        {
            copyObj.collWeavingFactorss = null;
        }


        List vSplitRatioss = getSplitRatioss();
        if (vSplitRatioss != null)
        {
            for (int i = 0; i < vSplitRatioss.size(); i++)
            {
                SplitRatios obj = (SplitRatios) vSplitRatioss.get(i);
                copyObj.addSplitRatios(obj.copy());
            }
        }
        else
        {
            copyObj.collSplitRatioss = null;
        }


        List vDemandss = getDemandss();
        if (vDemandss != null)
        {
            for (int i = 0; i < vDemandss.size(); i++)
            {
                Demands obj = (Demands) vDemandss.get(i);
                copyObj.addDemands(obj.copy());
            }
        }
        else
        {
            copyObj.collDemandss = null;
        }


        List vEventSplitRatioss = getEventSplitRatioss();
        if (vEventSplitRatioss != null)
        {
            for (int i = 0; i < vEventSplitRatioss.size(); i++)
            {
                EventSplitRatios obj = (EventSplitRatios) vEventSplitRatioss.get(i);
                copyObj.addEventSplitRatios(obj.copy());
            }
        }
        else
        {
            copyObj.collEventSplitRatioss = null;
        }


        List vLinkDataDetaileds = getLinkDataDetaileds();
        if (vLinkDataDetaileds != null)
        {
            for (int i = 0; i < vLinkDataDetaileds.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetaileds.get(i);
                copyObj.addLinkDataDetailed(obj.copy());
            }
        }
        else
        {
            copyObj.collLinkDataDetaileds = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected VehicleTypes copyInto(VehicleTypes copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setVehicleTypeId(vehicleTypeId);
        copyObj.setProjectId(projectId);
        copyObj.setWeight(weight);
        copyObj.setName(name);
        copyObj.setStandard(standard);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setVehicleTypeId((Long)null);

        if (deepcopy)
        {


        List vVehicleTypesInSetss = getVehicleTypesInSetss(con);
        if (vVehicleTypesInSetss != null)
        {
            for (int i = 0; i < vVehicleTypesInSetss.size(); i++)
            {
                VehicleTypesInSets obj = (VehicleTypesInSets) vVehicleTypesInSetss.get(i);
                copyObj.addVehicleTypesInSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collVehicleTypesInSetss = null;
        }


        List vInitialDensitiess = getInitialDensitiess(con);
        if (vInitialDensitiess != null)
        {
            for (int i = 0; i < vInitialDensitiess.size(); i++)
            {
                InitialDensities obj = (InitialDensities) vInitialDensitiess.get(i);
                copyObj.addInitialDensities(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collInitialDensitiess = null;
        }


        List vWeavingFactorss = getWeavingFactorss(con);
        if (vWeavingFactorss != null)
        {
            for (int i = 0; i < vWeavingFactorss.size(); i++)
            {
                WeavingFactors obj = (WeavingFactors) vWeavingFactorss.get(i);
                copyObj.addWeavingFactors(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collWeavingFactorss = null;
        }


        List vSplitRatioss = getSplitRatioss(con);
        if (vSplitRatioss != null)
        {
            for (int i = 0; i < vSplitRatioss.size(); i++)
            {
                SplitRatios obj = (SplitRatios) vSplitRatioss.get(i);
                copyObj.addSplitRatios(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSplitRatioss = null;
        }


        List vDemandss = getDemandss(con);
        if (vDemandss != null)
        {
            for (int i = 0; i < vDemandss.size(); i++)
            {
                Demands obj = (Demands) vDemandss.get(i);
                copyObj.addDemands(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDemandss = null;
        }


        List vEventSplitRatioss = getEventSplitRatioss(con);
        if (vEventSplitRatioss != null)
        {
            for (int i = 0; i < vEventSplitRatioss.size(); i++)
            {
                EventSplitRatios obj = (EventSplitRatios) vEventSplitRatioss.get(i);
                copyObj.addEventSplitRatios(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collEventSplitRatioss = null;
        }


        List vLinkDataDetaileds = getLinkDataDetaileds(con);
        if (vLinkDataDetaileds != null)
        {
            for (int i = 0; i < vLinkDataDetaileds.size(); i++)
            {
                LinkDataDetailed obj = (LinkDataDetailed) vLinkDataDetaileds.get(i);
                copyObj.addLinkDataDetailed(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collLinkDataDetaileds = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public VehicleTypesPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return VehicleTypesPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("VehicleTypes:\n");
        str.append("VehicleTypeId = ")
           .append(getVehicleTypeId())
           .append("\n");
        str.append("ProjectId = ")
           .append(getProjectId())
           .append("\n");
        str.append("Weight = ")
           .append(getWeight())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Standard = ")
           .append(getStandard())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
