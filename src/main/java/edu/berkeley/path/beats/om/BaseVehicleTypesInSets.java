package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to VehicleTypesInSets
 */
public abstract class BaseVehicleTypesInSets extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final VehicleTypesInSetsPeer peer =
        new VehicleTypesInSetsPeer();


    /** The value for the vehicleTypeSetId field */
    private Long vehicleTypeSetId;

    /** The value for the vehicleTypeId field */
    private Long vehicleTypeId;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the VehicleTypeSetId
     *
     * @return Long
     */
    public Long getVehicleTypeSetId()
    {
        return vehicleTypeSetId;
    }


    /**
     * Set the value of VehicleTypeSetId
     *
     * @param v new value
     */
    public void setVehicleTypeSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.vehicleTypeSetId, v))
        {
            this.vehicleTypeSetId = v;
            setModified(true);
        }


        if (aVehicleTypeSets != null && !ObjectUtils.equals(aVehicleTypeSets.getId(), v))
        {
            aVehicleTypeSets = null;
        }

    }

    /**
     * Get the VehicleTypeId
     *
     * @return Long
     */
    public Long getVehicleTypeId()
    {
        return vehicleTypeId;
    }


    /**
     * Set the value of VehicleTypeId
     *
     * @param v new value
     */
    public void setVehicleTypeId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.vehicleTypeId, v))
        {
            this.vehicleTypeId = v;
            setModified(true);
        }


        if (aVehicleTypes != null && !ObjectUtils.equals(aVehicleTypes.getVehicleTypeId(), v))
        {
            aVehicleTypes = null;
        }

    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private VehicleTypeSets aVehicleTypeSets;

    /**
     * Declares an association between this object and a VehicleTypeSets object
     *
     * @param v VehicleTypeSets
     * @throws TorqueException
     */
    public void setVehicleTypeSets(VehicleTypeSets v) throws TorqueException
    {
        if (v == null)
        {
            setVehicleTypeSetId((Long) null);
        }
        else
        {
            setVehicleTypeSetId(v.getId());
        }
        aVehicleTypeSets = v;
    }


    /**
     * Returns the associated VehicleTypeSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated VehicleTypeSets object
     * @throws TorqueException
     */
    public VehicleTypeSets getVehicleTypeSets()
        throws TorqueException
    {
        if (aVehicleTypeSets == null && (!ObjectUtils.equals(this.vehicleTypeSetId, null)))
        {
            aVehicleTypeSets = VehicleTypeSetsPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeSetId));
        }
        return aVehicleTypeSets;
    }

    /**
     * Return the associated VehicleTypeSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated VehicleTypeSets object
     * @throws TorqueException
     */
    public VehicleTypeSets getVehicleTypeSets(Connection connection)
        throws TorqueException
    {
        if (aVehicleTypeSets == null && (!ObjectUtils.equals(this.vehicleTypeSetId, null)))
        {
            aVehicleTypeSets = VehicleTypeSetsPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeSetId), connection);
        }
        return aVehicleTypeSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setVehicleTypeSetsKey(ObjectKey key) throws TorqueException
    {

        setVehicleTypeSetId(new Long(((NumberKey) key).longValue()));
    }




    private VehicleTypes aVehicleTypes;

    /**
     * Declares an association between this object and a VehicleTypes object
     *
     * @param v VehicleTypes
     * @throws TorqueException
     */
    public void setVehicleTypes(VehicleTypes v) throws TorqueException
    {
        if (v == null)
        {
            setVehicleTypeId((Long) null);
        }
        else
        {
            setVehicleTypeId(v.getVehicleTypeId());
        }
        aVehicleTypes = v;
    }


    /**
     * Returns the associated VehicleTypes object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated VehicleTypes object
     * @throws TorqueException
     */
    public VehicleTypes getVehicleTypes()
        throws TorqueException
    {
        if (aVehicleTypes == null && (!ObjectUtils.equals(this.vehicleTypeId, null)))
        {
            aVehicleTypes = VehicleTypesPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeId));
        }
        return aVehicleTypes;
    }

    /**
     * Return the associated VehicleTypes object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated VehicleTypes object
     * @throws TorqueException
     */
    public VehicleTypes getVehicleTypes(Connection connection)
        throws TorqueException
    {
        if (aVehicleTypes == null && (!ObjectUtils.equals(this.vehicleTypeId, null)))
        {
            aVehicleTypes = VehicleTypesPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeId), connection);
        }
        return aVehicleTypes;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setVehicleTypesKey(ObjectKey key) throws TorqueException
    {

        setVehicleTypeId(new Long(((NumberKey) key).longValue()));
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("VehicleTypeSetId");
            fieldNames.add("VehicleTypeId");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("VehicleTypeSetId"))
        {
            return getVehicleTypeSetId();
        }
        if (name.equals("VehicleTypeId"))
        {
            return getVehicleTypeId();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("VehicleTypeSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVehicleTypeSetId((Long) value);
            return true;
        }
        if (name.equals("VehicleTypeId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVehicleTypeId((Long) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(VehicleTypesInSetsPeer.VEHICLE_TYPE_SET_ID))
        {
            return getVehicleTypeSetId();
        }
        if (name.equals(VehicleTypesInSetsPeer.VEHICLE_TYPE_ID))
        {
            return getVehicleTypeId();
        }
        if (name.equals(VehicleTypesInSetsPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(VehicleTypesInSetsPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(VehicleTypesInSetsPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(VehicleTypesInSetsPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(VehicleTypesInSetsPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (VehicleTypesInSetsPeer.VEHICLE_TYPE_SET_ID.equals(name))
        {
            return setByName("VehicleTypeSetId", value);
        }
      if (VehicleTypesInSetsPeer.VEHICLE_TYPE_ID.equals(name))
        {
            return setByName("VehicleTypeId", value);
        }
      if (VehicleTypesInSetsPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (VehicleTypesInSetsPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (VehicleTypesInSetsPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (VehicleTypesInSetsPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (VehicleTypesInSetsPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getVehicleTypeSetId();
        }
        if (pos == 1)
        {
            return getVehicleTypeId();
        }
        if (pos == 2)
        {
            return getCreated();
        }
        if (pos == 3)
        {
            return getModified();
        }
        if (pos == 4)
        {
            return getCreatedBy();
        }
        if (pos == 5)
        {
            return getModifiedBy();
        }
        if (pos == 6)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("VehicleTypeSetId", value);
        }
    if (position == 1)
        {
            return setByName("VehicleTypeId", value);
        }
    if (position == 2)
        {
            return setByName("Created", value);
        }
    if (position == 3)
        {
            return setByName("Modified", value);
        }
    if (position == 4)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 5)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 6)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(VehicleTypesInSetsPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    VehicleTypesInSetsPeer.doInsert((VehicleTypesInSets) this, con);
                    setNew(false);
                }
                else
                {
                    VehicleTypesInSetsPeer.doUpdate((VehicleTypesInSets) this, con);
                }
            }

            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setVehicleTypeSetId(new Long(((NumberKey)keys[0]).longValue()));
        setVehicleTypeId(new Long(((NumberKey)keys[1]).longValue()));
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param vehicleTypeSetId Long
     * @param vehicleTypeId Long
     */
    public void setPrimaryKey( Long vehicleTypeSetId, Long vehicleTypeId)
        throws TorqueException
    {
        setVehicleTypeSetId(vehicleTypeSetId);
        setVehicleTypeId(vehicleTypeId);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getVehicleTypeSetId());
        pks[1] = SimpleKey.keyFor(getVehicleTypeId());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public VehicleTypesInSets copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public VehicleTypesInSets copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public VehicleTypesInSets copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new VehicleTypesInSets(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public VehicleTypesInSets copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new VehicleTypesInSets(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected VehicleTypesInSets copyInto(VehicleTypesInSets copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected VehicleTypesInSets copyInto(VehicleTypesInSets copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected VehicleTypesInSets copyInto(VehicleTypesInSets copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setVehicleTypeSetId(vehicleTypeSetId);
        copyObj.setVehicleTypeId(vehicleTypeId);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setVehicleTypeSetId((Long)null);
        copyObj.setVehicleTypeId((Long)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected VehicleTypesInSets copyInto(VehicleTypesInSets copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setVehicleTypeSetId(vehicleTypeSetId);
        copyObj.setVehicleTypeId(vehicleTypeId);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setVehicleTypeSetId((Long)null);
        copyObj.setVehicleTypeId((Long)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public VehicleTypesInSetsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return VehicleTypesInSetsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("VehicleTypesInSets:\n");
        str.append("VehicleTypeSetId = ")
           .append(getVehicleTypeSetId())
           .append("\n");
        str.append("VehicleTypeId = ")
           .append(getVehicleTypeId())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
