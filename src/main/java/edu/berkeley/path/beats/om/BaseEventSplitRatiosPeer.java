package com.relteq.sirius.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.TorqueRuntimeException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import com.relteq.sirius.om.map.*;




/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 */
public abstract class BaseEventSplitRatiosPeer
    extends com.relteq.sirius.db.BasePeer
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;


    /** the default database name for this class */
    public static final String DATABASE_NAME;

     /** the table name for this class */
    public static final String TABLE_NAME;

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @deprecated Torque.getMapBuilder(EventSplitRatiosMapBuilder.CLASS_NAME) instead
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return Torque.getMapBuilder(EventSplitRatiosMapBuilder.CLASS_NAME);
    }

    /** the column name for the event_id field */
    public static final String EVENT_ID;
    /** the column name for the in_link_id field */
    public static final String IN_LINK_ID;
    /** the column name for the out_link_id field */
    public static final String OUT_LINK_ID;
    /** the column name for the vehicle_type_id field */
    public static final String VEHICLE_TYPE_ID;
    /** the column name for the split_ratio field */
    public static final String SPLIT_RATIO;
    /** the column name for the created field */
    public static final String CREATED;
    /** the column name for the modified field */
    public static final String MODIFIED;
    /** the column name for the created_by field */
    public static final String CREATED_BY;
    /** the column name for the modified_by field */
    public static final String MODIFIED_BY;
    /** the column name for the modstamp field */
    public static final String MODSTAMP;

    static
    {
        DATABASE_NAME = "sirius";
        TABLE_NAME = "event_split_ratios";

        EVENT_ID = "event_split_ratios.event_id";
        IN_LINK_ID = "event_split_ratios.in_link_id";
        OUT_LINK_ID = "event_split_ratios.out_link_id";
        VEHICLE_TYPE_ID = "event_split_ratios.vehicle_type_id";
        SPLIT_RATIO = "event_split_ratios.split_ratio";
        CREATED = "event_split_ratios.created";
        MODIFIED = "event_split_ratios.modified";
        CREATED_BY = "event_split_ratios.created_by";
        MODIFIED_BY = "event_split_ratios.modified_by";
        MODSTAMP = "event_split_ratios.modstamp";
        if (Torque.isInit())
        {
            try
            {
                Torque.getMapBuilder(EventSplitRatiosMapBuilder.CLASS_NAME);
            }
            catch (TorqueException e)
            {
                log.error("Could not initialize Peer", e);
                throw new TorqueRuntimeException(e);
            }
        }
        else
        {
            Torque.registerMapBuilder(EventSplitRatiosMapBuilder.CLASS_NAME);
        }
    }
 
    /** number of columns for this peer */
    public static final int numColumns =  10;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "com.relteq.sirius.om.EventSplitRatios";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            log.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Torque developers <torque-dev@db.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propagated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }



    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseEventSplitRatiosPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
        correctBooleans(criteria);

        setDbName(criteria);

        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
        criteria.addSelectColumn(EVENT_ID);
        criteria.addSelectColumn(IN_LINK_ID);
        criteria.addSelectColumn(OUT_LINK_ID);
        criteria.addSelectColumn(VEHICLE_TYPE_ID);
        criteria.addSelectColumn(SPLIT_RATIO);
        criteria.addSelectColumn(CREATED);
        criteria.addSelectColumn(MODIFIED);
        criteria.addSelectColumn(CREATED_BY);
        criteria.addSelectColumn(MODIFIED_BY);
        criteria.addSelectColumn(MODSTAMP);
    }

    /**
     * changes the boolean values in the criteria to the appropriate type,
     * whenever a booleanchar or booleanint column is involved.
     * This enables the user to create criteria using Boolean values
     * for booleanchar or booleanint columns
     * @param criteria the criteria in which the boolean values should be corrected
     * @throws TorqueException if the database map for the criteria cannot be 
               obtained.
     */
    public static void correctBooleans(Criteria criteria) throws TorqueException
    {
        correctBooleans(criteria, getTableMap());
    }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static EventSplitRatios row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            EventSplitRatios obj = (EventSplitRatios) cls.newInstance();
            EventSplitRatiosPeer.populateObject(row, offset, obj);
                obj.setModified(false);
            obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      EventSplitRatios obj)
        throws TorqueException
    {
        try
        {
            obj.setEventId(row.getValue(offset + 0).asLongObj());
            obj.setInLinkId(row.getValue(offset + 1).asLongObj());
            obj.setOutLinkId(row.getValue(offset + 2).asLongObj());
            obj.setVehicleTypeId(row.getValue(offset + 3).asLongObj());
            obj.setSplitRatio(row.getValue(offset + 4).asBigDecimal());
            obj.setCreated(row.getValue(offset + 5).asUtilDate());
            obj.setModified(row.getValue(offset + 6).asUtilDate());
            obj.setCreatedBy(row.getValue(offset + 7).asString());
            obj.setModifiedBy(row.getValue(offset + 8).asString());
            obj.setModstamp(row.getValue(offset + 9).asUtilDate());
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseEventSplitRatiosPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }
        correctBooleans(criteria);

        setDbName(criteria);

        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
            results.add(EventSplitRatiosPeer.row2Object(row, 1,
                EventSplitRatiosPeer.getOMClass()));
        }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseEventSplitRatiosPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
        correctBooleans(criteria);


         selectCriteria.put(EVENT_ID, criteria.remove(EVENT_ID));

         selectCriteria.put(IN_LINK_ID, criteria.remove(IN_LINK_ID));

         selectCriteria.put(OUT_LINK_ID, criteria.remove(OUT_LINK_ID));

         selectCriteria.put(VEHICLE_TYPE_ID, criteria.remove(VEHICLE_TYPE_ID));







        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         EventSplitRatiosPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
        correctBooleans(criteria);

        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doDelete(criteria, TABLE_NAME);
        }
        else
        {
            BasePeer.doDelete(criteria, TABLE_NAME, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(EventSplitRatios obj) throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(EventSplitRatios obj) throws TorqueException
    {
        doInsert(buildCriteria(obj));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(EventSplitRatios obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(EventSplitRatios obj) throws TorqueException
    {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(EventSplitRatios) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(EventSplitRatios obj, Connection con)
        throws TorqueException
    {
        doInsert(buildCriteria(obj), con);
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(EventSplitRatios) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(EventSplitRatios obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(EventSplitRatios) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(EventSplitRatios obj, Connection con)
        throws TorqueException
    {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseEventSplitRatiosPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
        SimpleKey[] keys = (SimpleKey[])pk.getValue();
            criteria.add(EVENT_ID, keys[0]);
            criteria.add(IN_LINK_ID, keys[1]);
            criteria.add(OUT_LINK_ID, keys[2]);
            criteria.add(VEHICLE_TYPE_ID, keys[3]);
        return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( EventSplitRatios obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
        criteria.add(EVENT_ID, obj.getEventId());
        criteria.add(IN_LINK_ID, obj.getInLinkId());
        criteria.add(OUT_LINK_ID, obj.getOutLinkId());
        criteria.add(VEHICLE_TYPE_ID, obj.getVehicleTypeId());
        criteria.add(SPLIT_RATIO, obj.getSplitRatio());
        criteria.add(CREATED, obj.getCreated());
        criteria.add(MODIFIED, obj.getModified());
        criteria.add(CREATED_BY, obj.getCreatedBy());
        criteria.add(MODIFIED_BY, obj.getModifiedBy());
        criteria.add(MODSTAMP, obj.getModstamp());
        return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria( EventSplitRatios obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
            criteria.add(EVENT_ID, obj.getEventId());
            criteria.add(IN_LINK_ID, obj.getInLinkId());
            criteria.add(OUT_LINK_ID, obj.getOutLinkId());
            criteria.add(VEHICLE_TYPE_ID, obj.getVehicleTypeId());
            criteria.add(SPLIT_RATIO, obj.getSplitRatio());
            criteria.add(CREATED, obj.getCreated());
            criteria.add(MODIFIED, obj.getModified());
            criteria.add(CREATED_BY, obj.getCreatedBy());
            criteria.add(MODIFIED_BY, obj.getModifiedBy());
            criteria.add(MODSTAMP, obj.getModstamp());
        return criteria;
    }
 


    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static EventSplitRatios retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection db = null;
        EventSplitRatios retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return retVal;
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static EventSplitRatios retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (EventSplitRatios)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return retVal;
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
            Iterator iter = pks.iterator();
            while (iter.hasNext())
            {
                ObjectKey pk = (ObjectKey) iter.next();
                SimpleKey[] keys = (SimpleKey[])pk.getValue();
                    Criteria.Criterion c0 = criteria.getNewCriterion(
                        EVENT_ID, keys[0], Criteria.EQUAL);
                    Criteria.Criterion c1 = criteria.getNewCriterion(
                        IN_LINK_ID, keys[1], Criteria.EQUAL);
                        c0.and(c1);
                    Criteria.Criterion c2 = criteria.getNewCriterion(
                        OUT_LINK_ID, keys[2], Criteria.EQUAL);
                        c1.and(c2);
                    Criteria.Criterion c3 = criteria.getNewCriterion(
                        VEHICLE_TYPE_ID, keys[3], Criteria.EQUAL);
                        c2.and(c3);
                criteria.or(c0);
            }
        objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 
    /**
     * retrieve object using using pk values.
     *
     * @param eventId Long
     * @param inLinkId Long
     * @param outLinkId Long
     * @param vehicleTypeId Long
     */
    public static EventSplitRatios retrieveByPK(
 Long eventId
, Long inLinkId
, Long outLinkId
, Long vehicleTypeId
        ) throws TorqueException
    {
        Connection db = null;
        EventSplitRatios retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPK(
 eventId
, inLinkId
, outLinkId
, vehicleTypeId
               , db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return retVal;
    }

    /**
     * retrieve object using using pk values.
     *
     * @param eventId Long
     * @param inLinkId Long
     * @param outLinkId Long
     * @param vehicleTypeId Long
     * @param con Connection
     */
    public static EventSplitRatios retrieveByPK(
 Long eventId
, Long inLinkId
, Long outLinkId
, Long vehicleTypeId
       ,Connection con) throws TorqueException
    {

        Criteria criteria = new Criteria(5);
        criteria.add(EVENT_ID, eventId);
        criteria.add(IN_LINK_ID, inLinkId);
        criteria.add(OUT_LINK_ID, outLinkId);
        criteria.add(VEHICLE_TYPE_ID, vehicleTypeId);
        List v = doSelect(criteria, con);
        if (v.size() == 1)
        {
            return (EventSplitRatios) v.get(0);
        }
        else
        {
            throw new TorqueException("Failed to select one and only one row.");
        }
    }








    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * Events objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinEvents(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinEvents(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * Events objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinEvents(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        EventSplitRatiosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        EventsPeer.addSelectColumns(criteria);

        criteria.addJoin(EventSplitRatiosPeer.EVENT_ID,
            EventsPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);
             omClass = EventsPeer.getOMClass();
            Events obj2 = (Events) EventsPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                Events temp_obj2 = (Events) temp_obj1.getEvents();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatioss();
                obj2.addEventSplitRatios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * LinkFamilies objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinLinkFamiliesRelatedByInLinkId(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * LinkFamilies objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinLinkFamiliesRelatedByInLinkId(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        EventSplitRatiosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        LinkFamiliesPeer.addSelectColumns(criteria);

        criteria.addJoin(EventSplitRatiosPeer.IN_LINK_ID,
            LinkFamiliesPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);
             omClass = LinkFamiliesPeer.getOMClass();
            LinkFamilies obj2 = (LinkFamilies) LinkFamiliesPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                LinkFamilies temp_obj2 = (LinkFamilies) temp_obj1.getLinkFamiliesRelatedByInLinkId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatiosRelatedByInLinkId(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatiossRelatedByInLinkId();
                obj2.addEventSplitRatiosRelatedByInLinkId(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * LinkFamilies objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinLinkFamiliesRelatedByOutLinkId(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * LinkFamilies objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinLinkFamiliesRelatedByOutLinkId(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        EventSplitRatiosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        LinkFamiliesPeer.addSelectColumns(criteria);

        criteria.addJoin(EventSplitRatiosPeer.OUT_LINK_ID,
            LinkFamiliesPeer.ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);
             omClass = LinkFamiliesPeer.getOMClass();
            LinkFamilies obj2 = (LinkFamilies) LinkFamiliesPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                LinkFamilies temp_obj2 = (LinkFamilies) temp_obj1.getLinkFamiliesRelatedByOutLinkId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatiosRelatedByOutLinkId(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatiossRelatedByOutLinkId();
                obj2.addEventSplitRatiosRelatedByOutLinkId(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * VehicleTypes objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinVehicleTypes(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with their
     * VehicleTypes objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinVehicleTypes(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        EventSplitRatiosPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        VehicleTypesPeer.addSelectColumns(criteria);

        criteria.addJoin(EventSplitRatiosPeer.VEHICLE_TYPE_ID,
            VehicleTypesPeer.VEHICLE_TYPE_ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);
             omClass = VehicleTypesPeer.getOMClass();
            VehicleTypes obj2 = (VehicleTypes) VehicleTypesPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                VehicleTypes temp_obj2 = (VehicleTypes) temp_obj1.getVehicleTypes();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatioss();
                obj2.addEventSplitRatios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }







    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptEvents(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptEvents(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptEvents(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;


        LinkFamiliesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.IN_LINK_ID, LinkFamiliesPeer.ID);
        int offset3 = offset2 + LinkFamiliesPeer.numColumns;

        LinkFamiliesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.OUT_LINK_ID, LinkFamiliesPeer.ID);
        int offset4 = offset3 + LinkFamiliesPeer.numColumns;

        VehicleTypesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.VEHICLE_TYPE_ID, VehicleTypesPeer.VEHICLE_TYPE_ID);

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);





             omClass = LinkFamiliesPeer.getOMClass();
            LinkFamilies obj2 = (LinkFamilies) LinkFamiliesPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                LinkFamilies temp_obj2 = (LinkFamilies) temp_obj1.getLinkFamiliesRelatedByInLinkId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatiosRelatedByInLinkId(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatiossRelatedByInLinkId();
                obj2.addEventSplitRatiosRelatedByInLinkId(obj1);
            }




             omClass = LinkFamiliesPeer.getOMClass();
            LinkFamilies obj3 = (LinkFamilies) LinkFamiliesPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                LinkFamilies temp_obj3 = (LinkFamilies) temp_obj1.getLinkFamiliesRelatedByOutLinkId();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addEventSplitRatiosRelatedByOutLinkId(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initEventSplitRatiossRelatedByOutLinkId();
                obj3.addEventSplitRatiosRelatedByOutLinkId(obj1);
            }




             omClass = VehicleTypesPeer.getOMClass();
            VehicleTypes obj4 = (VehicleTypes) VehicleTypesPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                VehicleTypes temp_obj4 = (VehicleTypes) temp_obj1.getVehicleTypes();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initEventSplitRatioss();
                obj4.addEventSplitRatios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptLinkFamiliesRelatedByInLinkId(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptLinkFamiliesRelatedByInLinkId(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptLinkFamiliesRelatedByInLinkId(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        EventsPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.EVENT_ID, EventsPeer.ID);
        int offset3 = offset2 + EventsPeer.numColumns;



        VehicleTypesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.VEHICLE_TYPE_ID, VehicleTypesPeer.VEHICLE_TYPE_ID);
        int offset4 = offset3 + VehicleTypesPeer.numColumns;

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);




             omClass = EventsPeer.getOMClass();
            Events obj2 = (Events) EventsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                Events temp_obj2 = (Events) temp_obj1.getEvents();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatioss();
                obj2.addEventSplitRatios(obj1);
            }






             omClass = VehicleTypesPeer.getOMClass();
            VehicleTypes obj3 = (VehicleTypes) VehicleTypesPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                VehicleTypes temp_obj3 = (VehicleTypes) temp_obj1.getVehicleTypes();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initEventSplitRatioss();
                obj3.addEventSplitRatios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptLinkFamiliesRelatedByOutLinkId(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptLinkFamiliesRelatedByOutLinkId(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptLinkFamiliesRelatedByOutLinkId(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        EventsPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.EVENT_ID, EventsPeer.ID);
        int offset3 = offset2 + EventsPeer.numColumns;



        VehicleTypesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.VEHICLE_TYPE_ID, VehicleTypesPeer.VEHICLE_TYPE_ID);
        int offset4 = offset3 + VehicleTypesPeer.numColumns;

        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);




             omClass = EventsPeer.getOMClass();
            Events obj2 = (Events) EventsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                Events temp_obj2 = (Events) temp_obj1.getEvents();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatioss();
                obj2.addEventSplitRatios(obj1);
            }






             omClass = VehicleTypesPeer.getOMClass();
            VehicleTypes obj3 = (VehicleTypes) VehicleTypesPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                VehicleTypes temp_obj3 = (VehicleTypes) temp_obj1.getVehicleTypes();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initEventSplitRatioss();
                obj3.addEventSplitRatios(obj1);
            }
            results.add(obj1);
        }
        return results;
    }




    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptVehicleTypes(Criteria criteria)
        throws TorqueException
    {
        return doSelectJoinAllExceptVehicleTypes(criteria, null);
    }

    /**
     * selects a collection of EventSplitRatios objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in EventSplitRatiosPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptVehicleTypes(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;

        EventsPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.EVENT_ID, EventsPeer.ID);
        int offset3 = offset2 + EventsPeer.numColumns;

        LinkFamiliesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.IN_LINK_ID, LinkFamiliesPeer.ID);
        int offset4 = offset3 + LinkFamiliesPeer.numColumns;

        LinkFamiliesPeer.addSelectColumns(criteria);
        criteria.addJoin(EventSplitRatiosPeer.OUT_LINK_ID, LinkFamiliesPeer.ID);


        correctBooleans(criteria);

        List rows;
        if (conn == null)
        {
            rows = BasePeer.doSelect(criteria);
        }
        else
        {
            rows = BasePeer.doSelect(criteria,conn);
        }

        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = EventSplitRatiosPeer.getOMClass();
            EventSplitRatios obj1 = (EventSplitRatios) EventSplitRatiosPeer
                .row2Object(row, 1, omClass);




             omClass = EventsPeer.getOMClass();
            Events obj2 = (Events) EventsPeer
                .row2Object( row, offset2, omClass);

 boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                Events temp_obj2 = (Events) temp_obj1.getEvents();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addEventSplitRatios(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initEventSplitRatioss();
                obj2.addEventSplitRatios(obj1);
            }




             omClass = LinkFamiliesPeer.getOMClass();
            LinkFamilies obj3 = (LinkFamilies) LinkFamiliesPeer
                .row2Object( row, offset3, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                LinkFamilies temp_obj3 = (LinkFamilies) temp_obj1.getLinkFamiliesRelatedByInLinkId();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addEventSplitRatiosRelatedByInLinkId(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initEventSplitRatiossRelatedByInLinkId();
                obj3.addEventSplitRatiosRelatedByInLinkId(obj1);
            }




             omClass = LinkFamiliesPeer.getOMClass();
            LinkFamilies obj4 = (LinkFamilies) LinkFamiliesPeer
                .row2Object( row, offset4, omClass);

 newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                EventSplitRatios temp_obj1 = (EventSplitRatios) results.get(j);
                LinkFamilies temp_obj4 = (LinkFamilies) temp_obj1.getLinkFamiliesRelatedByOutLinkId();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addEventSplitRatiosRelatedByOutLinkId(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initEventSplitRatiossRelatedByOutLinkId();
                obj4.addEventSplitRatiosRelatedByOutLinkId(obj1);
            }

            results.add(obj1);
        }
        return results;
    }


    /**
     * Returns the TableMap related to this peer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
 
    private static void setDbName(Criteria crit)
    {
        // Set the correct dbName if it has not been overridden
        // crit.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (crit.getDbName() == Torque.getDefaultDB())
        {
            crit.setDbName(DATABASE_NAME);
        }
    }
    

}
