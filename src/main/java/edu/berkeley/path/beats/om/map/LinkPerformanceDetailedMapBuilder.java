package com.relteq.sirius.om.map;

import java.util.Date;
import java.math.BigDecimal;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.DatabaseMap;
import org.apache.torque.map.TableMap;
import org.apache.torque.map.ColumnMap;
import org.apache.torque.map.InheritanceMap;

/**
  *  This class was autogenerated by Torque on:
  *
  * [Wed Nov 14 14:25:09 PST 2012]
  *
  */
public class LinkPerformanceDetailedMapBuilder implements MapBuilder
{
    /**
     * The name of this class
     */
    public static final String CLASS_NAME =
        "com.relteq.sirius.om.map.LinkPerformanceDetailedMapBuilder";

    /**
     * The database map.
     */
    private DatabaseMap dbMap = null;

    /**
     * Tells us if this DatabaseMapBuilder is built so that we
     * don't have to re-build it every time.
     *
     * @return true if this DatabaseMapBuilder is built
     */
    public boolean isBuilt()
    {
        return (dbMap != null);
    }

    /**
     * Gets the databasemap this map builder built.
     *
     * @return the databasemap
     */
    public DatabaseMap getDatabaseMap()
    {
        return this.dbMap;
    }

    /**
     * The doBuild() method builds the DatabaseMap
     *
     * @throws TorqueException
     */
    public synchronized void doBuild() throws TorqueException
    {
        if ( isBuilt() ) {
            return;
        }
        dbMap = Torque.getDatabaseMap("sirius");

        dbMap.addTable("link_performance_detailed");
        TableMap tMap = dbMap.getTable("link_performance_detailed");
        tMap.setJavaName("LinkPerformanceDetailed");
        tMap.setOMClass( com.relteq.sirius.om.LinkPerformanceDetailed.class );
        tMap.setPeerClass( com.relteq.sirius.om.LinkPerformanceDetailedPeer.class );
        tMap.setPrimaryKeyMethod("none");

        ColumnMap cMap = null;


  // ------------- Column: network_id --------------------
        cMap = new ColumnMap( "network_id", tMap);
        cMap.setType( new Long(0) );
        cMap.setTorqueType( "BIGINT" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "NetworkId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setForeignKey("networks", "id");
        cMap.setPosition(1);
        tMap.addColumn(cMap);
  // ------------- Column: link_id --------------------
        cMap = new ColumnMap( "link_id", tMap);
        cMap.setType( new Long(0) );
        cMap.setTorqueType( "BIGINT" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "LinkId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setForeignKey("link_families", "id");
        cMap.setPosition(2);
        tMap.addColumn(cMap);
  // ------------- Column: data_source_id --------------------
        cMap = new ColumnMap( "data_source_id", tMap);
        cMap.setType( new Long(0) );
        cMap.setTorqueType( "BIGINT" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "DataSourceId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setForeignKey("data_sources", "id");
        cMap.setPosition(3);
        tMap.addColumn(cMap);
  // ------------- Column: destination_link_id --------------------
        cMap = new ColumnMap( "destination_link_id", tMap);
        cMap.setType( new Long(0) );
        cMap.setTorqueType( "BIGINT" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "DestinationLinkId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setForeignKey("link_families", "id");
        cMap.setPosition(4);
        tMap.addColumn(cMap);
  // ------------- Column: vehicle_type_id --------------------
        cMap = new ColumnMap( "vehicle_type_id", tMap);
        cMap.setType( new Long(0) );
        cMap.setTorqueType( "BIGINT" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "VehicleTypeId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setPosition(5);
        tMap.addColumn(cMap);
  // ------------- Column: ts --------------------
        cMap = new ColumnMap( "ts", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "TIMESTAMP" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "Ts" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setPosition(6);
        tMap.addColumn(cMap);
  // ------------- Column: aggregation --------------------
        cMap = new ColumnMap( "aggregation", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "Aggregation" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Aggregation level: raw|1min|5min|15min|1hour|1day|total.");
        cMap.setInheritance("false");
        cMap.setSize( 8 );
        cMap.setPosition(7);
        tMap.addColumn(cMap);
  // ------------- Column: type --------------------
        cMap = new ColumnMap( "type", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "Type" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Type of data: standard (mean)|std|1Q|3Q|best case|worst case|max|min.");
        cMap.setInheritance("false");
        cMap.setSize( 16 );
        cMap.setPosition(8);
        tMap.addColumn(cMap);
  // ------------- Column: cell_number --------------------
        cMap = new ColumnMap( "cell_number", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(false);
        cMap.setJavaName( "CellNumber" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Sometimes, a link can be divided into several cells. Usually, there is just a single cell.");
        cMap.setInheritance("false");
        cMap.setPosition(9);
        tMap.addColumn(cMap);
  // ------------- Column: vmt --------------------
        cMap = new ColumnMap( "vmt", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "Vmt" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(10);
        tMap.addColumn(cMap);
  // ------------- Column: vht --------------------
        cMap = new ColumnMap( "vht", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "Vht" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(11);
        tMap.addColumn(cMap);
  // ------------- Column: delay --------------------
        cMap = new ColumnMap( "delay", tMap);
        cMap.setType( new BigDecimal((double) 0) );
        cMap.setTorqueType( "DECIMAL" );
        cMap.setUsePrimitive(false);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(false);
        cMap.setJavaName( "Delay" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setInheritance("false");
        cMap.setSize( 31 );
        cMap.setScale( 16 );
        cMap.setPosition(12);
        tMap.addColumn(cMap);
        tMap.setUseInheritance(false);
    }
}
