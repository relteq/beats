package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Signals
 */
public abstract class BaseSignals extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final SignalsPeer peer =
        new SignalsPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the nodeId field */
    private Long nodeId;

    /** The value for the signalSetId field */
    private Long signalSetId;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated Phases
        if (collPhasess != null)
        {
            for (int i = 0; i < collPhasess.size(); i++)
            {
                ((Phases) collPhasess.get(i))
                        .setSignalId(v);
            }
        }

        // update associated SignalData
        if (collSignalDatas != null)
        {
            for (int i = 0; i < collSignalDatas.size(); i++)
            {
                ((SignalData) collSignalDatas.get(i))
                        .setSignalId(v);
            }
        }

        // update associated SignalPhasePerformance
        if (collSignalPhasePerformances != null)
        {
            for (int i = 0; i < collSignalPhasePerformances.size(); i++)
            {
                ((SignalPhasePerformance) collSignalPhasePerformances.get(i))
                        .setSignalId(v);
            }
        }
    }

    /**
     * Get the NodeId
     *
     * @return Long
     */
    public Long getNodeId()
    {
        return nodeId;
    }


    /**
     * Set the value of NodeId
     *
     * @param v new value
     */
    public void setNodeId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.nodeId, v))
        {
            this.nodeId = v;
            setModified(true);
        }


        if (aNodeFamilies != null && !ObjectUtils.equals(aNodeFamilies.getId(), v))
        {
            aNodeFamilies = null;
        }

    }

    /**
     * Get the SignalSetId
     *
     * @return Long
     */
    public Long getSignalSetId()
    {
        return signalSetId;
    }


    /**
     * Set the value of SignalSetId
     *
     * @param v new value
     */
    public void setSignalSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.signalSetId, v))
        {
            this.signalSetId = v;
            setModified(true);
        }


        if (aSignalSets != null && !ObjectUtils.equals(aSignalSets.getId(), v))
        {
            aSignalSets = null;
        }

    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private NodeFamilies aNodeFamilies;

    /**
     * Declares an association between this object and a NodeFamilies object
     *
     * @param v NodeFamilies
     * @throws TorqueException
     */
    public void setNodeFamilies(NodeFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setNodeId((Long) null);
        }
        else
        {
            setNodeId(v.getId());
        }
        aNodeFamilies = v;
    }


    /**
     * Returns the associated NodeFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamilies()
        throws TorqueException
    {
        if (aNodeFamilies == null && (!ObjectUtils.equals(this.nodeId, null)))
        {
            aNodeFamilies = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.nodeId));
        }
        return aNodeFamilies;
    }

    /**
     * Return the associated NodeFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated NodeFamilies object
     * @throws TorqueException
     */
    public NodeFamilies getNodeFamilies(Connection connection)
        throws TorqueException
    {
        if (aNodeFamilies == null && (!ObjectUtils.equals(this.nodeId, null)))
        {
            aNodeFamilies = NodeFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.nodeId), connection);
        }
        return aNodeFamilies;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNodeFamiliesKey(ObjectKey key) throws TorqueException
    {

        setNodeId(new Long(((NumberKey) key).longValue()));
    }




    private SignalSets aSignalSets;

    /**
     * Declares an association between this object and a SignalSets object
     *
     * @param v SignalSets
     * @throws TorqueException
     */
    public void setSignalSets(SignalSets v) throws TorqueException
    {
        if (v == null)
        {
            setSignalSetId((Long) null);
        }
        else
        {
            setSignalSetId(v.getId());
        }
        aSignalSets = v;
    }


    /**
     * Returns the associated SignalSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated SignalSets object
     * @throws TorqueException
     */
    public SignalSets getSignalSets()
        throws TorqueException
    {
        if (aSignalSets == null && (!ObjectUtils.equals(this.signalSetId, null)))
        {
            aSignalSets = SignalSetsPeer.retrieveByPK(SimpleKey.keyFor(this.signalSetId));
        }
        return aSignalSets;
    }

    /**
     * Return the associated SignalSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated SignalSets object
     * @throws TorqueException
     */
    public SignalSets getSignalSets(Connection connection)
        throws TorqueException
    {
        if (aSignalSets == null && (!ObjectUtils.equals(this.signalSetId, null)))
        {
            aSignalSets = SignalSetsPeer.retrieveByPK(SimpleKey.keyFor(this.signalSetId), connection);
        }
        return aSignalSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSignalSetsKey(ObjectKey key) throws TorqueException
    {

        setSignalSetId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collPhasess
     */
    protected List collPhasess;

    /**
     * Temporary storage of collPhasess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPhasess()
    {
        if (collPhasess == null)
        {
            collPhasess = new ArrayList();
        }
    }


    /**
     * Method called to associate a Phases object to this object
     * through the Phases foreign key attribute
     *
     * @param l Phases
     * @throws TorqueException
     */
    public void addPhases(Phases l) throws TorqueException
    {
        getPhasess().add(l);
        l.setSignals((Signals) this);
    }

    /**
     * Method called to associate a Phases object to this object
     * through the Phases foreign key attribute using connection.
     *
     * @param l Phases
     * @throws TorqueException
     */
    public void addPhases(Phases l, Connection con) throws TorqueException
    {
        getPhasess(con).add(l);
        l.setSignals((Signals) this);
    }

    /**
     * The criteria used to select the current contents of collPhasess
     */
    private Criteria lastPhasessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPhasess(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getPhasess()
        throws TorqueException
    {
        if (collPhasess == null)
        {
            collPhasess = getPhasess(new Criteria(10));
        }
        return collPhasess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals has previously
     * been saved, it will retrieve related Phasess from storage.
     * If this Signals is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPhasess(Criteria criteria) throws TorqueException
    {
        if (collPhasess == null)
        {
            if (isNew())
            {
               collPhasess = new ArrayList();
            }
            else
            {
                criteria.add(PhasesPeer.SIGNAL_ID, getId() );
                collPhasess = PhasesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(PhasesPeer.SIGNAL_ID, getId());
                if (!lastPhasessCriteria.equals(criteria))
                {
                    collPhasess = PhasesPeer.doSelect(criteria);
                }
            }
        }
        lastPhasessCriteria = criteria;

        return collPhasess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPhasess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPhasess(Connection con) throws TorqueException
    {
        if (collPhasess == null)
        {
            collPhasess = getPhasess(new Criteria(10), con);
        }
        return collPhasess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals has previously
     * been saved, it will retrieve related Phasess from storage.
     * If this Signals is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPhasess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPhasess == null)
        {
            if (isNew())
            {
               collPhasess = new ArrayList();
            }
            else
            {
                 criteria.add(PhasesPeer.SIGNAL_ID, getId());
                 collPhasess = PhasesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(PhasesPeer.SIGNAL_ID, getId());
                 if (!lastPhasessCriteria.equals(criteria))
                 {
                     collPhasess = PhasesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPhasessCriteria = criteria;

         return collPhasess;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related Phasess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getPhasessJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collPhasess == null)
        {
            if (isNew())
            {
               collPhasess = new ArrayList();
            }
            else
            {
                criteria.add(PhasesPeer.SIGNAL_ID, getId());
                collPhasess = PhasesPeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(PhasesPeer.SIGNAL_ID, getId());
            if (!lastPhasessCriteria.equals(criteria))
            {
                collPhasess = PhasesPeer.doSelectJoinSignals(criteria);
            }
        }
        lastPhasessCriteria = criteria;

        return collPhasess;
    }





    /**
     * Collection to store aggregation of collSignalDatas
     */
    protected List collSignalDatas;

    /**
     * Temporary storage of collSignalDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalDatas()
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalData object to this object
     * through the SignalData foreign key attribute
     *
     * @param l SignalData
     * @throws TorqueException
     */
    public void addSignalData(SignalData l) throws TorqueException
    {
        getSignalDatas().add(l);
        l.setSignals((Signals) this);
    }

    /**
     * Method called to associate a SignalData object to this object
     * through the SignalData foreign key attribute using connection.
     *
     * @param l SignalData
     * @throws TorqueException
     */
    public void addSignalData(SignalData l, Connection con) throws TorqueException
    {
        getSignalDatas(con).add(l);
        l.setSignals((Signals) this);
    }

    /**
     * The criteria used to select the current contents of collSignalDatas
     */
    private Criteria lastSignalDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalDatas()
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = getSignalDatas(new Criteria(10));
        }
        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals has previously
     * been saved, it will retrieve related SignalDatas from storage.
     * If this Signals is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalDatas(Criteria criteria) throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.SIGNAL_ID, getId() );
                collSignalDatas = SignalDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalDataPeer.SIGNAL_ID, getId());
                if (!lastSignalDatasCriteria.equals(criteria))
                {
                    collSignalDatas = SignalDataPeer.doSelect(criteria);
                }
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalDatas(Connection con) throws TorqueException
    {
        if (collSignalDatas == null)
        {
            collSignalDatas = getSignalDatas(new Criteria(10), con);
        }
        return collSignalDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals has previously
     * been saved, it will retrieve related SignalDatas from storage.
     * If this Signals is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                 criteria.add(SignalDataPeer.SIGNAL_ID, getId());
                 collSignalDatas = SignalDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalDataPeer.SIGNAL_ID, getId());
                 if (!lastSignalDatasCriteria.equals(criteria))
                 {
                     collSignalDatas = SignalDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalDatasCriteria = criteria;

         return collSignalDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getSignalDatasJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.SIGNAL_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.SIGNAL_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinSignals(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getSignalDatasJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.SIGNAL_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.SIGNAL_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related SignalDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getSignalDatasJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSignalDatas == null)
        {
            if (isNew())
            {
               collSignalDatas = new ArrayList();
            }
            else
            {
                criteria.add(SignalDataPeer.SIGNAL_ID, getId());
                collSignalDatas = SignalDataPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalDataPeer.SIGNAL_ID, getId());
            if (!lastSignalDatasCriteria.equals(criteria))
            {
                collSignalDatas = SignalDataPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSignalDatasCriteria = criteria;

        return collSignalDatas;
    }





    /**
     * Collection to store aggregation of collSignalPhasePerformances
     */
    protected List collSignalPhasePerformances;

    /**
     * Temporary storage of collSignalPhasePerformances to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalPhasePerformances()
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalPhasePerformance object to this object
     * through the SignalPhasePerformance foreign key attribute
     *
     * @param l SignalPhasePerformance
     * @throws TorqueException
     */
    public void addSignalPhasePerformance(SignalPhasePerformance l) throws TorqueException
    {
        getSignalPhasePerformances().add(l);
        l.setSignals((Signals) this);
    }

    /**
     * Method called to associate a SignalPhasePerformance object to this object
     * through the SignalPhasePerformance foreign key attribute using connection.
     *
     * @param l SignalPhasePerformance
     * @throws TorqueException
     */
    public void addSignalPhasePerformance(SignalPhasePerformance l, Connection con) throws TorqueException
    {
        getSignalPhasePerformances(con).add(l);
        l.setSignals((Signals) this);
    }

    /**
     * The criteria used to select the current contents of collSignalPhasePerformances
     */
    private Criteria lastSignalPhasePerformancesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalPhasePerformances(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalPhasePerformances()
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = getSignalPhasePerformances(new Criteria(10));
        }
        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     * If this Signals is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalPhasePerformances(Criteria criteria) throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId() );
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
                if (!lastSignalPhasePerformancesCriteria.equals(criteria))
                {
                    collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria);
                }
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalPhasePerformances(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalPhasePerformances(Connection con) throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            collSignalPhasePerformances = getSignalPhasePerformances(new Criteria(10), con);
        }
        return collSignalPhasePerformances;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     * If this Signals is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalPhasePerformances(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                 criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
                 collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
                 if (!lastSignalPhasePerformancesCriteria.equals(criteria))
                 {
                     collSignalPhasePerformances = SignalPhasePerformancePeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalPhasePerformancesCriteria = criteria;

         return collSignalPhasePerformances;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getSignalPhasePerformancesJoinSignals(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinSignals(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinSignals(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getSignalPhasePerformancesJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinNetworks(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Signals is new, it will return
     * an empty collection; or if this Signals has previously
     * been saved, it will retrieve related SignalPhasePerformances from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Signals.
     */
    protected List getSignalPhasePerformancesJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSignalPhasePerformances == null)
        {
            if (isNew())
            {
               collSignalPhasePerformances = new ArrayList();
            }
            else
            {
                criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalPhasePerformancePeer.SIGNAL_ID, getId());
            if (!lastSignalPhasePerformancesCriteria.equals(criteria))
            {
                collSignalPhasePerformances = SignalPhasePerformancePeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSignalPhasePerformancesCriteria = criteria;

        return collSignalPhasePerformances;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("NodeId");
            fieldNames.add("SignalSetId");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("NodeId"))
        {
            return getNodeId();
        }
        if (name.equals("SignalSetId"))
        {
            return getSignalSetId();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("NodeId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNodeId((Long) value);
            return true;
        }
        if (name.equals("SignalSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSignalSetId((Long) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(SignalsPeer.ID))
        {
            return getId();
        }
        if (name.equals(SignalsPeer.NODE_ID))
        {
            return getNodeId();
        }
        if (name.equals(SignalsPeer.SIGNAL_SET_ID))
        {
            return getSignalSetId();
        }
        if (name.equals(SignalsPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(SignalsPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(SignalsPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(SignalsPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(SignalsPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (SignalsPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (SignalsPeer.NODE_ID.equals(name))
        {
            return setByName("NodeId", value);
        }
      if (SignalsPeer.SIGNAL_SET_ID.equals(name))
        {
            return setByName("SignalSetId", value);
        }
      if (SignalsPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (SignalsPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (SignalsPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (SignalsPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (SignalsPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getNodeId();
        }
        if (pos == 2)
        {
            return getSignalSetId();
        }
        if (pos == 3)
        {
            return getCreated();
        }
        if (pos == 4)
        {
            return getModified();
        }
        if (pos == 5)
        {
            return getCreatedBy();
        }
        if (pos == 6)
        {
            return getModifiedBy();
        }
        if (pos == 7)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("NodeId", value);
        }
    if (position == 2)
        {
            return setByName("SignalSetId", value);
        }
    if (position == 3)
        {
            return setByName("Created", value);
        }
    if (position == 4)
        {
            return setByName("Modified", value);
        }
    if (position == 5)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 6)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 7)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(SignalsPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SignalsPeer.doInsert((Signals) this, con);
                    setNew(false);
                }
                else
                {
                    SignalsPeer.doUpdate((Signals) this, con);
                }
            }


            if (collPhasess != null)
            {
                for (int i = 0; i < collPhasess.size(); i++)
                {
                    ((Phases) collPhasess.get(i)).save(con);
                }
            }

            if (collSignalDatas != null)
            {
                for (int i = 0; i < collSignalDatas.size(); i++)
                {
                    ((SignalData) collSignalDatas.get(i)).save(con);
                }
            }

            if (collSignalPhasePerformances != null)
            {
                for (int i = 0; i < collSignalPhasePerformances.size(); i++)
                {
                    ((SignalPhasePerformance) collSignalPhasePerformances.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Signals copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Signals copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Signals copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Signals(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Signals copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Signals(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Signals copyInto(Signals copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Signals copyInto(Signals copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Signals copyInto(Signals copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setNodeId(nodeId);
        copyObj.setSignalSetId(signalSetId);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vPhasess = getPhasess();
        if (vPhasess != null)
        {
            for (int i = 0; i < vPhasess.size(); i++)
            {
                Phases obj = (Phases) vPhasess.get(i);
                copyObj.addPhases(obj.copy());
            }
        }
        else
        {
            copyObj.collPhasess = null;
        }


        List vSignalDatas = getSignalDatas();
        if (vSignalDatas != null)
        {
            for (int i = 0; i < vSignalDatas.size(); i++)
            {
                SignalData obj = (SignalData) vSignalDatas.get(i);
                copyObj.addSignalData(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalDatas = null;
        }


        List vSignalPhasePerformances = getSignalPhasePerformances();
        if (vSignalPhasePerformances != null)
        {
            for (int i = 0; i < vSignalPhasePerformances.size(); i++)
            {
                SignalPhasePerformance obj = (SignalPhasePerformance) vSignalPhasePerformances.get(i);
                copyObj.addSignalPhasePerformance(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalPhasePerformances = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Signals copyInto(Signals copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setNodeId(nodeId);
        copyObj.setSignalSetId(signalSetId);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vPhasess = getPhasess(con);
        if (vPhasess != null)
        {
            for (int i = 0; i < vPhasess.size(); i++)
            {
                Phases obj = (Phases) vPhasess.get(i);
                copyObj.addPhases(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collPhasess = null;
        }


        List vSignalDatas = getSignalDatas(con);
        if (vSignalDatas != null)
        {
            for (int i = 0; i < vSignalDatas.size(); i++)
            {
                SignalData obj = (SignalData) vSignalDatas.get(i);
                copyObj.addSignalData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalDatas = null;
        }


        List vSignalPhasePerformances = getSignalPhasePerformances(con);
        if (vSignalPhasePerformances != null)
        {
            for (int i = 0; i < vSignalPhasePerformances.size(); i++)
            {
                SignalPhasePerformance obj = (SignalPhasePerformance) vSignalPhasePerformances.get(i);
                copyObj.addSignalPhasePerformance(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalPhasePerformances = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SignalsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return SignalsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Signals:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("NodeId = ")
           .append(getNodeId())
           .append("\n");
        str.append("SignalSetId = ")
           .append(getSignalSetId())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
