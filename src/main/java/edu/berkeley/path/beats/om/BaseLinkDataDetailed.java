package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to LinkDataDetailed
 */
public abstract class BaseLinkDataDetailed extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final LinkDataDetailedPeer peer =
        new LinkDataDetailedPeer();


    /** The value for the networkId field */
    private Long networkId;

    /** The value for the linkId field */
    private Long linkId;

    /** The value for the dataSourceId field */
    private Long dataSourceId;

    /** The value for the destinationLinkId field */
    private Long destinationLinkId;

    /** The value for the vehicleTypeId field */
    private Long vehicleTypeId;

    /** The value for the ts field */
    private Date ts;

    /** The value for the aggregation field */
    private String aggregation;

    /** The value for the type field */
    private String type;

    /** The value for the cellNumber field */
    private Integer cellNumber;

    /** The value for the inFlow field */
    private BigDecimal inFlow;

    /** The value for the outFlow field */
    private BigDecimal outFlow;

    /** The value for the density field */
    private BigDecimal density;

    /** The value for the speed field */
    private BigDecimal speed;


    /**
     * Get the NetworkId
     *
     * @return Long
     */
    public Long getNetworkId()
    {
        return networkId;
    }


    /**
     * Set the value of NetworkId
     *
     * @param v new value
     */
    public void setNetworkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.networkId, v))
        {
            this.networkId = v;
            setModified(true);
        }


        if (aNetworks != null && !ObjectUtils.equals(aNetworks.getId(), v))
        {
            aNetworks = null;
        }

    }

    /**
     * Get the LinkId
     *
     * @return Long
     */
    public Long getLinkId()
    {
        return linkId;
    }


    /**
     * Set the value of LinkId
     *
     * @param v new value
     */
    public void setLinkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.linkId, v))
        {
            this.linkId = v;
            setModified(true);
        }


        if (aLinkFamiliesRelatedByLinkId != null && !ObjectUtils.equals(aLinkFamiliesRelatedByLinkId.getId(), v))
        {
            aLinkFamiliesRelatedByLinkId = null;
        }

    }

    /**
     * Get the DataSourceId
     *
     * @return Long
     */
    public Long getDataSourceId()
    {
        return dataSourceId;
    }


    /**
     * Set the value of DataSourceId
     *
     * @param v new value
     */
    public void setDataSourceId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.dataSourceId, v))
        {
            this.dataSourceId = v;
            setModified(true);
        }


        if (aDataSources != null && !ObjectUtils.equals(aDataSources.getId(), v))
        {
            aDataSources = null;
        }

    }

    /**
     * Get the DestinationLinkId
     *
     * @return Long
     */
    public Long getDestinationLinkId()
    {
        return destinationLinkId;
    }


    /**
     * Set the value of DestinationLinkId
     *
     * @param v new value
     */
    public void setDestinationLinkId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.destinationLinkId, v))
        {
            this.destinationLinkId = v;
            setModified(true);
        }


        if (aLinkFamiliesRelatedByDestinationLinkId != null && !ObjectUtils.equals(aLinkFamiliesRelatedByDestinationLinkId.getId(), v))
        {
            aLinkFamiliesRelatedByDestinationLinkId = null;
        }

    }

    /**
     * Get the VehicleTypeId
     *
     * @return Long
     */
    public Long getVehicleTypeId()
    {
        return vehicleTypeId;
    }


    /**
     * Set the value of VehicleTypeId
     *
     * @param v new value
     */
    public void setVehicleTypeId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.vehicleTypeId, v))
        {
            this.vehicleTypeId = v;
            setModified(true);
        }


        if (aVehicleTypes != null && !ObjectUtils.equals(aVehicleTypes.getVehicleTypeId(), v))
        {
            aVehicleTypes = null;
        }

    }

    /**
     * Get the Ts
     *
     * @return Date
     */
    public Date getTs()
    {
        return ts;
    }


    /**
     * Set the value of Ts
     *
     * @param v new value
     */
    public void setTs(Date v) 
    {

        if (!ObjectUtils.equals(this.ts, v))
        {
            this.ts = v;
            setModified(true);
        }


    }

    /**
     * Get the Aggregation
     *
     * @return String
     */
    public String getAggregation()
    {
        return aggregation;
    }


    /**
     * Set the value of Aggregation
     *
     * @param v new value
     */
    public void setAggregation(String v) 
    {

        if (!ObjectUtils.equals(this.aggregation, v))
        {
            this.aggregation = v;
            setModified(true);
        }


    }

    /**
     * Get the Type
     *
     * @return String
     */
    public String getType()
    {
        return type;
    }


    /**
     * Set the value of Type
     *
     * @param v new value
     */
    public void setType(String v) 
    {

        if (!ObjectUtils.equals(this.type, v))
        {
            this.type = v;
            setModified(true);
        }


    }

    /**
     * Get the CellNumber
     *
     * @return Integer
     */
    public Integer getCellNumber()
    {
        return cellNumber;
    }


    /**
     * Set the value of CellNumber
     *
     * @param v new value
     */
    public void setCellNumber(Integer v) 
    {

        if (!ObjectUtils.equals(this.cellNumber, v))
        {
            this.cellNumber = v;
            setModified(true);
        }


    }

    /**
     * Get the InFlow
     *
     * @return BigDecimal
     */
    public BigDecimal getInFlow()
    {
        return inFlow;
    }


    /**
     * Set the value of InFlow
     *
     * @param v new value
     */
    public void setInFlow(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.inFlow, v))
        {
            this.inFlow = v;
            setModified(true);
        }


    }

    /**
     * Get the OutFlow
     *
     * @return BigDecimal
     */
    public BigDecimal getOutFlow()
    {
        return outFlow;
    }


    /**
     * Set the value of OutFlow
     *
     * @param v new value
     */
    public void setOutFlow(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.outFlow, v))
        {
            this.outFlow = v;
            setModified(true);
        }


    }

    /**
     * Get the Density
     *
     * @return BigDecimal
     */
    public BigDecimal getDensity()
    {
        return density;
    }


    /**
     * Set the value of Density
     *
     * @param v new value
     */
    public void setDensity(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.density, v))
        {
            this.density = v;
            setModified(true);
        }


    }

    /**
     * Get the Speed
     *
     * @return BigDecimal
     */
    public BigDecimal getSpeed()
    {
        return speed;
    }


    /**
     * Set the value of Speed
     *
     * @param v new value
     */
    public void setSpeed(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.speed, v))
        {
            this.speed = v;
            setModified(true);
        }


    }

    



    private LinkFamilies aLinkFamiliesRelatedByLinkId;

    /**
     * Declares an association between this object and a LinkFamilies object
     *
     * @param v LinkFamilies
     * @throws TorqueException
     */
    public void setLinkFamiliesRelatedByLinkId(LinkFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setLinkId((Long) null);
        }
        else
        {
            setLinkId(v.getId());
        }
        aLinkFamiliesRelatedByLinkId = v;
    }


    /**
     * Returns the associated LinkFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByLinkId()
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByLinkId == null && (!ObjectUtils.equals(this.linkId, null)))
        {
            aLinkFamiliesRelatedByLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.linkId));
        }
        return aLinkFamiliesRelatedByLinkId;
    }

    /**
     * Return the associated LinkFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByLinkId(Connection connection)
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByLinkId == null && (!ObjectUtils.equals(this.linkId, null)))
        {
            aLinkFamiliesRelatedByLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.linkId), connection);
        }
        return aLinkFamiliesRelatedByLinkId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLinkFamiliesRelatedByLinkIdKey(ObjectKey key) throws TorqueException
    {

        setLinkId(new Long(((NumberKey) key).longValue()));
    }




    private Networks aNetworks;

    /**
     * Declares an association between this object and a Networks object
     *
     * @param v Networks
     * @throws TorqueException
     */
    public void setNetworks(Networks v) throws TorqueException
    {
        if (v == null)
        {
            setNetworkId((Long) null);
        }
        else
        {
            setNetworkId(v.getId());
        }
        aNetworks = v;
    }


    /**
     * Returns the associated Networks object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks()
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId));
        }
        return aNetworks;
    }

    /**
     * Return the associated Networks object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Networks object
     * @throws TorqueException
     */
    public Networks getNetworks(Connection connection)
        throws TorqueException
    {
        if (aNetworks == null && (!ObjectUtils.equals(this.networkId, null)))
        {
            aNetworks = NetworksPeer.retrieveByPK(SimpleKey.keyFor(this.networkId), connection);
        }
        return aNetworks;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNetworksKey(ObjectKey key) throws TorqueException
    {

        setNetworkId(new Long(((NumberKey) key).longValue()));
    }




    private DataSources aDataSources;

    /**
     * Declares an association between this object and a DataSources object
     *
     * @param v DataSources
     * @throws TorqueException
     */
    public void setDataSources(DataSources v) throws TorqueException
    {
        if (v == null)
        {
            setDataSourceId((Long) null);
        }
        else
        {
            setDataSourceId(v.getId());
        }
        aDataSources = v;
    }


    /**
     * Returns the associated DataSources object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources()
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId));
        }
        return aDataSources;
    }

    /**
     * Return the associated DataSources object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources(Connection connection)
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId), connection);
        }
        return aDataSources;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDataSourcesKey(ObjectKey key) throws TorqueException
    {

        setDataSourceId(new Long(((NumberKey) key).longValue()));
    }




    private LinkFamilies aLinkFamiliesRelatedByDestinationLinkId;

    /**
     * Declares an association between this object and a LinkFamilies object
     *
     * @param v LinkFamilies
     * @throws TorqueException
     */
    public void setLinkFamiliesRelatedByDestinationLinkId(LinkFamilies v) throws TorqueException
    {
        if (v == null)
        {
            setDestinationLinkId((Long) null);
        }
        else
        {
            setDestinationLinkId(v.getId());
        }
        aLinkFamiliesRelatedByDestinationLinkId = v;
    }


    /**
     * Returns the associated LinkFamilies object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByDestinationLinkId()
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByDestinationLinkId == null && (!ObjectUtils.equals(this.destinationLinkId, null)))
        {
            aLinkFamiliesRelatedByDestinationLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.destinationLinkId));
        }
        return aLinkFamiliesRelatedByDestinationLinkId;
    }

    /**
     * Return the associated LinkFamilies object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated LinkFamilies object
     * @throws TorqueException
     */
    public LinkFamilies getLinkFamiliesRelatedByDestinationLinkId(Connection connection)
        throws TorqueException
    {
        if (aLinkFamiliesRelatedByDestinationLinkId == null && (!ObjectUtils.equals(this.destinationLinkId, null)))
        {
            aLinkFamiliesRelatedByDestinationLinkId = LinkFamiliesPeer.retrieveByPK(SimpleKey.keyFor(this.destinationLinkId), connection);
        }
        return aLinkFamiliesRelatedByDestinationLinkId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLinkFamiliesRelatedByDestinationLinkIdKey(ObjectKey key) throws TorqueException
    {

        setDestinationLinkId(new Long(((NumberKey) key).longValue()));
    }




    private VehicleTypes aVehicleTypes;

    /**
     * Declares an association between this object and a VehicleTypes object
     *
     * @param v VehicleTypes
     * @throws TorqueException
     */
    public void setVehicleTypes(VehicleTypes v) throws TorqueException
    {
        if (v == null)
        {
            setVehicleTypeId((Long) null);
        }
        else
        {
            setVehicleTypeId(v.getVehicleTypeId());
        }
        aVehicleTypes = v;
    }


    /**
     * Returns the associated VehicleTypes object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated VehicleTypes object
     * @throws TorqueException
     */
    public VehicleTypes getVehicleTypes()
        throws TorqueException
    {
        if (aVehicleTypes == null && (!ObjectUtils.equals(this.vehicleTypeId, null)))
        {
            aVehicleTypes = VehicleTypesPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeId));
        }
        return aVehicleTypes;
    }

    /**
     * Return the associated VehicleTypes object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated VehicleTypes object
     * @throws TorqueException
     */
    public VehicleTypes getVehicleTypes(Connection connection)
        throws TorqueException
    {
        if (aVehicleTypes == null && (!ObjectUtils.equals(this.vehicleTypeId, null)))
        {
            aVehicleTypes = VehicleTypesPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeId), connection);
        }
        return aVehicleTypes;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setVehicleTypesKey(ObjectKey key) throws TorqueException
    {

        setVehicleTypeId(new Long(((NumberKey) key).longValue()));
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("NetworkId");
            fieldNames.add("LinkId");
            fieldNames.add("DataSourceId");
            fieldNames.add("DestinationLinkId");
            fieldNames.add("VehicleTypeId");
            fieldNames.add("Ts");
            fieldNames.add("Aggregation");
            fieldNames.add("Type");
            fieldNames.add("CellNumber");
            fieldNames.add("InFlow");
            fieldNames.add("OutFlow");
            fieldNames.add("Density");
            fieldNames.add("Speed");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("NetworkId"))
        {
            return getNetworkId();
        }
        if (name.equals("LinkId"))
        {
            return getLinkId();
        }
        if (name.equals("DataSourceId"))
        {
            return getDataSourceId();
        }
        if (name.equals("DestinationLinkId"))
        {
            return getDestinationLinkId();
        }
        if (name.equals("VehicleTypeId"))
        {
            return getVehicleTypeId();
        }
        if (name.equals("Ts"))
        {
            return getTs();
        }
        if (name.equals("Aggregation"))
        {
            return getAggregation();
        }
        if (name.equals("Type"))
        {
            return getType();
        }
        if (name.equals("CellNumber"))
        {
            return getCellNumber();
        }
        if (name.equals("InFlow"))
        {
            return getInFlow();
        }
        if (name.equals("OutFlow"))
        {
            return getOutFlow();
        }
        if (name.equals("Density"))
        {
            return getDensity();
        }
        if (name.equals("Speed"))
        {
            return getSpeed();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("NetworkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNetworkId((Long) value);
            return true;
        }
        if (name.equals("LinkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLinkId((Long) value);
            return true;
        }
        if (name.equals("DataSourceId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDataSourceId((Long) value);
            return true;
        }
        if (name.equals("DestinationLinkId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDestinationLinkId((Long) value);
            return true;
        }
        if (name.equals("VehicleTypeId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVehicleTypeId((Long) value);
            return true;
        }
        if (name.equals("Ts"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setTs((Date) value);
            return true;
        }
        if (name.equals("Aggregation"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setAggregation((String) value);
            return true;
        }
        if (name.equals("Type"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setType((String) value);
            return true;
        }
        if (name.equals("CellNumber"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCellNumber((Integer) value);
            return true;
        }
        if (name.equals("InFlow"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setInFlow((BigDecimal) value);
            return true;
        }
        if (name.equals("OutFlow"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setOutFlow((BigDecimal) value);
            return true;
        }
        if (name.equals("Density"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDensity((BigDecimal) value);
            return true;
        }
        if (name.equals("Speed"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSpeed((BigDecimal) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(LinkDataDetailedPeer.NETWORK_ID))
        {
            return getNetworkId();
        }
        if (name.equals(LinkDataDetailedPeer.LINK_ID))
        {
            return getLinkId();
        }
        if (name.equals(LinkDataDetailedPeer.DATA_SOURCE_ID))
        {
            return getDataSourceId();
        }
        if (name.equals(LinkDataDetailedPeer.DESTINATION_LINK_ID))
        {
            return getDestinationLinkId();
        }
        if (name.equals(LinkDataDetailedPeer.VEHICLE_TYPE_ID))
        {
            return getVehicleTypeId();
        }
        if (name.equals(LinkDataDetailedPeer.TS))
        {
            return getTs();
        }
        if (name.equals(LinkDataDetailedPeer.AGGREGATION))
        {
            return getAggregation();
        }
        if (name.equals(LinkDataDetailedPeer.TYPE))
        {
            return getType();
        }
        if (name.equals(LinkDataDetailedPeer.CELL_NUMBER))
        {
            return getCellNumber();
        }
        if (name.equals(LinkDataDetailedPeer.IN_FLOW))
        {
            return getInFlow();
        }
        if (name.equals(LinkDataDetailedPeer.OUT_FLOW))
        {
            return getOutFlow();
        }
        if (name.equals(LinkDataDetailedPeer.DENSITY))
        {
            return getDensity();
        }
        if (name.equals(LinkDataDetailedPeer.SPEED))
        {
            return getSpeed();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (LinkDataDetailedPeer.NETWORK_ID.equals(name))
        {
            return setByName("NetworkId", value);
        }
      if (LinkDataDetailedPeer.LINK_ID.equals(name))
        {
            return setByName("LinkId", value);
        }
      if (LinkDataDetailedPeer.DATA_SOURCE_ID.equals(name))
        {
            return setByName("DataSourceId", value);
        }
      if (LinkDataDetailedPeer.DESTINATION_LINK_ID.equals(name))
        {
            return setByName("DestinationLinkId", value);
        }
      if (LinkDataDetailedPeer.VEHICLE_TYPE_ID.equals(name))
        {
            return setByName("VehicleTypeId", value);
        }
      if (LinkDataDetailedPeer.TS.equals(name))
        {
            return setByName("Ts", value);
        }
      if (LinkDataDetailedPeer.AGGREGATION.equals(name))
        {
            return setByName("Aggregation", value);
        }
      if (LinkDataDetailedPeer.TYPE.equals(name))
        {
            return setByName("Type", value);
        }
      if (LinkDataDetailedPeer.CELL_NUMBER.equals(name))
        {
            return setByName("CellNumber", value);
        }
      if (LinkDataDetailedPeer.IN_FLOW.equals(name))
        {
            return setByName("InFlow", value);
        }
      if (LinkDataDetailedPeer.OUT_FLOW.equals(name))
        {
            return setByName("OutFlow", value);
        }
      if (LinkDataDetailedPeer.DENSITY.equals(name))
        {
            return setByName("Density", value);
        }
      if (LinkDataDetailedPeer.SPEED.equals(name))
        {
            return setByName("Speed", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getNetworkId();
        }
        if (pos == 1)
        {
            return getLinkId();
        }
        if (pos == 2)
        {
            return getDataSourceId();
        }
        if (pos == 3)
        {
            return getDestinationLinkId();
        }
        if (pos == 4)
        {
            return getVehicleTypeId();
        }
        if (pos == 5)
        {
            return getTs();
        }
        if (pos == 6)
        {
            return getAggregation();
        }
        if (pos == 7)
        {
            return getType();
        }
        if (pos == 8)
        {
            return getCellNumber();
        }
        if (pos == 9)
        {
            return getInFlow();
        }
        if (pos == 10)
        {
            return getOutFlow();
        }
        if (pos == 11)
        {
            return getDensity();
        }
        if (pos == 12)
        {
            return getSpeed();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("NetworkId", value);
        }
    if (position == 1)
        {
            return setByName("LinkId", value);
        }
    if (position == 2)
        {
            return setByName("DataSourceId", value);
        }
    if (position == 3)
        {
            return setByName("DestinationLinkId", value);
        }
    if (position == 4)
        {
            return setByName("VehicleTypeId", value);
        }
    if (position == 5)
        {
            return setByName("Ts", value);
        }
    if (position == 6)
        {
            return setByName("Aggregation", value);
        }
    if (position == 7)
        {
            return setByName("Type", value);
        }
    if (position == 8)
        {
            return setByName("CellNumber", value);
        }
    if (position == 9)
        {
            return setByName("InFlow", value);
        }
    if (position == 10)
        {
            return setByName("OutFlow", value);
        }
    if (position == 11)
        {
            return setByName("Density", value);
        }
    if (position == 12)
        {
            return setByName("Speed", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(LinkDataDetailedPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    LinkDataDetailedPeer.doInsert((LinkDataDetailed) this, con);
                    setNew(false);
                }
                else
                {
                    LinkDataDetailedPeer.doUpdate((LinkDataDetailed) this, con);
                }
            }

            alreadyInSave = false;
        }
    }



    private final SimpleKey[] pks = new SimpleKey[8];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        setNetworkId(new Long(((NumberKey)keys[0]).longValue()));
        setLinkId(new Long(((NumberKey)keys[1]).longValue()));
        setDataSourceId(new Long(((NumberKey)keys[2]).longValue()));
        setVehicleTypeId(new Long(((NumberKey)keys[3]).longValue()));
        setTs(((DateKey)keys[4]).getDate());
        setAggregation(keys[5].toString());
        setType(keys[6].toString());
        setCellNumber(new Integer(((NumberKey)keys[7]).intValue()));
    }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
     * @param networkId Long
     * @param linkId Long
     * @param dataSourceId Long
     * @param vehicleTypeId Long
     * @param ts Date
     * @param aggregation String
     * @param type String
     * @param cellNumber Integer
     */
    public void setPrimaryKey( Long networkId, Long linkId, Long dataSourceId, Long vehicleTypeId, Date ts, String aggregation, String type, Integer cellNumber)
        throws TorqueException
    {
        setNetworkId(networkId);
        setLinkId(linkId);
        setDataSourceId(dataSourceId);
        setVehicleTypeId(vehicleTypeId);
        setTs(ts);
        setAggregation(aggregation);
        setType(type);
        setCellNumber(cellNumber);
    }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        pks[0] = SimpleKey.keyFor(getNetworkId());
        pks[1] = SimpleKey.keyFor(getLinkId());
        pks[2] = SimpleKey.keyFor(getDataSourceId());
        pks[3] = SimpleKey.keyFor(getVehicleTypeId());
        pks[4] = SimpleKey.keyFor(getTs());
        pks[5] = SimpleKey.keyFor(getAggregation());
        pks[6] = SimpleKey.keyFor(getType());
        pks[7] = SimpleKey.keyFor(getCellNumber());
        return comboPK;
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public LinkDataDetailed copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public LinkDataDetailed copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public LinkDataDetailed copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new LinkDataDetailed(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public LinkDataDetailed copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new LinkDataDetailed(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected LinkDataDetailed copyInto(LinkDataDetailed copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected LinkDataDetailed copyInto(LinkDataDetailed copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected LinkDataDetailed copyInto(LinkDataDetailed copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setNetworkId(networkId);
        copyObj.setLinkId(linkId);
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setDestinationLinkId(destinationLinkId);
        copyObj.setVehicleTypeId(vehicleTypeId);
        copyObj.setTs(ts);
        copyObj.setAggregation(aggregation);
        copyObj.setType(type);
        copyObj.setCellNumber(cellNumber);
        copyObj.setInFlow(inFlow);
        copyObj.setOutFlow(outFlow);
        copyObj.setDensity(density);
        copyObj.setSpeed(speed);

        copyObj.setNetworkId((Long)null);
        copyObj.setLinkId((Long)null);
        copyObj.setDataSourceId((Long)null);
        copyObj.setVehicleTypeId((Long)null);
        copyObj.setTs((Date)null);
        copyObj.setAggregation((String)null);
        copyObj.setType((String)null);
        copyObj.setCellNumber((Integer)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected LinkDataDetailed copyInto(LinkDataDetailed copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setNetworkId(networkId);
        copyObj.setLinkId(linkId);
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setDestinationLinkId(destinationLinkId);
        copyObj.setVehicleTypeId(vehicleTypeId);
        copyObj.setTs(ts);
        copyObj.setAggregation(aggregation);
        copyObj.setType(type);
        copyObj.setCellNumber(cellNumber);
        copyObj.setInFlow(inFlow);
        copyObj.setOutFlow(outFlow);
        copyObj.setDensity(density);
        copyObj.setSpeed(speed);

        copyObj.setNetworkId((Long)null);
        copyObj.setLinkId((Long)null);
        copyObj.setDataSourceId((Long)null);
        copyObj.setVehicleTypeId((Long)null);
        copyObj.setTs((Date)null);
        copyObj.setAggregation((String)null);
        copyObj.setType((String)null);
        copyObj.setCellNumber((Integer)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LinkDataDetailedPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return LinkDataDetailedPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("LinkDataDetailed:\n");
        str.append("NetworkId = ")
           .append(getNetworkId())
           .append("\n");
        str.append("LinkId = ")
           .append(getLinkId())
           .append("\n");
        str.append("DataSourceId = ")
           .append(getDataSourceId())
           .append("\n");
        str.append("DestinationLinkId = ")
           .append(getDestinationLinkId())
           .append("\n");
        str.append("VehicleTypeId = ")
           .append(getVehicleTypeId())
           .append("\n");
        str.append("Ts = ")
           .append(getTs())
           .append("\n");
        str.append("Aggregation = ")
           .append(getAggregation())
           .append("\n");
        str.append("Type = ")
           .append(getType())
           .append("\n");
        str.append("CellNumber = ")
           .append(getCellNumber())
           .append("\n");
        str.append("InFlow = ")
           .append(getInFlow())
           .append("\n");
        str.append("OutFlow = ")
           .append(getOutFlow())
           .append("\n");
        str.append("Density = ")
           .append(getDensity())
           .append("\n");
        str.append("Speed = ")
           .append(getSpeed())
           .append("\n");
        return(str.toString());
    }
}
