package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to SimulationRuns
 */
public abstract class BaseSimulationRuns extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final SimulationRunsPeer peer =
        new SimulationRunsPeer();


    /** The value for the dataSourceId field */
    private Long dataSourceId;

    /** The value for the scenarioId field */
    private Long scenarioId;

    /** The value for the runNumber field */
    private Long runNumber;

    /** The value for the version field */
    private String version;

    /** The value for the build field */
    private String build;

    /** The value for the simulationStartTime field */
    private BigDecimal simulationStartTime;

    /** The value for the simulationDuration field */
    private BigDecimal simulationDuration;

    /** The value for the simulationDt field */
    private BigDecimal simulationDt;

    /** The value for the outputDt field */
    private BigDecimal outputDt;

    /** The value for the executionStartTime field */
    private Date executionStartTime;

    /** The value for the executionEndTime field */
    private Date executionEndTime;

    /** The value for the status field */
    private Integer status;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the DataSourceId
     *
     * @return Long
     */
    public Long getDataSourceId()
    {
        return dataSourceId;
    }


    /**
     * Set the value of DataSourceId
     *
     * @param v new value
     */
    public void setDataSourceId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.dataSourceId, v))
        {
            this.dataSourceId = v;
            setModified(true);
        }


        if (aDataSources != null && !ObjectUtils.equals(aDataSources.getId(), v))
        {
            aDataSources = null;
        }

    }

    /**
     * Get the ScenarioId
     *
     * @return Long
     */
    public Long getScenarioId()
    {
        return scenarioId;
    }


    /**
     * Set the value of ScenarioId
     *
     * @param v new value
     */
    public void setScenarioId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.scenarioId, v))
        {
            this.scenarioId = v;
            setModified(true);
        }


        if (aScenarios != null && !ObjectUtils.equals(aScenarios.getId(), v))
        {
            aScenarios = null;
        }

    }

    /**
     * Get the RunNumber
     *
     * @return Long
     */
    public Long getRunNumber()
    {
        return runNumber;
    }


    /**
     * Set the value of RunNumber
     *
     * @param v new value
     */
    public void setRunNumber(Long v) 
    {

        if (!ObjectUtils.equals(this.runNumber, v))
        {
            this.runNumber = v;
            setModified(true);
        }


    }

    /**
     * Get the Version
     *
     * @return String
     */
    public String getVersion()
    {
        return version;
    }


    /**
     * Set the value of Version
     *
     * @param v new value
     */
    public void setVersion(String v) 
    {

        if (!ObjectUtils.equals(this.version, v))
        {
            this.version = v;
            setModified(true);
        }


    }

    /**
     * Get the Build
     *
     * @return String
     */
    public String getBuild()
    {
        return build;
    }


    /**
     * Set the value of Build
     *
     * @param v new value
     */
    public void setBuild(String v) 
    {

        if (!ObjectUtils.equals(this.build, v))
        {
            this.build = v;
            setModified(true);
        }


    }

    /**
     * Get the SimulationStartTime
     *
     * @return BigDecimal
     */
    public BigDecimal getSimulationStartTime()
    {
        return simulationStartTime;
    }


    /**
     * Set the value of SimulationStartTime
     *
     * @param v new value
     */
    public void setSimulationStartTime(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.simulationStartTime, v))
        {
            this.simulationStartTime = v;
            setModified(true);
        }


    }

    /**
     * Get the SimulationDuration
     *
     * @return BigDecimal
     */
    public BigDecimal getSimulationDuration()
    {
        return simulationDuration;
    }


    /**
     * Set the value of SimulationDuration
     *
     * @param v new value
     */
    public void setSimulationDuration(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.simulationDuration, v))
        {
            this.simulationDuration = v;
            setModified(true);
        }


    }

    /**
     * Get the SimulationDt
     *
     * @return BigDecimal
     */
    public BigDecimal getSimulationDt()
    {
        return simulationDt;
    }


    /**
     * Set the value of SimulationDt
     *
     * @param v new value
     */
    public void setSimulationDt(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.simulationDt, v))
        {
            this.simulationDt = v;
            setModified(true);
        }


    }

    /**
     * Get the OutputDt
     *
     * @return BigDecimal
     */
    public BigDecimal getOutputDt()
    {
        return outputDt;
    }


    /**
     * Set the value of OutputDt
     *
     * @param v new value
     */
    public void setOutputDt(BigDecimal v) 
    {

        if (!ObjectUtils.equals(this.outputDt, v))
        {
            this.outputDt = v;
            setModified(true);
        }


    }

    /**
     * Get the ExecutionStartTime
     *
     * @return Date
     */
    public Date getExecutionStartTime()
    {
        return executionStartTime;
    }


    /**
     * Set the value of ExecutionStartTime
     *
     * @param v new value
     */
    public void setExecutionStartTime(Date v) 
    {

        if (!ObjectUtils.equals(this.executionStartTime, v))
        {
            this.executionStartTime = v;
            setModified(true);
        }


    }

    /**
     * Get the ExecutionEndTime
     *
     * @return Date
     */
    public Date getExecutionEndTime()
    {
        return executionEndTime;
    }


    /**
     * Set the value of ExecutionEndTime
     *
     * @param v new value
     */
    public void setExecutionEndTime(Date v) 
    {

        if (!ObjectUtils.equals(this.executionEndTime, v))
        {
            this.executionEndTime = v;
            setModified(true);
        }


    }

    /**
     * Get the Status
     *
     * @return Integer
     */
    public Integer getStatus()
    {
        return status;
    }


    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(Integer v) 
    {

        if (!ObjectUtils.equals(this.status, v))
        {
            this.status = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private DataSources aDataSources;

    /**
     * Declares an association between this object and a DataSources object
     *
     * @param v DataSources
     * @throws TorqueException
     */
    public void setDataSources(DataSources v) throws TorqueException
    {
        if (v == null)
        {
            setDataSourceId((Long) null);
        }
        else
        {
            setDataSourceId(v.getId());
        }
        aDataSources = v;
    }


    /**
     * Returns the associated DataSources object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources()
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId));
        }
        return aDataSources;
    }

    /**
     * Return the associated DataSources object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DataSources object
     * @throws TorqueException
     */
    public DataSources getDataSources(Connection connection)
        throws TorqueException
    {
        if (aDataSources == null && (!ObjectUtils.equals(this.dataSourceId, null)))
        {
            aDataSources = DataSourcesPeer.retrieveByPK(SimpleKey.keyFor(this.dataSourceId), connection);
        }
        return aDataSources;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDataSourcesKey(ObjectKey key) throws TorqueException
    {

        setDataSourceId(new Long(((NumberKey) key).longValue()));
    }




    private Scenarios aScenarios;

    /**
     * Declares an association between this object and a Scenarios object
     *
     * @param v Scenarios
     * @throws TorqueException
     */
    public void setScenarios(Scenarios v) throws TorqueException
    {
        if (v == null)
        {
            setScenarioId((Long) null);
        }
        else
        {
            setScenarioId(v.getId());
        }
        aScenarios = v;
    }


    /**
     * Returns the associated Scenarios object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Scenarios object
     * @throws TorqueException
     */
    public Scenarios getScenarios()
        throws TorqueException
    {
        if (aScenarios == null && (!ObjectUtils.equals(this.scenarioId, null)))
        {
            aScenarios = ScenariosPeer.retrieveByPK(SimpleKey.keyFor(this.scenarioId));
        }
        return aScenarios;
    }

    /**
     * Return the associated Scenarios object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Scenarios object
     * @throws TorqueException
     */
    public Scenarios getScenarios(Connection connection)
        throws TorqueException
    {
        if (aScenarios == null && (!ObjectUtils.equals(this.scenarioId, null)))
        {
            aScenarios = ScenariosPeer.retrieveByPK(SimpleKey.keyFor(this.scenarioId), connection);
        }
        return aScenarios;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setScenariosKey(ObjectKey key) throws TorqueException
    {

        setScenarioId(new Long(((NumberKey) key).longValue()));
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("DataSourceId");
            fieldNames.add("ScenarioId");
            fieldNames.add("RunNumber");
            fieldNames.add("Version");
            fieldNames.add("Build");
            fieldNames.add("SimulationStartTime");
            fieldNames.add("SimulationDuration");
            fieldNames.add("SimulationDt");
            fieldNames.add("OutputDt");
            fieldNames.add("ExecutionStartTime");
            fieldNames.add("ExecutionEndTime");
            fieldNames.add("Status");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("DataSourceId"))
        {
            return getDataSourceId();
        }
        if (name.equals("ScenarioId"))
        {
            return getScenarioId();
        }
        if (name.equals("RunNumber"))
        {
            return getRunNumber();
        }
        if (name.equals("Version"))
        {
            return getVersion();
        }
        if (name.equals("Build"))
        {
            return getBuild();
        }
        if (name.equals("SimulationStartTime"))
        {
            return getSimulationStartTime();
        }
        if (name.equals("SimulationDuration"))
        {
            return getSimulationDuration();
        }
        if (name.equals("SimulationDt"))
        {
            return getSimulationDt();
        }
        if (name.equals("OutputDt"))
        {
            return getOutputDt();
        }
        if (name.equals("ExecutionStartTime"))
        {
            return getExecutionStartTime();
        }
        if (name.equals("ExecutionEndTime"))
        {
            return getExecutionEndTime();
        }
        if (name.equals("Status"))
        {
            return getStatus();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("DataSourceId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDataSourceId((Long) value);
            return true;
        }
        if (name.equals("ScenarioId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setScenarioId((Long) value);
            return true;
        }
        if (name.equals("RunNumber"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setRunNumber((Long) value);
            return true;
        }
        if (name.equals("Version"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVersion((String) value);
            return true;
        }
        if (name.equals("Build"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setBuild((String) value);
            return true;
        }
        if (name.equals("SimulationStartTime"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSimulationStartTime((BigDecimal) value);
            return true;
        }
        if (name.equals("SimulationDuration"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSimulationDuration((BigDecimal) value);
            return true;
        }
        if (name.equals("SimulationDt"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSimulationDt((BigDecimal) value);
            return true;
        }
        if (name.equals("OutputDt"))
        {
            // Object fields can be null
            if (value != null && ! BigDecimal.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setOutputDt((BigDecimal) value);
            return true;
        }
        if (name.equals("ExecutionStartTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setExecutionStartTime((Date) value);
            return true;
        }
        if (name.equals("ExecutionEndTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setExecutionEndTime((Date) value);
            return true;
        }
        if (name.equals("Status"))
        {
            // Object fields can be null
            if (value != null && ! Integer.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setStatus((Integer) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(SimulationRunsPeer.DATA_SOURCE_ID))
        {
            return getDataSourceId();
        }
        if (name.equals(SimulationRunsPeer.SCENARIO_ID))
        {
            return getScenarioId();
        }
        if (name.equals(SimulationRunsPeer.RUN_NUMBER))
        {
            return getRunNumber();
        }
        if (name.equals(SimulationRunsPeer.VERSION))
        {
            return getVersion();
        }
        if (name.equals(SimulationRunsPeer.BUILD))
        {
            return getBuild();
        }
        if (name.equals(SimulationRunsPeer.SIMULATION_START_TIME))
        {
            return getSimulationStartTime();
        }
        if (name.equals(SimulationRunsPeer.SIMULATION_DURATION))
        {
            return getSimulationDuration();
        }
        if (name.equals(SimulationRunsPeer.SIMULATION_DT))
        {
            return getSimulationDt();
        }
        if (name.equals(SimulationRunsPeer.OUTPUT_DT))
        {
            return getOutputDt();
        }
        if (name.equals(SimulationRunsPeer.EXECUTION_START_TIME))
        {
            return getExecutionStartTime();
        }
        if (name.equals(SimulationRunsPeer.EXECUTION_END_TIME))
        {
            return getExecutionEndTime();
        }
        if (name.equals(SimulationRunsPeer.STATUS))
        {
            return getStatus();
        }
        if (name.equals(SimulationRunsPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(SimulationRunsPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(SimulationRunsPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(SimulationRunsPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(SimulationRunsPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (SimulationRunsPeer.DATA_SOURCE_ID.equals(name))
        {
            return setByName("DataSourceId", value);
        }
      if (SimulationRunsPeer.SCENARIO_ID.equals(name))
        {
            return setByName("ScenarioId", value);
        }
      if (SimulationRunsPeer.RUN_NUMBER.equals(name))
        {
            return setByName("RunNumber", value);
        }
      if (SimulationRunsPeer.VERSION.equals(name))
        {
            return setByName("Version", value);
        }
      if (SimulationRunsPeer.BUILD.equals(name))
        {
            return setByName("Build", value);
        }
      if (SimulationRunsPeer.SIMULATION_START_TIME.equals(name))
        {
            return setByName("SimulationStartTime", value);
        }
      if (SimulationRunsPeer.SIMULATION_DURATION.equals(name))
        {
            return setByName("SimulationDuration", value);
        }
      if (SimulationRunsPeer.SIMULATION_DT.equals(name))
        {
            return setByName("SimulationDt", value);
        }
      if (SimulationRunsPeer.OUTPUT_DT.equals(name))
        {
            return setByName("OutputDt", value);
        }
      if (SimulationRunsPeer.EXECUTION_START_TIME.equals(name))
        {
            return setByName("ExecutionStartTime", value);
        }
      if (SimulationRunsPeer.EXECUTION_END_TIME.equals(name))
        {
            return setByName("ExecutionEndTime", value);
        }
      if (SimulationRunsPeer.STATUS.equals(name))
        {
            return setByName("Status", value);
        }
      if (SimulationRunsPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (SimulationRunsPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (SimulationRunsPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (SimulationRunsPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (SimulationRunsPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getDataSourceId();
        }
        if (pos == 1)
        {
            return getScenarioId();
        }
        if (pos == 2)
        {
            return getRunNumber();
        }
        if (pos == 3)
        {
            return getVersion();
        }
        if (pos == 4)
        {
            return getBuild();
        }
        if (pos == 5)
        {
            return getSimulationStartTime();
        }
        if (pos == 6)
        {
            return getSimulationDuration();
        }
        if (pos == 7)
        {
            return getSimulationDt();
        }
        if (pos == 8)
        {
            return getOutputDt();
        }
        if (pos == 9)
        {
            return getExecutionStartTime();
        }
        if (pos == 10)
        {
            return getExecutionEndTime();
        }
        if (pos == 11)
        {
            return getStatus();
        }
        if (pos == 12)
        {
            return getCreated();
        }
        if (pos == 13)
        {
            return getModified();
        }
        if (pos == 14)
        {
            return getCreatedBy();
        }
        if (pos == 15)
        {
            return getModifiedBy();
        }
        if (pos == 16)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("DataSourceId", value);
        }
    if (position == 1)
        {
            return setByName("ScenarioId", value);
        }
    if (position == 2)
        {
            return setByName("RunNumber", value);
        }
    if (position == 3)
        {
            return setByName("Version", value);
        }
    if (position == 4)
        {
            return setByName("Build", value);
        }
    if (position == 5)
        {
            return setByName("SimulationStartTime", value);
        }
    if (position == 6)
        {
            return setByName("SimulationDuration", value);
        }
    if (position == 7)
        {
            return setByName("SimulationDt", value);
        }
    if (position == 8)
        {
            return setByName("OutputDt", value);
        }
    if (position == 9)
        {
            return setByName("ExecutionStartTime", value);
        }
    if (position == 10)
        {
            return setByName("ExecutionEndTime", value);
        }
    if (position == 11)
        {
            return setByName("Status", value);
        }
    if (position == 12)
        {
            return setByName("Created", value);
        }
    if (position == 13)
        {
            return setByName("Modified", value);
        }
    if (position == 14)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 15)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 16)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(SimulationRunsPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SimulationRunsPeer.doInsert((SimulationRuns) this, con);
                    setNew(false);
                }
                else
                {
                    SimulationRunsPeer.doUpdate((SimulationRuns) this, con);
                }
            }

            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key dataSourceId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setDataSourceId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setDataSourceId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getDataSourceId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public SimulationRuns copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public SimulationRuns copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public SimulationRuns copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new SimulationRuns(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public SimulationRuns copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new SimulationRuns(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected SimulationRuns copyInto(SimulationRuns copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected SimulationRuns copyInto(SimulationRuns copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected SimulationRuns copyInto(SimulationRuns copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setScenarioId(scenarioId);
        copyObj.setRunNumber(runNumber);
        copyObj.setVersion(version);
        copyObj.setBuild(build);
        copyObj.setSimulationStartTime(simulationStartTime);
        copyObj.setSimulationDuration(simulationDuration);
        copyObj.setSimulationDt(simulationDt);
        copyObj.setOutputDt(outputDt);
        copyObj.setExecutionStartTime(executionStartTime);
        copyObj.setExecutionEndTime(executionEndTime);
        copyObj.setStatus(status);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setDataSourceId((Long)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected SimulationRuns copyInto(SimulationRuns copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setDataSourceId(dataSourceId);
        copyObj.setScenarioId(scenarioId);
        copyObj.setRunNumber(runNumber);
        copyObj.setVersion(version);
        copyObj.setBuild(build);
        copyObj.setSimulationStartTime(simulationStartTime);
        copyObj.setSimulationDuration(simulationDuration);
        copyObj.setSimulationDt(simulationDt);
        copyObj.setOutputDt(outputDt);
        copyObj.setExecutionStartTime(executionStartTime);
        copyObj.setExecutionEndTime(executionEndTime);
        copyObj.setStatus(status);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setDataSourceId((Long)null);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SimulationRunsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return SimulationRunsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("SimulationRuns:\n");
        str.append("DataSourceId = ")
           .append(getDataSourceId())
           .append("\n");
        str.append("ScenarioId = ")
           .append(getScenarioId())
           .append("\n");
        str.append("RunNumber = ")
           .append(getRunNumber())
           .append("\n");
        str.append("Version = ")
           .append(getVersion())
           .append("\n");
        str.append("Build = ")
           .append(getBuild())
           .append("\n");
        str.append("SimulationStartTime = ")
           .append(getSimulationStartTime())
           .append("\n");
        str.append("SimulationDuration = ")
           .append(getSimulationDuration())
           .append("\n");
        str.append("SimulationDt = ")
           .append(getSimulationDt())
           .append("\n");
        str.append("OutputDt = ")
           .append(getOutputDt())
           .append("\n");
        str.append("ExecutionStartTime = ")
           .append(getExecutionStartTime())
           .append("\n");
        str.append("ExecutionEndTime = ")
           .append(getExecutionEndTime())
           .append("\n");
        str.append("Status = ")
           .append(getStatus())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
