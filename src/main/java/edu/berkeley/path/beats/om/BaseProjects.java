package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Projects
 */
public abstract class BaseProjects extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final ProjectsPeer peer =
        new ProjectsPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the name field */
    private String name;

    /** The value for the description field */
    private String description;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated NetworkConnectionSets
        if (collNetworkConnectionSetss != null)
        {
            for (int i = 0; i < collNetworkConnectionSetss.size(); i++)
            {
                ((NetworkConnectionSets) collNetworkConnectionSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated DestinationNetworks
        if (collDestinationNetworkss != null)
        {
            for (int i = 0; i < collDestinationNetworkss.size(); i++)
            {
                ((DestinationNetworks) collDestinationNetworkss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated Routes
        if (collRoutess != null)
        {
            for (int i = 0; i < collRoutess.size(); i++)
            {
                ((Routes) collRoutess.get(i))
                        .setProjectId(v);
            }
        }

        // update associated VehicleTypeSets
        if (collVehicleTypeSetss != null)
        {
            for (int i = 0; i < collVehicleTypeSetss.size(); i++)
            {
                ((VehicleTypeSets) collVehicleTypeSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated VehicleTypes
        if (collVehicleTypess != null)
        {
            for (int i = 0; i < collVehicleTypess.size(); i++)
            {
                ((VehicleTypes) collVehicleTypess.get(i))
                        .setProjectId(v);
            }
        }

        // update associated InitialDensitySets
        if (collInitialDensitySetss != null)
        {
            for (int i = 0; i < collInitialDensitySetss.size(); i++)
            {
                ((InitialDensitySets) collInitialDensitySetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated WeavingFactorSets
        if (collWeavingFactorSetss != null)
        {
            for (int i = 0; i < collWeavingFactorSetss.size(); i++)
            {
                ((WeavingFactorSets) collWeavingFactorSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated FundamentalDiagramProfileSets
        if (collFundamentalDiagramProfileSetss != null)
        {
            for (int i = 0; i < collFundamentalDiagramProfileSetss.size(); i++)
            {
                ((FundamentalDiagramProfileSets) collFundamentalDiagramProfileSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated DemandProfileSets
        if (collDemandProfileSetss != null)
        {
            for (int i = 0; i < collDemandProfileSetss.size(); i++)
            {
                ((DemandProfileSets) collDemandProfileSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated DownstreamBoundaryCapacityProfileSets
        if (collDownstreamBoundaryCapacityProfileSetss != null)
        {
            for (int i = 0; i < collDownstreamBoundaryCapacityProfileSetss.size(); i++)
            {
                ((DownstreamBoundaryCapacityProfileSets) collDownstreamBoundaryCapacityProfileSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated SensorSets
        if (collSensorSetss != null)
        {
            for (int i = 0; i < collSensorSetss.size(); i++)
            {
                ((SensorSets) collSensorSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated SignalSets
        if (collSignalSetss != null)
        {
            for (int i = 0; i < collSignalSetss.size(); i++)
            {
                ((SignalSets) collSignalSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated ControllerSets
        if (collControllerSetss != null)
        {
            for (int i = 0; i < collControllerSetss.size(); i++)
            {
                ((ControllerSets) collControllerSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated EnkfNoiseParameterSets
        if (collEnkfNoiseParameterSetss != null)
        {
            for (int i = 0; i < collEnkfNoiseParameterSetss.size(); i++)
            {
                ((EnkfNoiseParameterSets) collEnkfNoiseParameterSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated EventSets
        if (collEventSetss != null)
        {
            for (int i = 0; i < collEventSetss.size(); i++)
            {
                ((EventSets) collEventSetss.get(i))
                        .setProjectId(v);
            }
        }

        // update associated Scenarios
        if (collScenarioss != null)
        {
            for (int i = 0; i < collScenarioss.size(); i++)
            {
                ((Scenarios) collScenarioss.get(i))
                        .setProjectId(v);
            }
        }
    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }


    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {

        if (!ObjectUtils.equals(this.description, v))
        {
            this.description = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

       


    /**
     * Collection to store aggregation of collNetworkConnectionSetss
     */
    protected List collNetworkConnectionSetss;

    /**
     * Temporary storage of collNetworkConnectionSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkConnectionSetss()
    {
        if (collNetworkConnectionSetss == null)
        {
            collNetworkConnectionSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkConnectionSets object to this object
     * through the NetworkConnectionSets foreign key attribute
     *
     * @param l NetworkConnectionSets
     * @throws TorqueException
     */
    public void addNetworkConnectionSets(NetworkConnectionSets l) throws TorqueException
    {
        getNetworkConnectionSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a NetworkConnectionSets object to this object
     * through the NetworkConnectionSets foreign key attribute using connection.
     *
     * @param l NetworkConnectionSets
     * @throws TorqueException
     */
    public void addNetworkConnectionSets(NetworkConnectionSets l, Connection con) throws TorqueException
    {
        getNetworkConnectionSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkConnectionSetss
     */
    private Criteria lastNetworkConnectionSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkConnectionSetss()
        throws TorqueException
    {
        if (collNetworkConnectionSetss == null)
        {
            collNetworkConnectionSetss = getNetworkConnectionSetss(new Criteria(10));
        }
        return collNetworkConnectionSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related NetworkConnectionSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkConnectionSetss(Criteria criteria) throws TorqueException
    {
        if (collNetworkConnectionSetss == null)
        {
            if (isNew())
            {
               collNetworkConnectionSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionSetsPeer.PROJECT_ID, getId() );
                collNetworkConnectionSetss = NetworkConnectionSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkConnectionSetsPeer.PROJECT_ID, getId());
                if (!lastNetworkConnectionSetssCriteria.equals(criteria))
                {
                    collNetworkConnectionSetss = NetworkConnectionSetsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkConnectionSetssCriteria = criteria;

        return collNetworkConnectionSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkConnectionSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionSetss(Connection con) throws TorqueException
    {
        if (collNetworkConnectionSetss == null)
        {
            collNetworkConnectionSetss = getNetworkConnectionSetss(new Criteria(10), con);
        }
        return collNetworkConnectionSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related NetworkConnectionSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkConnectionSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkConnectionSetss == null)
        {
            if (isNew())
            {
               collNetworkConnectionSetss = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkConnectionSetsPeer.PROJECT_ID, getId());
                 collNetworkConnectionSetss = NetworkConnectionSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkConnectionSetsPeer.PROJECT_ID, getId());
                 if (!lastNetworkConnectionSetssCriteria.equals(criteria))
                 {
                     collNetworkConnectionSetss = NetworkConnectionSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkConnectionSetssCriteria = criteria;

         return collNetworkConnectionSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related NetworkConnectionSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getNetworkConnectionSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkConnectionSetss == null)
        {
            if (isNew())
            {
               collNetworkConnectionSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkConnectionSetsPeer.PROJECT_ID, getId());
                collNetworkConnectionSetss = NetworkConnectionSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkConnectionSetsPeer.PROJECT_ID, getId());
            if (!lastNetworkConnectionSetssCriteria.equals(criteria))
            {
                collNetworkConnectionSetss = NetworkConnectionSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastNetworkConnectionSetssCriteria = criteria;

        return collNetworkConnectionSetss;
    }





    /**
     * Collection to store aggregation of collDestinationNetworkss
     */
    protected List collDestinationNetworkss;

    /**
     * Temporary storage of collDestinationNetworkss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDestinationNetworkss()
    {
        if (collDestinationNetworkss == null)
        {
            collDestinationNetworkss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DestinationNetworks object to this object
     * through the DestinationNetworks foreign key attribute
     *
     * @param l DestinationNetworks
     * @throws TorqueException
     */
    public void addDestinationNetworks(DestinationNetworks l) throws TorqueException
    {
        getDestinationNetworkss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a DestinationNetworks object to this object
     * through the DestinationNetworks foreign key attribute using connection.
     *
     * @param l DestinationNetworks
     * @throws TorqueException
     */
    public void addDestinationNetworks(DestinationNetworks l, Connection con) throws TorqueException
    {
        getDestinationNetworkss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collDestinationNetworkss
     */
    private Criteria lastDestinationNetworkssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDestinationNetworkss()
        throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            collDestinationNetworkss = getDestinationNetworkss(new Criteria(10));
        }
        return collDestinationNetworkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDestinationNetworkss(Criteria criteria) throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworksPeer.PROJECT_ID, getId() );
                collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
                if (!lastDestinationNetworkssCriteria.equals(criteria))
                {
                    collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria);
                }
            }
        }
        lastDestinationNetworkssCriteria = criteria;

        return collDestinationNetworkss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkss(Connection con) throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            collDestinationNetworkss = getDestinationNetworkss(new Criteria(10), con);
        }
        return collDestinationNetworkss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                 criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
                 collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
                 if (!lastDestinationNetworkssCriteria.equals(criteria))
                 {
                     collDestinationNetworkss = DestinationNetworksPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDestinationNetworkssCriteria = criteria;

         return collDestinationNetworkss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getDestinationNetworkssJoinLinkFamilies(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
            if (!lastDestinationNetworkssCriteria.equals(criteria))
            {
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinLinkFamilies(criteria);
            }
        }
        lastDestinationNetworkssCriteria = criteria;

        return collDestinationNetworkss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related DestinationNetworkss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getDestinationNetworkssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkss == null)
        {
            if (isNew())
            {
               collDestinationNetworkss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworksPeer.PROJECT_ID, getId());
            if (!lastDestinationNetworkssCriteria.equals(criteria))
            {
                collDestinationNetworkss = DestinationNetworksPeer.doSelectJoinProjects(criteria);
            }
        }
        lastDestinationNetworkssCriteria = criteria;

        return collDestinationNetworkss;
    }





    /**
     * Collection to store aggregation of collRoutess
     */
    protected List collRoutess;

    /**
     * Temporary storage of collRoutess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRoutess()
    {
        if (collRoutess == null)
        {
            collRoutess = new ArrayList();
        }
    }


    /**
     * Method called to associate a Routes object to this object
     * through the Routes foreign key attribute
     *
     * @param l Routes
     * @throws TorqueException
     */
    public void addRoutes(Routes l) throws TorqueException
    {
        getRoutess().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a Routes object to this object
     * through the Routes foreign key attribute using connection.
     *
     * @param l Routes
     * @throws TorqueException
     */
    public void addRoutes(Routes l, Connection con) throws TorqueException
    {
        getRoutess(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collRoutess
     */
    private Criteria lastRoutessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRoutess(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getRoutess()
        throws TorqueException
    {
        if (collRoutess == null)
        {
            collRoutess = getRoutess(new Criteria(10));
        }
        return collRoutess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related Routess from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getRoutess(Criteria criteria) throws TorqueException
    {
        if (collRoutess == null)
        {
            if (isNew())
            {
               collRoutess = new ArrayList();
            }
            else
            {
                criteria.add(RoutesPeer.PROJECT_ID, getId() );
                collRoutess = RoutesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RoutesPeer.PROJECT_ID, getId());
                if (!lastRoutessCriteria.equals(criteria))
                {
                    collRoutess = RoutesPeer.doSelect(criteria);
                }
            }
        }
        lastRoutessCriteria = criteria;

        return collRoutess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRoutess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRoutess(Connection con) throws TorqueException
    {
        if (collRoutess == null)
        {
            collRoutess = getRoutess(new Criteria(10), con);
        }
        return collRoutess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related Routess from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRoutess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRoutess == null)
        {
            if (isNew())
            {
               collRoutess = new ArrayList();
            }
            else
            {
                 criteria.add(RoutesPeer.PROJECT_ID, getId());
                 collRoutess = RoutesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RoutesPeer.PROJECT_ID, getId());
                 if (!lastRoutessCriteria.equals(criteria))
                 {
                     collRoutess = RoutesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRoutessCriteria = criteria;

         return collRoutess;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Routess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getRoutessJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collRoutess == null)
        {
            if (isNew())
            {
               collRoutess = new ArrayList();
            }
            else
            {
                criteria.add(RoutesPeer.PROJECT_ID, getId());
                collRoutess = RoutesPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RoutesPeer.PROJECT_ID, getId());
            if (!lastRoutessCriteria.equals(criteria))
            {
                collRoutess = RoutesPeer.doSelectJoinProjects(criteria);
            }
        }
        lastRoutessCriteria = criteria;

        return collRoutess;
    }





    /**
     * Collection to store aggregation of collVehicleTypeSetss
     */
    protected List collVehicleTypeSetss;

    /**
     * Temporary storage of collVehicleTypeSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initVehicleTypeSetss()
    {
        if (collVehicleTypeSetss == null)
        {
            collVehicleTypeSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a VehicleTypeSets object to this object
     * through the VehicleTypeSets foreign key attribute
     *
     * @param l VehicleTypeSets
     * @throws TorqueException
     */
    public void addVehicleTypeSets(VehicleTypeSets l) throws TorqueException
    {
        getVehicleTypeSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a VehicleTypeSets object to this object
     * through the VehicleTypeSets foreign key attribute using connection.
     *
     * @param l VehicleTypeSets
     * @throws TorqueException
     */
    public void addVehicleTypeSets(VehicleTypeSets l, Connection con) throws TorqueException
    {
        getVehicleTypeSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collVehicleTypeSetss
     */
    private Criteria lastVehicleTypeSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehicleTypeSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getVehicleTypeSetss()
        throws TorqueException
    {
        if (collVehicleTypeSetss == null)
        {
            collVehicleTypeSetss = getVehicleTypeSetss(new Criteria(10));
        }
        return collVehicleTypeSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related VehicleTypeSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getVehicleTypeSetss(Criteria criteria) throws TorqueException
    {
        if (collVehicleTypeSetss == null)
        {
            if (isNew())
            {
               collVehicleTypeSetss = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypeSetsPeer.PROJECT_ID, getId() );
                collVehicleTypeSetss = VehicleTypeSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(VehicleTypeSetsPeer.PROJECT_ID, getId());
                if (!lastVehicleTypeSetssCriteria.equals(criteria))
                {
                    collVehicleTypeSetss = VehicleTypeSetsPeer.doSelect(criteria);
                }
            }
        }
        lastVehicleTypeSetssCriteria = criteria;

        return collVehicleTypeSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehicleTypeSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehicleTypeSetss(Connection con) throws TorqueException
    {
        if (collVehicleTypeSetss == null)
        {
            collVehicleTypeSetss = getVehicleTypeSetss(new Criteria(10), con);
        }
        return collVehicleTypeSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related VehicleTypeSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehicleTypeSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collVehicleTypeSetss == null)
        {
            if (isNew())
            {
               collVehicleTypeSetss = new ArrayList();
            }
            else
            {
                 criteria.add(VehicleTypeSetsPeer.PROJECT_ID, getId());
                 collVehicleTypeSetss = VehicleTypeSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(VehicleTypeSetsPeer.PROJECT_ID, getId());
                 if (!lastVehicleTypeSetssCriteria.equals(criteria))
                 {
                     collVehicleTypeSetss = VehicleTypeSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastVehicleTypeSetssCriteria = criteria;

         return collVehicleTypeSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related VehicleTypeSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getVehicleTypeSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collVehicleTypeSetss == null)
        {
            if (isNew())
            {
               collVehicleTypeSetss = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypeSetsPeer.PROJECT_ID, getId());
                collVehicleTypeSetss = VehicleTypeSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(VehicleTypeSetsPeer.PROJECT_ID, getId());
            if (!lastVehicleTypeSetssCriteria.equals(criteria))
            {
                collVehicleTypeSetss = VehicleTypeSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastVehicleTypeSetssCriteria = criteria;

        return collVehicleTypeSetss;
    }





    /**
     * Collection to store aggregation of collVehicleTypess
     */
    protected List collVehicleTypess;

    /**
     * Temporary storage of collVehicleTypess to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initVehicleTypess()
    {
        if (collVehicleTypess == null)
        {
            collVehicleTypess = new ArrayList();
        }
    }


    /**
     * Method called to associate a VehicleTypes object to this object
     * through the VehicleTypes foreign key attribute
     *
     * @param l VehicleTypes
     * @throws TorqueException
     */
    public void addVehicleTypes(VehicleTypes l) throws TorqueException
    {
        getVehicleTypess().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a VehicleTypes object to this object
     * through the VehicleTypes foreign key attribute using connection.
     *
     * @param l VehicleTypes
     * @throws TorqueException
     */
    public void addVehicleTypes(VehicleTypes l, Connection con) throws TorqueException
    {
        getVehicleTypess(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collVehicleTypess
     */
    private Criteria lastVehicleTypessCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehicleTypess(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getVehicleTypess()
        throws TorqueException
    {
        if (collVehicleTypess == null)
        {
            collVehicleTypess = getVehicleTypess(new Criteria(10));
        }
        return collVehicleTypess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related VehicleTypess from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getVehicleTypess(Criteria criteria) throws TorqueException
    {
        if (collVehicleTypess == null)
        {
            if (isNew())
            {
               collVehicleTypess = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypesPeer.PROJECT_ID, getId() );
                collVehicleTypess = VehicleTypesPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(VehicleTypesPeer.PROJECT_ID, getId());
                if (!lastVehicleTypessCriteria.equals(criteria))
                {
                    collVehicleTypess = VehicleTypesPeer.doSelect(criteria);
                }
            }
        }
        lastVehicleTypessCriteria = criteria;

        return collVehicleTypess;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getVehicleTypess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehicleTypess(Connection con) throws TorqueException
    {
        if (collVehicleTypess == null)
        {
            collVehicleTypess = getVehicleTypess(new Criteria(10), con);
        }
        return collVehicleTypess;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related VehicleTypess from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getVehicleTypess(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collVehicleTypess == null)
        {
            if (isNew())
            {
               collVehicleTypess = new ArrayList();
            }
            else
            {
                 criteria.add(VehicleTypesPeer.PROJECT_ID, getId());
                 collVehicleTypess = VehicleTypesPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(VehicleTypesPeer.PROJECT_ID, getId());
                 if (!lastVehicleTypessCriteria.equals(criteria))
                 {
                     collVehicleTypess = VehicleTypesPeer.doSelect(criteria, con);
                 }
             }
         }
         lastVehicleTypessCriteria = criteria;

         return collVehicleTypess;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related VehicleTypess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getVehicleTypessJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collVehicleTypess == null)
        {
            if (isNew())
            {
               collVehicleTypess = new ArrayList();
            }
            else
            {
                criteria.add(VehicleTypesPeer.PROJECT_ID, getId());
                collVehicleTypess = VehicleTypesPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(VehicleTypesPeer.PROJECT_ID, getId());
            if (!lastVehicleTypessCriteria.equals(criteria))
            {
                collVehicleTypess = VehicleTypesPeer.doSelectJoinProjects(criteria);
            }
        }
        lastVehicleTypessCriteria = criteria;

        return collVehicleTypess;
    }





    /**
     * Collection to store aggregation of collInitialDensitySetss
     */
    protected List collInitialDensitySetss;

    /**
     * Temporary storage of collInitialDensitySetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInitialDensitySetss()
    {
        if (collInitialDensitySetss == null)
        {
            collInitialDensitySetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a InitialDensitySets object to this object
     * through the InitialDensitySets foreign key attribute
     *
     * @param l InitialDensitySets
     * @throws TorqueException
     */
    public void addInitialDensitySets(InitialDensitySets l) throws TorqueException
    {
        getInitialDensitySetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a InitialDensitySets object to this object
     * through the InitialDensitySets foreign key attribute using connection.
     *
     * @param l InitialDensitySets
     * @throws TorqueException
     */
    public void addInitialDensitySets(InitialDensitySets l, Connection con) throws TorqueException
    {
        getInitialDensitySetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collInitialDensitySetss
     */
    private Criteria lastInitialDensitySetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitySetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getInitialDensitySetss()
        throws TorqueException
    {
        if (collInitialDensitySetss == null)
        {
            collInitialDensitySetss = getInitialDensitySetss(new Criteria(10));
        }
        return collInitialDensitySetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related InitialDensitySetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInitialDensitySetss(Criteria criteria) throws TorqueException
    {
        if (collInitialDensitySetss == null)
        {
            if (isNew())
            {
               collInitialDensitySetss = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitySetsPeer.PROJECT_ID, getId() );
                collInitialDensitySetss = InitialDensitySetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(InitialDensitySetsPeer.PROJECT_ID, getId());
                if (!lastInitialDensitySetssCriteria.equals(criteria))
                {
                    collInitialDensitySetss = InitialDensitySetsPeer.doSelect(criteria);
                }
            }
        }
        lastInitialDensitySetssCriteria = criteria;

        return collInitialDensitySetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInitialDensitySetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitySetss(Connection con) throws TorqueException
    {
        if (collInitialDensitySetss == null)
        {
            collInitialDensitySetss = getInitialDensitySetss(new Criteria(10), con);
        }
        return collInitialDensitySetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related InitialDensitySetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInitialDensitySetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collInitialDensitySetss == null)
        {
            if (isNew())
            {
               collInitialDensitySetss = new ArrayList();
            }
            else
            {
                 criteria.add(InitialDensitySetsPeer.PROJECT_ID, getId());
                 collInitialDensitySetss = InitialDensitySetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(InitialDensitySetsPeer.PROJECT_ID, getId());
                 if (!lastInitialDensitySetssCriteria.equals(criteria))
                 {
                     collInitialDensitySetss = InitialDensitySetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInitialDensitySetssCriteria = criteria;

         return collInitialDensitySetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related InitialDensitySetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getInitialDensitySetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collInitialDensitySetss == null)
        {
            if (isNew())
            {
               collInitialDensitySetss = new ArrayList();
            }
            else
            {
                criteria.add(InitialDensitySetsPeer.PROJECT_ID, getId());
                collInitialDensitySetss = InitialDensitySetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(InitialDensitySetsPeer.PROJECT_ID, getId());
            if (!lastInitialDensitySetssCriteria.equals(criteria))
            {
                collInitialDensitySetss = InitialDensitySetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastInitialDensitySetssCriteria = criteria;

        return collInitialDensitySetss;
    }





    /**
     * Collection to store aggregation of collWeavingFactorSetss
     */
    protected List collWeavingFactorSetss;

    /**
     * Temporary storage of collWeavingFactorSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initWeavingFactorSetss()
    {
        if (collWeavingFactorSetss == null)
        {
            collWeavingFactorSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a WeavingFactorSets object to this object
     * through the WeavingFactorSets foreign key attribute
     *
     * @param l WeavingFactorSets
     * @throws TorqueException
     */
    public void addWeavingFactorSets(WeavingFactorSets l) throws TorqueException
    {
        getWeavingFactorSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a WeavingFactorSets object to this object
     * through the WeavingFactorSets foreign key attribute using connection.
     *
     * @param l WeavingFactorSets
     * @throws TorqueException
     */
    public void addWeavingFactorSets(WeavingFactorSets l, Connection con) throws TorqueException
    {
        getWeavingFactorSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collWeavingFactorSetss
     */
    private Criteria lastWeavingFactorSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getWeavingFactorSetss()
        throws TorqueException
    {
        if (collWeavingFactorSetss == null)
        {
            collWeavingFactorSetss = getWeavingFactorSetss(new Criteria(10));
        }
        return collWeavingFactorSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related WeavingFactorSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getWeavingFactorSetss(Criteria criteria) throws TorqueException
    {
        if (collWeavingFactorSetss == null)
        {
            if (isNew())
            {
               collWeavingFactorSetss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorSetsPeer.PROJECT_ID, getId() );
                collWeavingFactorSetss = WeavingFactorSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(WeavingFactorSetsPeer.PROJECT_ID, getId());
                if (!lastWeavingFactorSetssCriteria.equals(criteria))
                {
                    collWeavingFactorSetss = WeavingFactorSetsPeer.doSelect(criteria);
                }
            }
        }
        lastWeavingFactorSetssCriteria = criteria;

        return collWeavingFactorSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getWeavingFactorSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorSetss(Connection con) throws TorqueException
    {
        if (collWeavingFactorSetss == null)
        {
            collWeavingFactorSetss = getWeavingFactorSetss(new Criteria(10), con);
        }
        return collWeavingFactorSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related WeavingFactorSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getWeavingFactorSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collWeavingFactorSetss == null)
        {
            if (isNew())
            {
               collWeavingFactorSetss = new ArrayList();
            }
            else
            {
                 criteria.add(WeavingFactorSetsPeer.PROJECT_ID, getId());
                 collWeavingFactorSetss = WeavingFactorSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(WeavingFactorSetsPeer.PROJECT_ID, getId());
                 if (!lastWeavingFactorSetssCriteria.equals(criteria))
                 {
                     collWeavingFactorSetss = WeavingFactorSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastWeavingFactorSetssCriteria = criteria;

         return collWeavingFactorSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related WeavingFactorSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getWeavingFactorSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collWeavingFactorSetss == null)
        {
            if (isNew())
            {
               collWeavingFactorSetss = new ArrayList();
            }
            else
            {
                criteria.add(WeavingFactorSetsPeer.PROJECT_ID, getId());
                collWeavingFactorSetss = WeavingFactorSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(WeavingFactorSetsPeer.PROJECT_ID, getId());
            if (!lastWeavingFactorSetssCriteria.equals(criteria))
            {
                collWeavingFactorSetss = WeavingFactorSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastWeavingFactorSetssCriteria = criteria;

        return collWeavingFactorSetss;
    }





    /**
     * Collection to store aggregation of collFundamentalDiagramProfileSetss
     */
    protected List collFundamentalDiagramProfileSetss;

    /**
     * Temporary storage of collFundamentalDiagramProfileSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initFundamentalDiagramProfileSetss()
    {
        if (collFundamentalDiagramProfileSetss == null)
        {
            collFundamentalDiagramProfileSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a FundamentalDiagramProfileSets object to this object
     * through the FundamentalDiagramProfileSets foreign key attribute
     *
     * @param l FundamentalDiagramProfileSets
     * @throws TorqueException
     */
    public void addFundamentalDiagramProfileSets(FundamentalDiagramProfileSets l) throws TorqueException
    {
        getFundamentalDiagramProfileSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a FundamentalDiagramProfileSets object to this object
     * through the FundamentalDiagramProfileSets foreign key attribute using connection.
     *
     * @param l FundamentalDiagramProfileSets
     * @throws TorqueException
     */
    public void addFundamentalDiagramProfileSets(FundamentalDiagramProfileSets l, Connection con) throws TorqueException
    {
        getFundamentalDiagramProfileSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collFundamentalDiagramProfileSetss
     */
    private Criteria lastFundamentalDiagramProfileSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFundamentalDiagramProfileSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getFundamentalDiagramProfileSetss()
        throws TorqueException
    {
        if (collFundamentalDiagramProfileSetss == null)
        {
            collFundamentalDiagramProfileSetss = getFundamentalDiagramProfileSetss(new Criteria(10));
        }
        return collFundamentalDiagramProfileSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related FundamentalDiagramProfileSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getFundamentalDiagramProfileSetss(Criteria criteria) throws TorqueException
    {
        if (collFundamentalDiagramProfileSetss == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfileSetss = new ArrayList();
            }
            else
            {
                criteria.add(FundamentalDiagramProfileSetsPeer.PROJECT_ID, getId() );
                collFundamentalDiagramProfileSetss = FundamentalDiagramProfileSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(FundamentalDiagramProfileSetsPeer.PROJECT_ID, getId());
                if (!lastFundamentalDiagramProfileSetssCriteria.equals(criteria))
                {
                    collFundamentalDiagramProfileSetss = FundamentalDiagramProfileSetsPeer.doSelect(criteria);
                }
            }
        }
        lastFundamentalDiagramProfileSetssCriteria = criteria;

        return collFundamentalDiagramProfileSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFundamentalDiagramProfileSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getFundamentalDiagramProfileSetss(Connection con) throws TorqueException
    {
        if (collFundamentalDiagramProfileSetss == null)
        {
            collFundamentalDiagramProfileSetss = getFundamentalDiagramProfileSetss(new Criteria(10), con);
        }
        return collFundamentalDiagramProfileSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related FundamentalDiagramProfileSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getFundamentalDiagramProfileSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collFundamentalDiagramProfileSetss == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfileSetss = new ArrayList();
            }
            else
            {
                 criteria.add(FundamentalDiagramProfileSetsPeer.PROJECT_ID, getId());
                 collFundamentalDiagramProfileSetss = FundamentalDiagramProfileSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(FundamentalDiagramProfileSetsPeer.PROJECT_ID, getId());
                 if (!lastFundamentalDiagramProfileSetssCriteria.equals(criteria))
                 {
                     collFundamentalDiagramProfileSetss = FundamentalDiagramProfileSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastFundamentalDiagramProfileSetssCriteria = criteria;

         return collFundamentalDiagramProfileSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related FundamentalDiagramProfileSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getFundamentalDiagramProfileSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collFundamentalDiagramProfileSetss == null)
        {
            if (isNew())
            {
               collFundamentalDiagramProfileSetss = new ArrayList();
            }
            else
            {
                criteria.add(FundamentalDiagramProfileSetsPeer.PROJECT_ID, getId());
                collFundamentalDiagramProfileSetss = FundamentalDiagramProfileSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(FundamentalDiagramProfileSetsPeer.PROJECT_ID, getId());
            if (!lastFundamentalDiagramProfileSetssCriteria.equals(criteria))
            {
                collFundamentalDiagramProfileSetss = FundamentalDiagramProfileSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastFundamentalDiagramProfileSetssCriteria = criteria;

        return collFundamentalDiagramProfileSetss;
    }





    /**
     * Collection to store aggregation of collDemandProfileSetss
     */
    protected List collDemandProfileSetss;

    /**
     * Temporary storage of collDemandProfileSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDemandProfileSetss()
    {
        if (collDemandProfileSetss == null)
        {
            collDemandProfileSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DemandProfileSets object to this object
     * through the DemandProfileSets foreign key attribute
     *
     * @param l DemandProfileSets
     * @throws TorqueException
     */
    public void addDemandProfileSets(DemandProfileSets l) throws TorqueException
    {
        getDemandProfileSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a DemandProfileSets object to this object
     * through the DemandProfileSets foreign key attribute using connection.
     *
     * @param l DemandProfileSets
     * @throws TorqueException
     */
    public void addDemandProfileSets(DemandProfileSets l, Connection con) throws TorqueException
    {
        getDemandProfileSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collDemandProfileSetss
     */
    private Criteria lastDemandProfileSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandProfileSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDemandProfileSetss()
        throws TorqueException
    {
        if (collDemandProfileSetss == null)
        {
            collDemandProfileSetss = getDemandProfileSetss(new Criteria(10));
        }
        return collDemandProfileSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related DemandProfileSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDemandProfileSetss(Criteria criteria) throws TorqueException
    {
        if (collDemandProfileSetss == null)
        {
            if (isNew())
            {
               collDemandProfileSetss = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfileSetsPeer.PROJECT_ID, getId() );
                collDemandProfileSetss = DemandProfileSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DemandProfileSetsPeer.PROJECT_ID, getId());
                if (!lastDemandProfileSetssCriteria.equals(criteria))
                {
                    collDemandProfileSetss = DemandProfileSetsPeer.doSelect(criteria);
                }
            }
        }
        lastDemandProfileSetssCriteria = criteria;

        return collDemandProfileSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDemandProfileSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandProfileSetss(Connection con) throws TorqueException
    {
        if (collDemandProfileSetss == null)
        {
            collDemandProfileSetss = getDemandProfileSetss(new Criteria(10), con);
        }
        return collDemandProfileSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related DemandProfileSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDemandProfileSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDemandProfileSetss == null)
        {
            if (isNew())
            {
               collDemandProfileSetss = new ArrayList();
            }
            else
            {
                 criteria.add(DemandProfileSetsPeer.PROJECT_ID, getId());
                 collDemandProfileSetss = DemandProfileSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DemandProfileSetsPeer.PROJECT_ID, getId());
                 if (!lastDemandProfileSetssCriteria.equals(criteria))
                 {
                     collDemandProfileSetss = DemandProfileSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDemandProfileSetssCriteria = criteria;

         return collDemandProfileSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related DemandProfileSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getDemandProfileSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collDemandProfileSetss == null)
        {
            if (isNew())
            {
               collDemandProfileSetss = new ArrayList();
            }
            else
            {
                criteria.add(DemandProfileSetsPeer.PROJECT_ID, getId());
                collDemandProfileSetss = DemandProfileSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DemandProfileSetsPeer.PROJECT_ID, getId());
            if (!lastDemandProfileSetssCriteria.equals(criteria))
            {
                collDemandProfileSetss = DemandProfileSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastDemandProfileSetssCriteria = criteria;

        return collDemandProfileSetss;
    }





    /**
     * Collection to store aggregation of collDownstreamBoundaryCapacityProfileSetss
     */
    protected List collDownstreamBoundaryCapacityProfileSetss;

    /**
     * Temporary storage of collDownstreamBoundaryCapacityProfileSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDownstreamBoundaryCapacityProfileSetss()
    {
        if (collDownstreamBoundaryCapacityProfileSetss == null)
        {
            collDownstreamBoundaryCapacityProfileSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DownstreamBoundaryCapacityProfileSets object to this object
     * through the DownstreamBoundaryCapacityProfileSets foreign key attribute
     *
     * @param l DownstreamBoundaryCapacityProfileSets
     * @throws TorqueException
     */
    public void addDownstreamBoundaryCapacityProfileSets(DownstreamBoundaryCapacityProfileSets l) throws TorqueException
    {
        getDownstreamBoundaryCapacityProfileSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a DownstreamBoundaryCapacityProfileSets object to this object
     * through the DownstreamBoundaryCapacityProfileSets foreign key attribute using connection.
     *
     * @param l DownstreamBoundaryCapacityProfileSets
     * @throws TorqueException
     */
    public void addDownstreamBoundaryCapacityProfileSets(DownstreamBoundaryCapacityProfileSets l, Connection con) throws TorqueException
    {
        getDownstreamBoundaryCapacityProfileSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collDownstreamBoundaryCapacityProfileSetss
     */
    private Criteria lastDownstreamBoundaryCapacityProfileSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDownstreamBoundaryCapacityProfileSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDownstreamBoundaryCapacityProfileSetss()
        throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfileSetss == null)
        {
            collDownstreamBoundaryCapacityProfileSetss = getDownstreamBoundaryCapacityProfileSetss(new Criteria(10));
        }
        return collDownstreamBoundaryCapacityProfileSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfileSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDownstreamBoundaryCapacityProfileSetss(Criteria criteria) throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfileSetss == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfileSetss = new ArrayList();
            }
            else
            {
                criteria.add(DownstreamBoundaryCapacityProfileSetsPeer.PROJECT_ID, getId() );
                collDownstreamBoundaryCapacityProfileSetss = DownstreamBoundaryCapacityProfileSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DownstreamBoundaryCapacityProfileSetsPeer.PROJECT_ID, getId());
                if (!lastDownstreamBoundaryCapacityProfileSetssCriteria.equals(criteria))
                {
                    collDownstreamBoundaryCapacityProfileSetss = DownstreamBoundaryCapacityProfileSetsPeer.doSelect(criteria);
                }
            }
        }
        lastDownstreamBoundaryCapacityProfileSetssCriteria = criteria;

        return collDownstreamBoundaryCapacityProfileSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDownstreamBoundaryCapacityProfileSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDownstreamBoundaryCapacityProfileSetss(Connection con) throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfileSetss == null)
        {
            collDownstreamBoundaryCapacityProfileSetss = getDownstreamBoundaryCapacityProfileSetss(new Criteria(10), con);
        }
        return collDownstreamBoundaryCapacityProfileSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfileSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDownstreamBoundaryCapacityProfileSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfileSetss == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfileSetss = new ArrayList();
            }
            else
            {
                 criteria.add(DownstreamBoundaryCapacityProfileSetsPeer.PROJECT_ID, getId());
                 collDownstreamBoundaryCapacityProfileSetss = DownstreamBoundaryCapacityProfileSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DownstreamBoundaryCapacityProfileSetsPeer.PROJECT_ID, getId());
                 if (!lastDownstreamBoundaryCapacityProfileSetssCriteria.equals(criteria))
                 {
                     collDownstreamBoundaryCapacityProfileSetss = DownstreamBoundaryCapacityProfileSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDownstreamBoundaryCapacityProfileSetssCriteria = criteria;

         return collDownstreamBoundaryCapacityProfileSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related DownstreamBoundaryCapacityProfileSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getDownstreamBoundaryCapacityProfileSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collDownstreamBoundaryCapacityProfileSetss == null)
        {
            if (isNew())
            {
               collDownstreamBoundaryCapacityProfileSetss = new ArrayList();
            }
            else
            {
                criteria.add(DownstreamBoundaryCapacityProfileSetsPeer.PROJECT_ID, getId());
                collDownstreamBoundaryCapacityProfileSetss = DownstreamBoundaryCapacityProfileSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DownstreamBoundaryCapacityProfileSetsPeer.PROJECT_ID, getId());
            if (!lastDownstreamBoundaryCapacityProfileSetssCriteria.equals(criteria))
            {
                collDownstreamBoundaryCapacityProfileSetss = DownstreamBoundaryCapacityProfileSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastDownstreamBoundaryCapacityProfileSetssCriteria = criteria;

        return collDownstreamBoundaryCapacityProfileSetss;
    }





    /**
     * Collection to store aggregation of collSensorSetss
     */
    protected List collSensorSetss;

    /**
     * Temporary storage of collSensorSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSensorSetss()
    {
        if (collSensorSetss == null)
        {
            collSensorSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a SensorSets object to this object
     * through the SensorSets foreign key attribute
     *
     * @param l SensorSets
     * @throws TorqueException
     */
    public void addSensorSets(SensorSets l) throws TorqueException
    {
        getSensorSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a SensorSets object to this object
     * through the SensorSets foreign key attribute using connection.
     *
     * @param l SensorSets
     * @throws TorqueException
     */
    public void addSensorSets(SensorSets l, Connection con) throws TorqueException
    {
        getSensorSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collSensorSetss
     */
    private Criteria lastSensorSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSensorSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSensorSetss()
        throws TorqueException
    {
        if (collSensorSetss == null)
        {
            collSensorSetss = getSensorSetss(new Criteria(10));
        }
        return collSensorSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related SensorSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSensorSetss(Criteria criteria) throws TorqueException
    {
        if (collSensorSetss == null)
        {
            if (isNew())
            {
               collSensorSetss = new ArrayList();
            }
            else
            {
                criteria.add(SensorSetsPeer.PROJECT_ID, getId() );
                collSensorSetss = SensorSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SensorSetsPeer.PROJECT_ID, getId());
                if (!lastSensorSetssCriteria.equals(criteria))
                {
                    collSensorSetss = SensorSetsPeer.doSelect(criteria);
                }
            }
        }
        lastSensorSetssCriteria = criteria;

        return collSensorSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSensorSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSensorSetss(Connection con) throws TorqueException
    {
        if (collSensorSetss == null)
        {
            collSensorSetss = getSensorSetss(new Criteria(10), con);
        }
        return collSensorSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related SensorSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSensorSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSensorSetss == null)
        {
            if (isNew())
            {
               collSensorSetss = new ArrayList();
            }
            else
            {
                 criteria.add(SensorSetsPeer.PROJECT_ID, getId());
                 collSensorSetss = SensorSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SensorSetsPeer.PROJECT_ID, getId());
                 if (!lastSensorSetssCriteria.equals(criteria))
                 {
                     collSensorSetss = SensorSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSensorSetssCriteria = criteria;

         return collSensorSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related SensorSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getSensorSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collSensorSetss == null)
        {
            if (isNew())
            {
               collSensorSetss = new ArrayList();
            }
            else
            {
                criteria.add(SensorSetsPeer.PROJECT_ID, getId());
                collSensorSetss = SensorSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SensorSetsPeer.PROJECT_ID, getId());
            if (!lastSensorSetssCriteria.equals(criteria))
            {
                collSensorSetss = SensorSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastSensorSetssCriteria = criteria;

        return collSensorSetss;
    }





    /**
     * Collection to store aggregation of collSignalSetss
     */
    protected List collSignalSetss;

    /**
     * Temporary storage of collSignalSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSignalSetss()
    {
        if (collSignalSetss == null)
        {
            collSignalSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a SignalSets object to this object
     * through the SignalSets foreign key attribute
     *
     * @param l SignalSets
     * @throws TorqueException
     */
    public void addSignalSets(SignalSets l) throws TorqueException
    {
        getSignalSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a SignalSets object to this object
     * through the SignalSets foreign key attribute using connection.
     *
     * @param l SignalSets
     * @throws TorqueException
     */
    public void addSignalSets(SignalSets l, Connection con) throws TorqueException
    {
        getSignalSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collSignalSetss
     */
    private Criteria lastSignalSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSignalSetss()
        throws TorqueException
    {
        if (collSignalSetss == null)
        {
            collSignalSetss = getSignalSetss(new Criteria(10));
        }
        return collSignalSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related SignalSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSignalSetss(Criteria criteria) throws TorqueException
    {
        if (collSignalSetss == null)
        {
            if (isNew())
            {
               collSignalSetss = new ArrayList();
            }
            else
            {
                criteria.add(SignalSetsPeer.PROJECT_ID, getId() );
                collSignalSetss = SignalSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SignalSetsPeer.PROJECT_ID, getId());
                if (!lastSignalSetssCriteria.equals(criteria))
                {
                    collSignalSetss = SignalSetsPeer.doSelect(criteria);
                }
            }
        }
        lastSignalSetssCriteria = criteria;

        return collSignalSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSignalSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalSetss(Connection con) throws TorqueException
    {
        if (collSignalSetss == null)
        {
            collSignalSetss = getSignalSetss(new Criteria(10), con);
        }
        return collSignalSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related SignalSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSignalSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSignalSetss == null)
        {
            if (isNew())
            {
               collSignalSetss = new ArrayList();
            }
            else
            {
                 criteria.add(SignalSetsPeer.PROJECT_ID, getId());
                 collSignalSetss = SignalSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SignalSetsPeer.PROJECT_ID, getId());
                 if (!lastSignalSetssCriteria.equals(criteria))
                 {
                     collSignalSetss = SignalSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSignalSetssCriteria = criteria;

         return collSignalSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related SignalSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getSignalSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collSignalSetss == null)
        {
            if (isNew())
            {
               collSignalSetss = new ArrayList();
            }
            else
            {
                criteria.add(SignalSetsPeer.PROJECT_ID, getId());
                collSignalSetss = SignalSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SignalSetsPeer.PROJECT_ID, getId());
            if (!lastSignalSetssCriteria.equals(criteria))
            {
                collSignalSetss = SignalSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastSignalSetssCriteria = criteria;

        return collSignalSetss;
    }





    /**
     * Collection to store aggregation of collControllerSetss
     */
    protected List collControllerSetss;

    /**
     * Temporary storage of collControllerSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initControllerSetss()
    {
        if (collControllerSetss == null)
        {
            collControllerSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a ControllerSets object to this object
     * through the ControllerSets foreign key attribute
     *
     * @param l ControllerSets
     * @throws TorqueException
     */
    public void addControllerSets(ControllerSets l) throws TorqueException
    {
        getControllerSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a ControllerSets object to this object
     * through the ControllerSets foreign key attribute using connection.
     *
     * @param l ControllerSets
     * @throws TorqueException
     */
    public void addControllerSets(ControllerSets l, Connection con) throws TorqueException
    {
        getControllerSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collControllerSetss
     */
    private Criteria lastControllerSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getControllerSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getControllerSetss()
        throws TorqueException
    {
        if (collControllerSetss == null)
        {
            collControllerSetss = getControllerSetss(new Criteria(10));
        }
        return collControllerSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related ControllerSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getControllerSetss(Criteria criteria) throws TorqueException
    {
        if (collControllerSetss == null)
        {
            if (isNew())
            {
               collControllerSetss = new ArrayList();
            }
            else
            {
                criteria.add(ControllerSetsPeer.PROJECT_ID, getId() );
                collControllerSetss = ControllerSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(ControllerSetsPeer.PROJECT_ID, getId());
                if (!lastControllerSetssCriteria.equals(criteria))
                {
                    collControllerSetss = ControllerSetsPeer.doSelect(criteria);
                }
            }
        }
        lastControllerSetssCriteria = criteria;

        return collControllerSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getControllerSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getControllerSetss(Connection con) throws TorqueException
    {
        if (collControllerSetss == null)
        {
            collControllerSetss = getControllerSetss(new Criteria(10), con);
        }
        return collControllerSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related ControllerSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getControllerSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collControllerSetss == null)
        {
            if (isNew())
            {
               collControllerSetss = new ArrayList();
            }
            else
            {
                 criteria.add(ControllerSetsPeer.PROJECT_ID, getId());
                 collControllerSetss = ControllerSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(ControllerSetsPeer.PROJECT_ID, getId());
                 if (!lastControllerSetssCriteria.equals(criteria))
                 {
                     collControllerSetss = ControllerSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastControllerSetssCriteria = criteria;

         return collControllerSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related ControllerSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getControllerSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collControllerSetss == null)
        {
            if (isNew())
            {
               collControllerSetss = new ArrayList();
            }
            else
            {
                criteria.add(ControllerSetsPeer.PROJECT_ID, getId());
                collControllerSetss = ControllerSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ControllerSetsPeer.PROJECT_ID, getId());
            if (!lastControllerSetssCriteria.equals(criteria))
            {
                collControllerSetss = ControllerSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastControllerSetssCriteria = criteria;

        return collControllerSetss;
    }





    /**
     * Collection to store aggregation of collEnkfNoiseParameterSetss
     */
    protected List collEnkfNoiseParameterSetss;

    /**
     * Temporary storage of collEnkfNoiseParameterSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initEnkfNoiseParameterSetss()
    {
        if (collEnkfNoiseParameterSetss == null)
        {
            collEnkfNoiseParameterSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a EnkfNoiseParameterSets object to this object
     * through the EnkfNoiseParameterSets foreign key attribute
     *
     * @param l EnkfNoiseParameterSets
     * @throws TorqueException
     */
    public void addEnkfNoiseParameterSets(EnkfNoiseParameterSets l) throws TorqueException
    {
        getEnkfNoiseParameterSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a EnkfNoiseParameterSets object to this object
     * through the EnkfNoiseParameterSets foreign key attribute using connection.
     *
     * @param l EnkfNoiseParameterSets
     * @throws TorqueException
     */
    public void addEnkfNoiseParameterSets(EnkfNoiseParameterSets l, Connection con) throws TorqueException
    {
        getEnkfNoiseParameterSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collEnkfNoiseParameterSetss
     */
    private Criteria lastEnkfNoiseParameterSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEnkfNoiseParameterSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getEnkfNoiseParameterSetss()
        throws TorqueException
    {
        if (collEnkfNoiseParameterSetss == null)
        {
            collEnkfNoiseParameterSetss = getEnkfNoiseParameterSetss(new Criteria(10));
        }
        return collEnkfNoiseParameterSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related EnkfNoiseParameterSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getEnkfNoiseParameterSetss(Criteria criteria) throws TorqueException
    {
        if (collEnkfNoiseParameterSetss == null)
        {
            if (isNew())
            {
               collEnkfNoiseParameterSetss = new ArrayList();
            }
            else
            {
                criteria.add(EnkfNoiseParameterSetsPeer.PROJECT_ID, getId() );
                collEnkfNoiseParameterSetss = EnkfNoiseParameterSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(EnkfNoiseParameterSetsPeer.PROJECT_ID, getId());
                if (!lastEnkfNoiseParameterSetssCriteria.equals(criteria))
                {
                    collEnkfNoiseParameterSetss = EnkfNoiseParameterSetsPeer.doSelect(criteria);
                }
            }
        }
        lastEnkfNoiseParameterSetssCriteria = criteria;

        return collEnkfNoiseParameterSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEnkfNoiseParameterSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEnkfNoiseParameterSetss(Connection con) throws TorqueException
    {
        if (collEnkfNoiseParameterSetss == null)
        {
            collEnkfNoiseParameterSetss = getEnkfNoiseParameterSetss(new Criteria(10), con);
        }
        return collEnkfNoiseParameterSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related EnkfNoiseParameterSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEnkfNoiseParameterSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEnkfNoiseParameterSetss == null)
        {
            if (isNew())
            {
               collEnkfNoiseParameterSetss = new ArrayList();
            }
            else
            {
                 criteria.add(EnkfNoiseParameterSetsPeer.PROJECT_ID, getId());
                 collEnkfNoiseParameterSetss = EnkfNoiseParameterSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(EnkfNoiseParameterSetsPeer.PROJECT_ID, getId());
                 if (!lastEnkfNoiseParameterSetssCriteria.equals(criteria))
                 {
                     collEnkfNoiseParameterSetss = EnkfNoiseParameterSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastEnkfNoiseParameterSetssCriteria = criteria;

         return collEnkfNoiseParameterSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related EnkfNoiseParameterSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getEnkfNoiseParameterSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collEnkfNoiseParameterSetss == null)
        {
            if (isNew())
            {
               collEnkfNoiseParameterSetss = new ArrayList();
            }
            else
            {
                criteria.add(EnkfNoiseParameterSetsPeer.PROJECT_ID, getId());
                collEnkfNoiseParameterSetss = EnkfNoiseParameterSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EnkfNoiseParameterSetsPeer.PROJECT_ID, getId());
            if (!lastEnkfNoiseParameterSetssCriteria.equals(criteria))
            {
                collEnkfNoiseParameterSetss = EnkfNoiseParameterSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastEnkfNoiseParameterSetssCriteria = criteria;

        return collEnkfNoiseParameterSetss;
    }





    /**
     * Collection to store aggregation of collEventSetss
     */
    protected List collEventSetss;

    /**
     * Temporary storage of collEventSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initEventSetss()
    {
        if (collEventSetss == null)
        {
            collEventSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a EventSets object to this object
     * through the EventSets foreign key attribute
     *
     * @param l EventSets
     * @throws TorqueException
     */
    public void addEventSets(EventSets l) throws TorqueException
    {
        getEventSetss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a EventSets object to this object
     * through the EventSets foreign key attribute using connection.
     *
     * @param l EventSets
     * @throws TorqueException
     */
    public void addEventSets(EventSets l, Connection con) throws TorqueException
    {
        getEventSetss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collEventSetss
     */
    private Criteria lastEventSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getEventSetss()
        throws TorqueException
    {
        if (collEventSetss == null)
        {
            collEventSetss = getEventSetss(new Criteria(10));
        }
        return collEventSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related EventSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getEventSetss(Criteria criteria) throws TorqueException
    {
        if (collEventSetss == null)
        {
            if (isNew())
            {
               collEventSetss = new ArrayList();
            }
            else
            {
                criteria.add(EventSetsPeer.PROJECT_ID, getId() );
                collEventSetss = EventSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(EventSetsPeer.PROJECT_ID, getId());
                if (!lastEventSetssCriteria.equals(criteria))
                {
                    collEventSetss = EventSetsPeer.doSelect(criteria);
                }
            }
        }
        lastEventSetssCriteria = criteria;

        return collEventSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEventSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSetss(Connection con) throws TorqueException
    {
        if (collEventSetss == null)
        {
            collEventSetss = getEventSetss(new Criteria(10), con);
        }
        return collEventSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related EventSetss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getEventSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEventSetss == null)
        {
            if (isNew())
            {
               collEventSetss = new ArrayList();
            }
            else
            {
                 criteria.add(EventSetsPeer.PROJECT_ID, getId());
                 collEventSetss = EventSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(EventSetsPeer.PROJECT_ID, getId());
                 if (!lastEventSetssCriteria.equals(criteria))
                 {
                     collEventSetss = EventSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastEventSetssCriteria = criteria;

         return collEventSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related EventSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getEventSetssJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collEventSetss == null)
        {
            if (isNew())
            {
               collEventSetss = new ArrayList();
            }
            else
            {
                criteria.add(EventSetsPeer.PROJECT_ID, getId());
                collEventSetss = EventSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(EventSetsPeer.PROJECT_ID, getId());
            if (!lastEventSetssCriteria.equals(criteria))
            {
                collEventSetss = EventSetsPeer.doSelectJoinProjects(criteria);
            }
        }
        lastEventSetssCriteria = criteria;

        return collEventSetss;
    }





    /**
     * Collection to store aggregation of collScenarioss
     */
    protected List collScenarioss;

    /**
     * Temporary storage of collScenarioss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initScenarioss()
    {
        if (collScenarioss == null)
        {
            collScenarioss = new ArrayList();
        }
    }


    /**
     * Method called to associate a Scenarios object to this object
     * through the Scenarios foreign key attribute
     *
     * @param l Scenarios
     * @throws TorqueException
     */
    public void addScenarios(Scenarios l) throws TorqueException
    {
        getScenarioss().add(l);
        l.setProjects((Projects) this);
    }

    /**
     * Method called to associate a Scenarios object to this object
     * through the Scenarios foreign key attribute using connection.
     *
     * @param l Scenarios
     * @throws TorqueException
     */
    public void addScenarios(Scenarios l, Connection con) throws TorqueException
    {
        getScenarioss(con).add(l);
        l.setProjects((Projects) this);
    }

    /**
     * The criteria used to select the current contents of collScenarioss
     */
    private Criteria lastScenariossCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getScenarioss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getScenarioss()
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            collScenarioss = getScenarioss(new Criteria(10));
        }
        return collScenarioss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getScenarioss(Criteria criteria) throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId() );
                collScenarioss = ScenariosPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                if (!lastScenariossCriteria.equals(criteria))
                {
                    collScenarioss = ScenariosPeer.doSelect(criteria);
                }
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getScenarioss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getScenarioss(Connection con) throws TorqueException
    {
        if (collScenarioss == null)
        {
            collScenarioss = getScenarioss(new Criteria(10), con);
        }
        return collScenarioss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     * If this Projects is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getScenarioss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                 criteria.add(ScenariosPeer.PROJECT_ID, getId());
                 collScenarioss = ScenariosPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(ScenariosPeer.PROJECT_ID, getId());
                 if (!lastScenariossCriteria.equals(criteria))
                 {
                     collScenarioss = ScenariosPeer.doSelect(criteria, con);
                 }
             }
         }
         lastScenariossCriteria = criteria;

         return collScenarioss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinProjects(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinProjects(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinProjects(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinNetworkConnectionSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinNetworkConnectionSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinSignalSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinSignalSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinSignalSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinSensorSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinSensorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinSensorSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinInitialDensitySets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinInitialDensitySets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinFundamentalDiagramProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinFundamentalDiagramProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinFundamentalDiagramProfileSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinDemandProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinDemandProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinDemandProfileSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinDownstreamBoundaryCapacityProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinDownstreamBoundaryCapacityProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinDownstreamBoundaryCapacityProfileSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinSplitRatioProfileSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinSplitRatioProfileSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinSplitRatioProfileSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinWeavingFactorSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinWeavingFactorSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinControllerSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinControllerSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinControllerSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinEventSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinEventSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinEventSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinEnkfNoiseParameterSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinEnkfNoiseParameterSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinEnkfNoiseParameterSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Projects is new, it will return
     * an empty collection; or if this Projects has previously
     * been saved, it will retrieve related Scenarioss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Projects.
     */
    protected List getScenariossJoinVehicleTypeSets(Criteria criteria)
        throws TorqueException
    {
        if (collScenarioss == null)
        {
            if (isNew())
            {
               collScenarioss = new ArrayList();
            }
            else
            {
                criteria.add(ScenariosPeer.PROJECT_ID, getId());
                collScenarioss = ScenariosPeer.doSelectJoinVehicleTypeSets(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ScenariosPeer.PROJECT_ID, getId());
            if (!lastScenariossCriteria.equals(criteria))
            {
                collScenarioss = ScenariosPeer.doSelectJoinVehicleTypeSets(criteria);
            }
        }
        lastScenariossCriteria = criteria;

        return collScenarioss;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("Name");
            fieldNames.add("Description");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Description"))
        {
            return getDescription();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Description"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDescription((String) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(ProjectsPeer.ID))
        {
            return getId();
        }
        if (name.equals(ProjectsPeer.NAME))
        {
            return getName();
        }
        if (name.equals(ProjectsPeer.DESCRIPTION))
        {
            return getDescription();
        }
        if (name.equals(ProjectsPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(ProjectsPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(ProjectsPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(ProjectsPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(ProjectsPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (ProjectsPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (ProjectsPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (ProjectsPeer.DESCRIPTION.equals(name))
        {
            return setByName("Description", value);
        }
      if (ProjectsPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (ProjectsPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (ProjectsPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (ProjectsPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (ProjectsPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getName();
        }
        if (pos == 2)
        {
            return getDescription();
        }
        if (pos == 3)
        {
            return getCreated();
        }
        if (pos == 4)
        {
            return getModified();
        }
        if (pos == 5)
        {
            return getCreatedBy();
        }
        if (pos == 6)
        {
            return getModifiedBy();
        }
        if (pos == 7)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("Name", value);
        }
    if (position == 2)
        {
            return setByName("Description", value);
        }
    if (position == 3)
        {
            return setByName("Created", value);
        }
    if (position == 4)
        {
            return setByName("Modified", value);
        }
    if (position == 5)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 6)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 7)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(ProjectsPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ProjectsPeer.doInsert((Projects) this, con);
                    setNew(false);
                }
                else
                {
                    ProjectsPeer.doUpdate((Projects) this, con);
                }
            }


            if (collNetworkConnectionSetss != null)
            {
                for (int i = 0; i < collNetworkConnectionSetss.size(); i++)
                {
                    ((NetworkConnectionSets) collNetworkConnectionSetss.get(i)).save(con);
                }
            }

            if (collDestinationNetworkss != null)
            {
                for (int i = 0; i < collDestinationNetworkss.size(); i++)
                {
                    ((DestinationNetworks) collDestinationNetworkss.get(i)).save(con);
                }
            }

            if (collRoutess != null)
            {
                for (int i = 0; i < collRoutess.size(); i++)
                {
                    ((Routes) collRoutess.get(i)).save(con);
                }
            }

            if (collVehicleTypeSetss != null)
            {
                for (int i = 0; i < collVehicleTypeSetss.size(); i++)
                {
                    ((VehicleTypeSets) collVehicleTypeSetss.get(i)).save(con);
                }
            }

            if (collVehicleTypess != null)
            {
                for (int i = 0; i < collVehicleTypess.size(); i++)
                {
                    ((VehicleTypes) collVehicleTypess.get(i)).save(con);
                }
            }

            if (collInitialDensitySetss != null)
            {
                for (int i = 0; i < collInitialDensitySetss.size(); i++)
                {
                    ((InitialDensitySets) collInitialDensitySetss.get(i)).save(con);
                }
            }

            if (collWeavingFactorSetss != null)
            {
                for (int i = 0; i < collWeavingFactorSetss.size(); i++)
                {
                    ((WeavingFactorSets) collWeavingFactorSetss.get(i)).save(con);
                }
            }

            if (collFundamentalDiagramProfileSetss != null)
            {
                for (int i = 0; i < collFundamentalDiagramProfileSetss.size(); i++)
                {
                    ((FundamentalDiagramProfileSets) collFundamentalDiagramProfileSetss.get(i)).save(con);
                }
            }

            if (collDemandProfileSetss != null)
            {
                for (int i = 0; i < collDemandProfileSetss.size(); i++)
                {
                    ((DemandProfileSets) collDemandProfileSetss.get(i)).save(con);
                }
            }

            if (collDownstreamBoundaryCapacityProfileSetss != null)
            {
                for (int i = 0; i < collDownstreamBoundaryCapacityProfileSetss.size(); i++)
                {
                    ((DownstreamBoundaryCapacityProfileSets) collDownstreamBoundaryCapacityProfileSetss.get(i)).save(con);
                }
            }

            if (collSensorSetss != null)
            {
                for (int i = 0; i < collSensorSetss.size(); i++)
                {
                    ((SensorSets) collSensorSetss.get(i)).save(con);
                }
            }

            if (collSignalSetss != null)
            {
                for (int i = 0; i < collSignalSetss.size(); i++)
                {
                    ((SignalSets) collSignalSetss.get(i)).save(con);
                }
            }

            if (collControllerSetss != null)
            {
                for (int i = 0; i < collControllerSetss.size(); i++)
                {
                    ((ControllerSets) collControllerSetss.get(i)).save(con);
                }
            }

            if (collEnkfNoiseParameterSetss != null)
            {
                for (int i = 0; i < collEnkfNoiseParameterSetss.size(); i++)
                {
                    ((EnkfNoiseParameterSets) collEnkfNoiseParameterSetss.get(i)).save(con);
                }
            }

            if (collEventSetss != null)
            {
                for (int i = 0; i < collEventSetss.size(); i++)
                {
                    ((EventSets) collEventSetss.get(i)).save(con);
                }
            }

            if (collScenarioss != null)
            {
                for (int i = 0; i < collScenarioss.size(); i++)
                {
                    ((Scenarios) collScenarioss.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Projects copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Projects copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Projects copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Projects(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Projects copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Projects(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Projects copyInto(Projects copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Projects copyInto(Projects copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Projects copyInto(Projects copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNetworkConnectionSetss = getNetworkConnectionSetss();
        if (vNetworkConnectionSetss != null)
        {
            for (int i = 0; i < vNetworkConnectionSetss.size(); i++)
            {
                NetworkConnectionSets obj = (NetworkConnectionSets) vNetworkConnectionSetss.get(i);
                copyObj.addNetworkConnectionSets(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkConnectionSetss = null;
        }


        List vDestinationNetworkss = getDestinationNetworkss();
        if (vDestinationNetworkss != null)
        {
            for (int i = 0; i < vDestinationNetworkss.size(); i++)
            {
                DestinationNetworks obj = (DestinationNetworks) vDestinationNetworkss.get(i);
                copyObj.addDestinationNetworks(obj.copy());
            }
        }
        else
        {
            copyObj.collDestinationNetworkss = null;
        }


        List vRoutess = getRoutess();
        if (vRoutess != null)
        {
            for (int i = 0; i < vRoutess.size(); i++)
            {
                Routes obj = (Routes) vRoutess.get(i);
                copyObj.addRoutes(obj.copy());
            }
        }
        else
        {
            copyObj.collRoutess = null;
        }


        List vVehicleTypeSetss = getVehicleTypeSetss();
        if (vVehicleTypeSetss != null)
        {
            for (int i = 0; i < vVehicleTypeSetss.size(); i++)
            {
                VehicleTypeSets obj = (VehicleTypeSets) vVehicleTypeSetss.get(i);
                copyObj.addVehicleTypeSets(obj.copy());
            }
        }
        else
        {
            copyObj.collVehicleTypeSetss = null;
        }


        List vVehicleTypess = getVehicleTypess();
        if (vVehicleTypess != null)
        {
            for (int i = 0; i < vVehicleTypess.size(); i++)
            {
                VehicleTypes obj = (VehicleTypes) vVehicleTypess.get(i);
                copyObj.addVehicleTypes(obj.copy());
            }
        }
        else
        {
            copyObj.collVehicleTypess = null;
        }


        List vInitialDensitySetss = getInitialDensitySetss();
        if (vInitialDensitySetss != null)
        {
            for (int i = 0; i < vInitialDensitySetss.size(); i++)
            {
                InitialDensitySets obj = (InitialDensitySets) vInitialDensitySetss.get(i);
                copyObj.addInitialDensitySets(obj.copy());
            }
        }
        else
        {
            copyObj.collInitialDensitySetss = null;
        }


        List vWeavingFactorSetss = getWeavingFactorSetss();
        if (vWeavingFactorSetss != null)
        {
            for (int i = 0; i < vWeavingFactorSetss.size(); i++)
            {
                WeavingFactorSets obj = (WeavingFactorSets) vWeavingFactorSetss.get(i);
                copyObj.addWeavingFactorSets(obj.copy());
            }
        }
        else
        {
            copyObj.collWeavingFactorSetss = null;
        }


        List vFundamentalDiagramProfileSetss = getFundamentalDiagramProfileSetss();
        if (vFundamentalDiagramProfileSetss != null)
        {
            for (int i = 0; i < vFundamentalDiagramProfileSetss.size(); i++)
            {
                FundamentalDiagramProfileSets obj = (FundamentalDiagramProfileSets) vFundamentalDiagramProfileSetss.get(i);
                copyObj.addFundamentalDiagramProfileSets(obj.copy());
            }
        }
        else
        {
            copyObj.collFundamentalDiagramProfileSetss = null;
        }


        List vDemandProfileSetss = getDemandProfileSetss();
        if (vDemandProfileSetss != null)
        {
            for (int i = 0; i < vDemandProfileSetss.size(); i++)
            {
                DemandProfileSets obj = (DemandProfileSets) vDemandProfileSetss.get(i);
                copyObj.addDemandProfileSets(obj.copy());
            }
        }
        else
        {
            copyObj.collDemandProfileSetss = null;
        }


        List vDownstreamBoundaryCapacityProfileSetss = getDownstreamBoundaryCapacityProfileSetss();
        if (vDownstreamBoundaryCapacityProfileSetss != null)
        {
            for (int i = 0; i < vDownstreamBoundaryCapacityProfileSetss.size(); i++)
            {
                DownstreamBoundaryCapacityProfileSets obj = (DownstreamBoundaryCapacityProfileSets) vDownstreamBoundaryCapacityProfileSetss.get(i);
                copyObj.addDownstreamBoundaryCapacityProfileSets(obj.copy());
            }
        }
        else
        {
            copyObj.collDownstreamBoundaryCapacityProfileSetss = null;
        }


        List vSensorSetss = getSensorSetss();
        if (vSensorSetss != null)
        {
            for (int i = 0; i < vSensorSetss.size(); i++)
            {
                SensorSets obj = (SensorSets) vSensorSetss.get(i);
                copyObj.addSensorSets(obj.copy());
            }
        }
        else
        {
            copyObj.collSensorSetss = null;
        }


        List vSignalSetss = getSignalSetss();
        if (vSignalSetss != null)
        {
            for (int i = 0; i < vSignalSetss.size(); i++)
            {
                SignalSets obj = (SignalSets) vSignalSetss.get(i);
                copyObj.addSignalSets(obj.copy());
            }
        }
        else
        {
            copyObj.collSignalSetss = null;
        }


        List vControllerSetss = getControllerSetss();
        if (vControllerSetss != null)
        {
            for (int i = 0; i < vControllerSetss.size(); i++)
            {
                ControllerSets obj = (ControllerSets) vControllerSetss.get(i);
                copyObj.addControllerSets(obj.copy());
            }
        }
        else
        {
            copyObj.collControllerSetss = null;
        }


        List vEnkfNoiseParameterSetss = getEnkfNoiseParameterSetss();
        if (vEnkfNoiseParameterSetss != null)
        {
            for (int i = 0; i < vEnkfNoiseParameterSetss.size(); i++)
            {
                EnkfNoiseParameterSets obj = (EnkfNoiseParameterSets) vEnkfNoiseParameterSetss.get(i);
                copyObj.addEnkfNoiseParameterSets(obj.copy());
            }
        }
        else
        {
            copyObj.collEnkfNoiseParameterSetss = null;
        }


        List vEventSetss = getEventSetss();
        if (vEventSetss != null)
        {
            for (int i = 0; i < vEventSetss.size(); i++)
            {
                EventSets obj = (EventSets) vEventSetss.get(i);
                copyObj.addEventSets(obj.copy());
            }
        }
        else
        {
            copyObj.collEventSetss = null;
        }


        List vScenarioss = getScenarioss();
        if (vScenarioss != null)
        {
            for (int i = 0; i < vScenarioss.size(); i++)
            {
                Scenarios obj = (Scenarios) vScenarioss.get(i);
                copyObj.addScenarios(obj.copy());
            }
        }
        else
        {
            copyObj.collScenarioss = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Projects copyInto(Projects copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNetworkConnectionSetss = getNetworkConnectionSetss(con);
        if (vNetworkConnectionSetss != null)
        {
            for (int i = 0; i < vNetworkConnectionSetss.size(); i++)
            {
                NetworkConnectionSets obj = (NetworkConnectionSets) vNetworkConnectionSetss.get(i);
                copyObj.addNetworkConnectionSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkConnectionSetss = null;
        }


        List vDestinationNetworkss = getDestinationNetworkss(con);
        if (vDestinationNetworkss != null)
        {
            for (int i = 0; i < vDestinationNetworkss.size(); i++)
            {
                DestinationNetworks obj = (DestinationNetworks) vDestinationNetworkss.get(i);
                copyObj.addDestinationNetworks(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDestinationNetworkss = null;
        }


        List vRoutess = getRoutess(con);
        if (vRoutess != null)
        {
            for (int i = 0; i < vRoutess.size(); i++)
            {
                Routes obj = (Routes) vRoutess.get(i);
                copyObj.addRoutes(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRoutess = null;
        }


        List vVehicleTypeSetss = getVehicleTypeSetss(con);
        if (vVehicleTypeSetss != null)
        {
            for (int i = 0; i < vVehicleTypeSetss.size(); i++)
            {
                VehicleTypeSets obj = (VehicleTypeSets) vVehicleTypeSetss.get(i);
                copyObj.addVehicleTypeSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collVehicleTypeSetss = null;
        }


        List vVehicleTypess = getVehicleTypess(con);
        if (vVehicleTypess != null)
        {
            for (int i = 0; i < vVehicleTypess.size(); i++)
            {
                VehicleTypes obj = (VehicleTypes) vVehicleTypess.get(i);
                copyObj.addVehicleTypes(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collVehicleTypess = null;
        }


        List vInitialDensitySetss = getInitialDensitySetss(con);
        if (vInitialDensitySetss != null)
        {
            for (int i = 0; i < vInitialDensitySetss.size(); i++)
            {
                InitialDensitySets obj = (InitialDensitySets) vInitialDensitySetss.get(i);
                copyObj.addInitialDensitySets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collInitialDensitySetss = null;
        }


        List vWeavingFactorSetss = getWeavingFactorSetss(con);
        if (vWeavingFactorSetss != null)
        {
            for (int i = 0; i < vWeavingFactorSetss.size(); i++)
            {
                WeavingFactorSets obj = (WeavingFactorSets) vWeavingFactorSetss.get(i);
                copyObj.addWeavingFactorSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collWeavingFactorSetss = null;
        }


        List vFundamentalDiagramProfileSetss = getFundamentalDiagramProfileSetss(con);
        if (vFundamentalDiagramProfileSetss != null)
        {
            for (int i = 0; i < vFundamentalDiagramProfileSetss.size(); i++)
            {
                FundamentalDiagramProfileSets obj = (FundamentalDiagramProfileSets) vFundamentalDiagramProfileSetss.get(i);
                copyObj.addFundamentalDiagramProfileSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collFundamentalDiagramProfileSetss = null;
        }


        List vDemandProfileSetss = getDemandProfileSetss(con);
        if (vDemandProfileSetss != null)
        {
            for (int i = 0; i < vDemandProfileSetss.size(); i++)
            {
                DemandProfileSets obj = (DemandProfileSets) vDemandProfileSetss.get(i);
                copyObj.addDemandProfileSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDemandProfileSetss = null;
        }


        List vDownstreamBoundaryCapacityProfileSetss = getDownstreamBoundaryCapacityProfileSetss(con);
        if (vDownstreamBoundaryCapacityProfileSetss != null)
        {
            for (int i = 0; i < vDownstreamBoundaryCapacityProfileSetss.size(); i++)
            {
                DownstreamBoundaryCapacityProfileSets obj = (DownstreamBoundaryCapacityProfileSets) vDownstreamBoundaryCapacityProfileSetss.get(i);
                copyObj.addDownstreamBoundaryCapacityProfileSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDownstreamBoundaryCapacityProfileSetss = null;
        }


        List vSensorSetss = getSensorSetss(con);
        if (vSensorSetss != null)
        {
            for (int i = 0; i < vSensorSetss.size(); i++)
            {
                SensorSets obj = (SensorSets) vSensorSetss.get(i);
                copyObj.addSensorSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSensorSetss = null;
        }


        List vSignalSetss = getSignalSetss(con);
        if (vSignalSetss != null)
        {
            for (int i = 0; i < vSignalSetss.size(); i++)
            {
                SignalSets obj = (SignalSets) vSignalSetss.get(i);
                copyObj.addSignalSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSignalSetss = null;
        }


        List vControllerSetss = getControllerSetss(con);
        if (vControllerSetss != null)
        {
            for (int i = 0; i < vControllerSetss.size(); i++)
            {
                ControllerSets obj = (ControllerSets) vControllerSetss.get(i);
                copyObj.addControllerSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collControllerSetss = null;
        }


        List vEnkfNoiseParameterSetss = getEnkfNoiseParameterSetss(con);
        if (vEnkfNoiseParameterSetss != null)
        {
            for (int i = 0; i < vEnkfNoiseParameterSetss.size(); i++)
            {
                EnkfNoiseParameterSets obj = (EnkfNoiseParameterSets) vEnkfNoiseParameterSetss.get(i);
                copyObj.addEnkfNoiseParameterSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collEnkfNoiseParameterSetss = null;
        }


        List vEventSetss = getEventSetss(con);
        if (vEventSetss != null)
        {
            for (int i = 0; i < vEventSetss.size(); i++)
            {
                EventSets obj = (EventSets) vEventSetss.get(i);
                copyObj.addEventSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collEventSetss = null;
        }


        List vScenarioss = getScenarioss(con);
        if (vScenarioss != null)
        {
            for (int i = 0; i < vScenarioss.size(); i++)
            {
                Scenarios obj = (Scenarios) vScenarioss.get(i);
                copyObj.addScenarios(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collScenarioss = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProjectsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return ProjectsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Projects:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Description = ")
           .append(getDescription())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
