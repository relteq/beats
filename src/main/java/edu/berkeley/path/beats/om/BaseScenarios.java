package com.relteq.sirius.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Nov 14 14:25:09 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Scenarios
 */
public abstract class BaseScenarios extends com.relteq.sirius.db.BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1352931909099L;

    /** The Peer class */
    private static final ScenariosPeer peer =
        new ScenariosPeer();


    /** The value for the id field */
    private Long id;

    /** The value for the projectId field */
    private Long projectId;

    /** The value for the networkConnectionSetId field */
    private Long networkConnectionSetId;

    /** The value for the vehicleTypeSetId field */
    private Long vehicleTypeSetId;

    /** The value for the signalSetId field */
    private Long signalSetId;

    /** The value for the sensorSetId field */
    private Long sensorSetId;

    /** The value for the splitRatioProfileSetId field */
    private Long splitRatioProfileSetId;

    /** The value for the weavingFactorSetId field */
    private Long weavingFactorSetId;

    /** The value for the initialDensitySetId field */
    private Long initialDensitySetId;

    /** The value for the fundamentalDiagramProfileSetId field */
    private Long fundamentalDiagramProfileSetId;

    /** The value for the demandProfileSetId field */
    private Long demandProfileSetId;

    /** The value for the downstreamBoundaryCapacityProfileSetId field */
    private Long downstreamBoundaryCapacityProfileSetId;

    /** The value for the controllerSetId field */
    private Long controllerSetId;

    /** The value for the eventSetId field */
    private Long eventSetId;

    /** The value for the enkfNoiseParameterSetId field */
    private Long enkfNoiseParameterSetId;

    /** The value for the name field */
    private String name;

    /** The value for the description field */
    private String description;

    /** The value for the created field */
    private Date created;

    /** The value for the modified field */
    private Date modified;

    /** The value for the createdBy field */
    private String createdBy;

    /** The value for the modifiedBy field */
    private String modifiedBy;

    /** The value for the modstamp field */
    private Date modstamp;


    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.id, v))
        {
            this.id = v;
            setModified(true);
        }



        // update associated NetworkSets
        if (collNetworkSetss != null)
        {
            for (int i = 0; i < collNetworkSetss.size(); i++)
            {
                ((NetworkSets) collNetworkSetss.get(i))
                        .setScenarioId(v);
            }
        }

        // update associated DestinationNetworkSets
        if (collDestinationNetworkSetss != null)
        {
            for (int i = 0; i < collDestinationNetworkSetss.size(); i++)
            {
                ((DestinationNetworkSets) collDestinationNetworkSetss.get(i))
                        .setScenarioId(v);
            }
        }

        // update associated RouteSets
        if (collRouteSetss != null)
        {
            for (int i = 0; i < collRouteSetss.size(); i++)
            {
                ((RouteSets) collRouteSetss.get(i))
                        .setScenarioId(v);
            }
        }

        // update associated SimulationRuns
        if (collSimulationRunss != null)
        {
            for (int i = 0; i < collSimulationRunss.size(); i++)
            {
                ((SimulationRuns) collSimulationRunss.get(i))
                        .setScenarioId(v);
            }
        }

        // update associated DefaultSimulationSettings
        if (collDefaultSimulationSettingss != null)
        {
            for (int i = 0; i < collDefaultSimulationSettingss.size(); i++)
            {
                ((DefaultSimulationSettings) collDefaultSimulationSettingss.get(i))
                        .setScenarioId(v);
            }
        }
    }

    /**
     * Get the ProjectId
     *
     * @return Long
     */
    public Long getProjectId()
    {
        return projectId;
    }


    /**
     * Set the value of ProjectId
     *
     * @param v new value
     */
    public void setProjectId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.projectId, v))
        {
            this.projectId = v;
            setModified(true);
        }


        if (aProjects != null && !ObjectUtils.equals(aProjects.getId(), v))
        {
            aProjects = null;
        }

    }

    /**
     * Get the NetworkConnectionSetId
     *
     * @return Long
     */
    public Long getNetworkConnectionSetId()
    {
        return networkConnectionSetId;
    }


    /**
     * Set the value of NetworkConnectionSetId
     *
     * @param v new value
     */
    public void setNetworkConnectionSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.networkConnectionSetId, v))
        {
            this.networkConnectionSetId = v;
            setModified(true);
        }


        if (aNetworkConnectionSets != null && !ObjectUtils.equals(aNetworkConnectionSets.getId(), v))
        {
            aNetworkConnectionSets = null;
        }

    }

    /**
     * Get the VehicleTypeSetId
     *
     * @return Long
     */
    public Long getVehicleTypeSetId()
    {
        return vehicleTypeSetId;
    }


    /**
     * Set the value of VehicleTypeSetId
     *
     * @param v new value
     */
    public void setVehicleTypeSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.vehicleTypeSetId, v))
        {
            this.vehicleTypeSetId = v;
            setModified(true);
        }


        if (aVehicleTypeSets != null && !ObjectUtils.equals(aVehicleTypeSets.getId(), v))
        {
            aVehicleTypeSets = null;
        }

    }

    /**
     * Get the SignalSetId
     *
     * @return Long
     */
    public Long getSignalSetId()
    {
        return signalSetId;
    }


    /**
     * Set the value of SignalSetId
     *
     * @param v new value
     */
    public void setSignalSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.signalSetId, v))
        {
            this.signalSetId = v;
            setModified(true);
        }


        if (aSignalSets != null && !ObjectUtils.equals(aSignalSets.getId(), v))
        {
            aSignalSets = null;
        }

    }

    /**
     * Get the SensorSetId
     *
     * @return Long
     */
    public Long getSensorSetId()
    {
        return sensorSetId;
    }


    /**
     * Set the value of SensorSetId
     *
     * @param v new value
     */
    public void setSensorSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.sensorSetId, v))
        {
            this.sensorSetId = v;
            setModified(true);
        }


        if (aSensorSets != null && !ObjectUtils.equals(aSensorSets.getId(), v))
        {
            aSensorSets = null;
        }

    }

    /**
     * Get the SplitRatioProfileSetId
     *
     * @return Long
     */
    public Long getSplitRatioProfileSetId()
    {
        return splitRatioProfileSetId;
    }


    /**
     * Set the value of SplitRatioProfileSetId
     *
     * @param v new value
     */
    public void setSplitRatioProfileSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.splitRatioProfileSetId, v))
        {
            this.splitRatioProfileSetId = v;
            setModified(true);
        }


        if (aSplitRatioProfileSets != null && !ObjectUtils.equals(aSplitRatioProfileSets.getId(), v))
        {
            aSplitRatioProfileSets = null;
        }

    }

    /**
     * Get the WeavingFactorSetId
     *
     * @return Long
     */
    public Long getWeavingFactorSetId()
    {
        return weavingFactorSetId;
    }


    /**
     * Set the value of WeavingFactorSetId
     *
     * @param v new value
     */
    public void setWeavingFactorSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.weavingFactorSetId, v))
        {
            this.weavingFactorSetId = v;
            setModified(true);
        }


        if (aWeavingFactorSets != null && !ObjectUtils.equals(aWeavingFactorSets.getId(), v))
        {
            aWeavingFactorSets = null;
        }

    }

    /**
     * Get the InitialDensitySetId
     *
     * @return Long
     */
    public Long getInitialDensitySetId()
    {
        return initialDensitySetId;
    }


    /**
     * Set the value of InitialDensitySetId
     *
     * @param v new value
     */
    public void setInitialDensitySetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.initialDensitySetId, v))
        {
            this.initialDensitySetId = v;
            setModified(true);
        }


        if (aInitialDensitySets != null && !ObjectUtils.equals(aInitialDensitySets.getId(), v))
        {
            aInitialDensitySets = null;
        }

    }

    /**
     * Get the FundamentalDiagramProfileSetId
     *
     * @return Long
     */
    public Long getFundamentalDiagramProfileSetId()
    {
        return fundamentalDiagramProfileSetId;
    }


    /**
     * Set the value of FundamentalDiagramProfileSetId
     *
     * @param v new value
     */
    public void setFundamentalDiagramProfileSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.fundamentalDiagramProfileSetId, v))
        {
            this.fundamentalDiagramProfileSetId = v;
            setModified(true);
        }


        if (aFundamentalDiagramProfileSets != null && !ObjectUtils.equals(aFundamentalDiagramProfileSets.getId(), v))
        {
            aFundamentalDiagramProfileSets = null;
        }

    }

    /**
     * Get the DemandProfileSetId
     *
     * @return Long
     */
    public Long getDemandProfileSetId()
    {
        return demandProfileSetId;
    }


    /**
     * Set the value of DemandProfileSetId
     *
     * @param v new value
     */
    public void setDemandProfileSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.demandProfileSetId, v))
        {
            this.demandProfileSetId = v;
            setModified(true);
        }


        if (aDemandProfileSets != null && !ObjectUtils.equals(aDemandProfileSets.getId(), v))
        {
            aDemandProfileSets = null;
        }

    }

    /**
     * Get the DownstreamBoundaryCapacityProfileSetId
     *
     * @return Long
     */
    public Long getDownstreamBoundaryCapacityProfileSetId()
    {
        return downstreamBoundaryCapacityProfileSetId;
    }


    /**
     * Set the value of DownstreamBoundaryCapacityProfileSetId
     *
     * @param v new value
     */
    public void setDownstreamBoundaryCapacityProfileSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.downstreamBoundaryCapacityProfileSetId, v))
        {
            this.downstreamBoundaryCapacityProfileSetId = v;
            setModified(true);
        }


        if (aDownstreamBoundaryCapacityProfileSets != null && !ObjectUtils.equals(aDownstreamBoundaryCapacityProfileSets.getId(), v))
        {
            aDownstreamBoundaryCapacityProfileSets = null;
        }

    }

    /**
     * Get the ControllerSetId
     *
     * @return Long
     */
    public Long getControllerSetId()
    {
        return controllerSetId;
    }


    /**
     * Set the value of ControllerSetId
     *
     * @param v new value
     */
    public void setControllerSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.controllerSetId, v))
        {
            this.controllerSetId = v;
            setModified(true);
        }


        if (aControllerSets != null && !ObjectUtils.equals(aControllerSets.getId(), v))
        {
            aControllerSets = null;
        }

    }

    /**
     * Get the EventSetId
     *
     * @return Long
     */
    public Long getEventSetId()
    {
        return eventSetId;
    }


    /**
     * Set the value of EventSetId
     *
     * @param v new value
     */
    public void setEventSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.eventSetId, v))
        {
            this.eventSetId = v;
            setModified(true);
        }


        if (aEventSets != null && !ObjectUtils.equals(aEventSets.getId(), v))
        {
            aEventSets = null;
        }

    }

    /**
     * Get the EnkfNoiseParameterSetId
     *
     * @return Long
     */
    public Long getEnkfNoiseParameterSetId()
    {
        return enkfNoiseParameterSetId;
    }


    /**
     * Set the value of EnkfNoiseParameterSetId
     *
     * @param v new value
     */
    public void setEnkfNoiseParameterSetId(Long v) throws TorqueException
    {

        if (!ObjectUtils.equals(this.enkfNoiseParameterSetId, v))
        {
            this.enkfNoiseParameterSetId = v;
            setModified(true);
        }


        if (aEnkfNoiseParameterSets != null && !ObjectUtils.equals(aEnkfNoiseParameterSets.getId(), v))
        {
            aEnkfNoiseParameterSets = null;
        }

    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }


    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {

        if (!ObjectUtils.equals(this.description, v))
        {
            this.description = v;
            setModified(true);
        }


    }

    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }


    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {

        if (!ObjectUtils.equals(this.created, v))
        {
            this.created = v;
            setModified(true);
        }


    }

    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }


    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {

        if (!ObjectUtils.equals(this.modified, v))
        {
            this.modified = v;
            setModified(true);
        }


    }

    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }


    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {

        if (!ObjectUtils.equals(this.createdBy, v))
        {
            this.createdBy = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }


    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {

        if (!ObjectUtils.equals(this.modifiedBy, v))
        {
            this.modifiedBy = v;
            setModified(true);
        }


    }

    /**
     * Get the Modstamp
     *
     * @return Date
     */
    public Date getModstamp()
    {
        return modstamp;
    }


    /**
     * Set the value of Modstamp
     *
     * @param v new value
     */
    public void setModstamp(Date v) 
    {

        if (!ObjectUtils.equals(this.modstamp, v))
        {
            this.modstamp = v;
            setModified(true);
        }


    }

    



    private Projects aProjects;

    /**
     * Declares an association between this object and a Projects object
     *
     * @param v Projects
     * @throws TorqueException
     */
    public void setProjects(Projects v) throws TorqueException
    {
        if (v == null)
        {
            setProjectId((Long) null);
        }
        else
        {
            setProjectId(v.getId());
        }
        aProjects = v;
    }


    /**
     * Returns the associated Projects object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Projects object
     * @throws TorqueException
     */
    public Projects getProjects()
        throws TorqueException
    {
        if (aProjects == null && (!ObjectUtils.equals(this.projectId, null)))
        {
            aProjects = ProjectsPeer.retrieveByPK(SimpleKey.keyFor(this.projectId));
        }
        return aProjects;
    }

    /**
     * Return the associated Projects object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Projects object
     * @throws TorqueException
     */
    public Projects getProjects(Connection connection)
        throws TorqueException
    {
        if (aProjects == null && (!ObjectUtils.equals(this.projectId, null)))
        {
            aProjects = ProjectsPeer.retrieveByPK(SimpleKey.keyFor(this.projectId), connection);
        }
        return aProjects;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectsKey(ObjectKey key) throws TorqueException
    {

        setProjectId(new Long(((NumberKey) key).longValue()));
    }




    private NetworkConnectionSets aNetworkConnectionSets;

    /**
     * Declares an association between this object and a NetworkConnectionSets object
     *
     * @param v NetworkConnectionSets
     * @throws TorqueException
     */
    public void setNetworkConnectionSets(NetworkConnectionSets v) throws TorqueException
    {
        if (v == null)
        {
            setNetworkConnectionSetId((Long) null);
        }
        else
        {
            setNetworkConnectionSetId(v.getId());
        }
        aNetworkConnectionSets = v;
    }


    /**
     * Returns the associated NetworkConnectionSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated NetworkConnectionSets object
     * @throws TorqueException
     */
    public NetworkConnectionSets getNetworkConnectionSets()
        throws TorqueException
    {
        if (aNetworkConnectionSets == null && (!ObjectUtils.equals(this.networkConnectionSetId, null)))
        {
            aNetworkConnectionSets = NetworkConnectionSetsPeer.retrieveByPK(SimpleKey.keyFor(this.networkConnectionSetId));
        }
        return aNetworkConnectionSets;
    }

    /**
     * Return the associated NetworkConnectionSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated NetworkConnectionSets object
     * @throws TorqueException
     */
    public NetworkConnectionSets getNetworkConnectionSets(Connection connection)
        throws TorqueException
    {
        if (aNetworkConnectionSets == null && (!ObjectUtils.equals(this.networkConnectionSetId, null)))
        {
            aNetworkConnectionSets = NetworkConnectionSetsPeer.retrieveByPK(SimpleKey.keyFor(this.networkConnectionSetId), connection);
        }
        return aNetworkConnectionSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setNetworkConnectionSetsKey(ObjectKey key) throws TorqueException
    {

        setNetworkConnectionSetId(new Long(((NumberKey) key).longValue()));
    }




    private SignalSets aSignalSets;

    /**
     * Declares an association between this object and a SignalSets object
     *
     * @param v SignalSets
     * @throws TorqueException
     */
    public void setSignalSets(SignalSets v) throws TorqueException
    {
        if (v == null)
        {
            setSignalSetId((Long) null);
        }
        else
        {
            setSignalSetId(v.getId());
        }
        aSignalSets = v;
    }


    /**
     * Returns the associated SignalSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated SignalSets object
     * @throws TorqueException
     */
    public SignalSets getSignalSets()
        throws TorqueException
    {
        if (aSignalSets == null && (!ObjectUtils.equals(this.signalSetId, null)))
        {
            aSignalSets = SignalSetsPeer.retrieveByPK(SimpleKey.keyFor(this.signalSetId));
        }
        return aSignalSets;
    }

    /**
     * Return the associated SignalSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated SignalSets object
     * @throws TorqueException
     */
    public SignalSets getSignalSets(Connection connection)
        throws TorqueException
    {
        if (aSignalSets == null && (!ObjectUtils.equals(this.signalSetId, null)))
        {
            aSignalSets = SignalSetsPeer.retrieveByPK(SimpleKey.keyFor(this.signalSetId), connection);
        }
        return aSignalSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSignalSetsKey(ObjectKey key) throws TorqueException
    {

        setSignalSetId(new Long(((NumberKey) key).longValue()));
    }




    private SensorSets aSensorSets;

    /**
     * Declares an association between this object and a SensorSets object
     *
     * @param v SensorSets
     * @throws TorqueException
     */
    public void setSensorSets(SensorSets v) throws TorqueException
    {
        if (v == null)
        {
            setSensorSetId((Long) null);
        }
        else
        {
            setSensorSetId(v.getId());
        }
        aSensorSets = v;
    }


    /**
     * Returns the associated SensorSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated SensorSets object
     * @throws TorqueException
     */
    public SensorSets getSensorSets()
        throws TorqueException
    {
        if (aSensorSets == null && (!ObjectUtils.equals(this.sensorSetId, null)))
        {
            aSensorSets = SensorSetsPeer.retrieveByPK(SimpleKey.keyFor(this.sensorSetId));
        }
        return aSensorSets;
    }

    /**
     * Return the associated SensorSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated SensorSets object
     * @throws TorqueException
     */
    public SensorSets getSensorSets(Connection connection)
        throws TorqueException
    {
        if (aSensorSets == null && (!ObjectUtils.equals(this.sensorSetId, null)))
        {
            aSensorSets = SensorSetsPeer.retrieveByPK(SimpleKey.keyFor(this.sensorSetId), connection);
        }
        return aSensorSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSensorSetsKey(ObjectKey key) throws TorqueException
    {

        setSensorSetId(new Long(((NumberKey) key).longValue()));
    }




    private InitialDensitySets aInitialDensitySets;

    /**
     * Declares an association between this object and a InitialDensitySets object
     *
     * @param v InitialDensitySets
     * @throws TorqueException
     */
    public void setInitialDensitySets(InitialDensitySets v) throws TorqueException
    {
        if (v == null)
        {
            setInitialDensitySetId((Long) null);
        }
        else
        {
            setInitialDensitySetId(v.getId());
        }
        aInitialDensitySets = v;
    }


    /**
     * Returns the associated InitialDensitySets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated InitialDensitySets object
     * @throws TorqueException
     */
    public InitialDensitySets getInitialDensitySets()
        throws TorqueException
    {
        if (aInitialDensitySets == null && (!ObjectUtils.equals(this.initialDensitySetId, null)))
        {
            aInitialDensitySets = InitialDensitySetsPeer.retrieveByPK(SimpleKey.keyFor(this.initialDensitySetId));
        }
        return aInitialDensitySets;
    }

    /**
     * Return the associated InitialDensitySets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated InitialDensitySets object
     * @throws TorqueException
     */
    public InitialDensitySets getInitialDensitySets(Connection connection)
        throws TorqueException
    {
        if (aInitialDensitySets == null && (!ObjectUtils.equals(this.initialDensitySetId, null)))
        {
            aInitialDensitySets = InitialDensitySetsPeer.retrieveByPK(SimpleKey.keyFor(this.initialDensitySetId), connection);
        }
        return aInitialDensitySets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setInitialDensitySetsKey(ObjectKey key) throws TorqueException
    {

        setInitialDensitySetId(new Long(((NumberKey) key).longValue()));
    }




    private FundamentalDiagramProfileSets aFundamentalDiagramProfileSets;

    /**
     * Declares an association between this object and a FundamentalDiagramProfileSets object
     *
     * @param v FundamentalDiagramProfileSets
     * @throws TorqueException
     */
    public void setFundamentalDiagramProfileSets(FundamentalDiagramProfileSets v) throws TorqueException
    {
        if (v == null)
        {
            setFundamentalDiagramProfileSetId((Long) null);
        }
        else
        {
            setFundamentalDiagramProfileSetId(v.getId());
        }
        aFundamentalDiagramProfileSets = v;
    }


    /**
     * Returns the associated FundamentalDiagramProfileSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated FundamentalDiagramProfileSets object
     * @throws TorqueException
     */
    public FundamentalDiagramProfileSets getFundamentalDiagramProfileSets()
        throws TorqueException
    {
        if (aFundamentalDiagramProfileSets == null && (!ObjectUtils.equals(this.fundamentalDiagramProfileSetId, null)))
        {
            aFundamentalDiagramProfileSets = FundamentalDiagramProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.fundamentalDiagramProfileSetId));
        }
        return aFundamentalDiagramProfileSets;
    }

    /**
     * Return the associated FundamentalDiagramProfileSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated FundamentalDiagramProfileSets object
     * @throws TorqueException
     */
    public FundamentalDiagramProfileSets getFundamentalDiagramProfileSets(Connection connection)
        throws TorqueException
    {
        if (aFundamentalDiagramProfileSets == null && (!ObjectUtils.equals(this.fundamentalDiagramProfileSetId, null)))
        {
            aFundamentalDiagramProfileSets = FundamentalDiagramProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.fundamentalDiagramProfileSetId), connection);
        }
        return aFundamentalDiagramProfileSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setFundamentalDiagramProfileSetsKey(ObjectKey key) throws TorqueException
    {

        setFundamentalDiagramProfileSetId(new Long(((NumberKey) key).longValue()));
    }




    private DemandProfileSets aDemandProfileSets;

    /**
     * Declares an association between this object and a DemandProfileSets object
     *
     * @param v DemandProfileSets
     * @throws TorqueException
     */
    public void setDemandProfileSets(DemandProfileSets v) throws TorqueException
    {
        if (v == null)
        {
            setDemandProfileSetId((Long) null);
        }
        else
        {
            setDemandProfileSetId(v.getId());
        }
        aDemandProfileSets = v;
    }


    /**
     * Returns the associated DemandProfileSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DemandProfileSets object
     * @throws TorqueException
     */
    public DemandProfileSets getDemandProfileSets()
        throws TorqueException
    {
        if (aDemandProfileSets == null && (!ObjectUtils.equals(this.demandProfileSetId, null)))
        {
            aDemandProfileSets = DemandProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.demandProfileSetId));
        }
        return aDemandProfileSets;
    }

    /**
     * Return the associated DemandProfileSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DemandProfileSets object
     * @throws TorqueException
     */
    public DemandProfileSets getDemandProfileSets(Connection connection)
        throws TorqueException
    {
        if (aDemandProfileSets == null && (!ObjectUtils.equals(this.demandProfileSetId, null)))
        {
            aDemandProfileSets = DemandProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.demandProfileSetId), connection);
        }
        return aDemandProfileSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDemandProfileSetsKey(ObjectKey key) throws TorqueException
    {

        setDemandProfileSetId(new Long(((NumberKey) key).longValue()));
    }




    private DownstreamBoundaryCapacityProfileSets aDownstreamBoundaryCapacityProfileSets;

    /**
     * Declares an association between this object and a DownstreamBoundaryCapacityProfileSets object
     *
     * @param v DownstreamBoundaryCapacityProfileSets
     * @throws TorqueException
     */
    public void setDownstreamBoundaryCapacityProfileSets(DownstreamBoundaryCapacityProfileSets v) throws TorqueException
    {
        if (v == null)
        {
            setDownstreamBoundaryCapacityProfileSetId((Long) null);
        }
        else
        {
            setDownstreamBoundaryCapacityProfileSetId(v.getId());
        }
        aDownstreamBoundaryCapacityProfileSets = v;
    }


    /**
     * Returns the associated DownstreamBoundaryCapacityProfileSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated DownstreamBoundaryCapacityProfileSets object
     * @throws TorqueException
     */
    public DownstreamBoundaryCapacityProfileSets getDownstreamBoundaryCapacityProfileSets()
        throws TorqueException
    {
        if (aDownstreamBoundaryCapacityProfileSets == null && (!ObjectUtils.equals(this.downstreamBoundaryCapacityProfileSetId, null)))
        {
            aDownstreamBoundaryCapacityProfileSets = DownstreamBoundaryCapacityProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.downstreamBoundaryCapacityProfileSetId));
        }
        return aDownstreamBoundaryCapacityProfileSets;
    }

    /**
     * Return the associated DownstreamBoundaryCapacityProfileSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated DownstreamBoundaryCapacityProfileSets object
     * @throws TorqueException
     */
    public DownstreamBoundaryCapacityProfileSets getDownstreamBoundaryCapacityProfileSets(Connection connection)
        throws TorqueException
    {
        if (aDownstreamBoundaryCapacityProfileSets == null && (!ObjectUtils.equals(this.downstreamBoundaryCapacityProfileSetId, null)))
        {
            aDownstreamBoundaryCapacityProfileSets = DownstreamBoundaryCapacityProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.downstreamBoundaryCapacityProfileSetId), connection);
        }
        return aDownstreamBoundaryCapacityProfileSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDownstreamBoundaryCapacityProfileSetsKey(ObjectKey key) throws TorqueException
    {

        setDownstreamBoundaryCapacityProfileSetId(new Long(((NumberKey) key).longValue()));
    }




    private SplitRatioProfileSets aSplitRatioProfileSets;

    /**
     * Declares an association between this object and a SplitRatioProfileSets object
     *
     * @param v SplitRatioProfileSets
     * @throws TorqueException
     */
    public void setSplitRatioProfileSets(SplitRatioProfileSets v) throws TorqueException
    {
        if (v == null)
        {
            setSplitRatioProfileSetId((Long) null);
        }
        else
        {
            setSplitRatioProfileSetId(v.getId());
        }
        aSplitRatioProfileSets = v;
    }


    /**
     * Returns the associated SplitRatioProfileSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated SplitRatioProfileSets object
     * @throws TorqueException
     */
    public SplitRatioProfileSets getSplitRatioProfileSets()
        throws TorqueException
    {
        if (aSplitRatioProfileSets == null && (!ObjectUtils.equals(this.splitRatioProfileSetId, null)))
        {
            aSplitRatioProfileSets = SplitRatioProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.splitRatioProfileSetId));
        }
        return aSplitRatioProfileSets;
    }

    /**
     * Return the associated SplitRatioProfileSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated SplitRatioProfileSets object
     * @throws TorqueException
     */
    public SplitRatioProfileSets getSplitRatioProfileSets(Connection connection)
        throws TorqueException
    {
        if (aSplitRatioProfileSets == null && (!ObjectUtils.equals(this.splitRatioProfileSetId, null)))
        {
            aSplitRatioProfileSets = SplitRatioProfileSetsPeer.retrieveByPK(SimpleKey.keyFor(this.splitRatioProfileSetId), connection);
        }
        return aSplitRatioProfileSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSplitRatioProfileSetsKey(ObjectKey key) throws TorqueException
    {

        setSplitRatioProfileSetId(new Long(((NumberKey) key).longValue()));
    }




    private WeavingFactorSets aWeavingFactorSets;

    /**
     * Declares an association between this object and a WeavingFactorSets object
     *
     * @param v WeavingFactorSets
     * @throws TorqueException
     */
    public void setWeavingFactorSets(WeavingFactorSets v) throws TorqueException
    {
        if (v == null)
        {
            setWeavingFactorSetId((Long) null);
        }
        else
        {
            setWeavingFactorSetId(v.getId());
        }
        aWeavingFactorSets = v;
    }


    /**
     * Returns the associated WeavingFactorSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated WeavingFactorSets object
     * @throws TorqueException
     */
    public WeavingFactorSets getWeavingFactorSets()
        throws TorqueException
    {
        if (aWeavingFactorSets == null && (!ObjectUtils.equals(this.weavingFactorSetId, null)))
        {
            aWeavingFactorSets = WeavingFactorSetsPeer.retrieveByPK(SimpleKey.keyFor(this.weavingFactorSetId));
        }
        return aWeavingFactorSets;
    }

    /**
     * Return the associated WeavingFactorSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated WeavingFactorSets object
     * @throws TorqueException
     */
    public WeavingFactorSets getWeavingFactorSets(Connection connection)
        throws TorqueException
    {
        if (aWeavingFactorSets == null && (!ObjectUtils.equals(this.weavingFactorSetId, null)))
        {
            aWeavingFactorSets = WeavingFactorSetsPeer.retrieveByPK(SimpleKey.keyFor(this.weavingFactorSetId), connection);
        }
        return aWeavingFactorSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setWeavingFactorSetsKey(ObjectKey key) throws TorqueException
    {

        setWeavingFactorSetId(new Long(((NumberKey) key).longValue()));
    }




    private ControllerSets aControllerSets;

    /**
     * Declares an association between this object and a ControllerSets object
     *
     * @param v ControllerSets
     * @throws TorqueException
     */
    public void setControllerSets(ControllerSets v) throws TorqueException
    {
        if (v == null)
        {
            setControllerSetId((Long) null);
        }
        else
        {
            setControllerSetId(v.getId());
        }
        aControllerSets = v;
    }


    /**
     * Returns the associated ControllerSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated ControllerSets object
     * @throws TorqueException
     */
    public ControllerSets getControllerSets()
        throws TorqueException
    {
        if (aControllerSets == null && (!ObjectUtils.equals(this.controllerSetId, null)))
        {
            aControllerSets = ControllerSetsPeer.retrieveByPK(SimpleKey.keyFor(this.controllerSetId));
        }
        return aControllerSets;
    }

    /**
     * Return the associated ControllerSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated ControllerSets object
     * @throws TorqueException
     */
    public ControllerSets getControllerSets(Connection connection)
        throws TorqueException
    {
        if (aControllerSets == null && (!ObjectUtils.equals(this.controllerSetId, null)))
        {
            aControllerSets = ControllerSetsPeer.retrieveByPK(SimpleKey.keyFor(this.controllerSetId), connection);
        }
        return aControllerSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setControllerSetsKey(ObjectKey key) throws TorqueException
    {

        setControllerSetId(new Long(((NumberKey) key).longValue()));
    }




    private EventSets aEventSets;

    /**
     * Declares an association between this object and a EventSets object
     *
     * @param v EventSets
     * @throws TorqueException
     */
    public void setEventSets(EventSets v) throws TorqueException
    {
        if (v == null)
        {
            setEventSetId((Long) null);
        }
        else
        {
            setEventSetId(v.getId());
        }
        aEventSets = v;
    }


    /**
     * Returns the associated EventSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated EventSets object
     * @throws TorqueException
     */
    public EventSets getEventSets()
        throws TorqueException
    {
        if (aEventSets == null && (!ObjectUtils.equals(this.eventSetId, null)))
        {
            aEventSets = EventSetsPeer.retrieveByPK(SimpleKey.keyFor(this.eventSetId));
        }
        return aEventSets;
    }

    /**
     * Return the associated EventSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated EventSets object
     * @throws TorqueException
     */
    public EventSets getEventSets(Connection connection)
        throws TorqueException
    {
        if (aEventSets == null && (!ObjectUtils.equals(this.eventSetId, null)))
        {
            aEventSets = EventSetsPeer.retrieveByPK(SimpleKey.keyFor(this.eventSetId), connection);
        }
        return aEventSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setEventSetsKey(ObjectKey key) throws TorqueException
    {

        setEventSetId(new Long(((NumberKey) key).longValue()));
    }




    private EnkfNoiseParameterSets aEnkfNoiseParameterSets;

    /**
     * Declares an association between this object and a EnkfNoiseParameterSets object
     *
     * @param v EnkfNoiseParameterSets
     * @throws TorqueException
     */
    public void setEnkfNoiseParameterSets(EnkfNoiseParameterSets v) throws TorqueException
    {
        if (v == null)
        {
            setEnkfNoiseParameterSetId((Long) null);
        }
        else
        {
            setEnkfNoiseParameterSetId(v.getId());
        }
        aEnkfNoiseParameterSets = v;
    }


    /**
     * Returns the associated EnkfNoiseParameterSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated EnkfNoiseParameterSets object
     * @throws TorqueException
     */
    public EnkfNoiseParameterSets getEnkfNoiseParameterSets()
        throws TorqueException
    {
        if (aEnkfNoiseParameterSets == null && (!ObjectUtils.equals(this.enkfNoiseParameterSetId, null)))
        {
            aEnkfNoiseParameterSets = EnkfNoiseParameterSetsPeer.retrieveByPK(SimpleKey.keyFor(this.enkfNoiseParameterSetId));
        }
        return aEnkfNoiseParameterSets;
    }

    /**
     * Return the associated EnkfNoiseParameterSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated EnkfNoiseParameterSets object
     * @throws TorqueException
     */
    public EnkfNoiseParameterSets getEnkfNoiseParameterSets(Connection connection)
        throws TorqueException
    {
        if (aEnkfNoiseParameterSets == null && (!ObjectUtils.equals(this.enkfNoiseParameterSetId, null)))
        {
            aEnkfNoiseParameterSets = EnkfNoiseParameterSetsPeer.retrieveByPK(SimpleKey.keyFor(this.enkfNoiseParameterSetId), connection);
        }
        return aEnkfNoiseParameterSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setEnkfNoiseParameterSetsKey(ObjectKey key) throws TorqueException
    {

        setEnkfNoiseParameterSetId(new Long(((NumberKey) key).longValue()));
    }




    private VehicleTypeSets aVehicleTypeSets;

    /**
     * Declares an association between this object and a VehicleTypeSets object
     *
     * @param v VehicleTypeSets
     * @throws TorqueException
     */
    public void setVehicleTypeSets(VehicleTypeSets v) throws TorqueException
    {
        if (v == null)
        {
            setVehicleTypeSetId((Long) null);
        }
        else
        {
            setVehicleTypeSetId(v.getId());
        }
        aVehicleTypeSets = v;
    }


    /**
     * Returns the associated VehicleTypeSets object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated VehicleTypeSets object
     * @throws TorqueException
     */
    public VehicleTypeSets getVehicleTypeSets()
        throws TorqueException
    {
        if (aVehicleTypeSets == null && (!ObjectUtils.equals(this.vehicleTypeSetId, null)))
        {
            aVehicleTypeSets = VehicleTypeSetsPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeSetId));
        }
        return aVehicleTypeSets;
    }

    /**
     * Return the associated VehicleTypeSets object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated VehicleTypeSets object
     * @throws TorqueException
     */
    public VehicleTypeSets getVehicleTypeSets(Connection connection)
        throws TorqueException
    {
        if (aVehicleTypeSets == null && (!ObjectUtils.equals(this.vehicleTypeSetId, null)))
        {
            aVehicleTypeSets = VehicleTypeSetsPeer.retrieveByPK(SimpleKey.keyFor(this.vehicleTypeSetId), connection);
        }
        return aVehicleTypeSets;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setVehicleTypeSetsKey(ObjectKey key) throws TorqueException
    {

        setVehicleTypeSetId(new Long(((NumberKey) key).longValue()));
    }
   


    /**
     * Collection to store aggregation of collNetworkSetss
     */
    protected List collNetworkSetss;

    /**
     * Temporary storage of collNetworkSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNetworkSetss()
    {
        if (collNetworkSetss == null)
        {
            collNetworkSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a NetworkSets object to this object
     * through the NetworkSets foreign key attribute
     *
     * @param l NetworkSets
     * @throws TorqueException
     */
    public void addNetworkSets(NetworkSets l) throws TorqueException
    {
        getNetworkSetss().add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * Method called to associate a NetworkSets object to this object
     * through the NetworkSets foreign key attribute using connection.
     *
     * @param l NetworkSets
     * @throws TorqueException
     */
    public void addNetworkSets(NetworkSets l, Connection con) throws TorqueException
    {
        getNetworkSetss(con).add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * The criteria used to select the current contents of collNetworkSetss
     */
    private Criteria lastNetworkSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getNetworkSetss()
        throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            collNetworkSetss = getNetworkSetss(new Criteria(10));
        }
        return collNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNetworkSetss(Criteria criteria) throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkSetsPeer.SCENARIO_ID, getId() );
                collNetworkSetss = NetworkSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
                if (!lastNetworkSetssCriteria.equals(criteria))
                {
                    collNetworkSetss = NetworkSetsPeer.doSelect(criteria);
                }
            }
        }
        lastNetworkSetssCriteria = criteria;

        return collNetworkSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNetworkSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkSetss(Connection con) throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            collNetworkSetss = getNetworkSetss(new Criteria(10), con);
        }
        return collNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNetworkSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                 criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
                 collNetworkSetss = NetworkSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
                 if (!lastNetworkSetssCriteria.equals(criteria))
                 {
                     collNetworkSetss = NetworkSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNetworkSetssCriteria = criteria;

         return collNetworkSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getNetworkSetssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
                collNetworkSetss = NetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
            if (!lastNetworkSetssCriteria.equals(criteria))
            {
                collNetworkSetss = NetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastNetworkSetssCriteria = criteria;

        return collNetworkSetss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related NetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getNetworkSetssJoinNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collNetworkSetss == null)
        {
            if (isNew())
            {
               collNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
                collNetworkSetss = NetworkSetsPeer.doSelectJoinNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(NetworkSetsPeer.SCENARIO_ID, getId());
            if (!lastNetworkSetssCriteria.equals(criteria))
            {
                collNetworkSetss = NetworkSetsPeer.doSelectJoinNetworks(criteria);
            }
        }
        lastNetworkSetssCriteria = criteria;

        return collNetworkSetss;
    }





    /**
     * Collection to store aggregation of collDestinationNetworkSetss
     */
    protected List collDestinationNetworkSetss;

    /**
     * Temporary storage of collDestinationNetworkSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDestinationNetworkSetss()
    {
        if (collDestinationNetworkSetss == null)
        {
            collDestinationNetworkSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DestinationNetworkSets object to this object
     * through the DestinationNetworkSets foreign key attribute
     *
     * @param l DestinationNetworkSets
     * @throws TorqueException
     */
    public void addDestinationNetworkSets(DestinationNetworkSets l) throws TorqueException
    {
        getDestinationNetworkSetss().add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * Method called to associate a DestinationNetworkSets object to this object
     * through the DestinationNetworkSets foreign key attribute using connection.
     *
     * @param l DestinationNetworkSets
     * @throws TorqueException
     */
    public void addDestinationNetworkSets(DestinationNetworkSets l, Connection con) throws TorqueException
    {
        getDestinationNetworkSetss(con).add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * The criteria used to select the current contents of collDestinationNetworkSetss
     */
    private Criteria lastDestinationNetworkSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDestinationNetworkSetss()
        throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            collDestinationNetworkSetss = getDestinationNetworkSetss(new Criteria(10));
        }
        return collDestinationNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDestinationNetworkSetss(Criteria criteria) throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId() );
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
                if (!lastDestinationNetworkSetssCriteria.equals(criteria))
                {
                    collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria);
                }
            }
        }
        lastDestinationNetworkSetssCriteria = criteria;

        return collDestinationNetworkSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDestinationNetworkSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkSetss(Connection con) throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            collDestinationNetworkSetss = getDestinationNetworkSetss(new Criteria(10), con);
        }
        return collDestinationNetworkSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDestinationNetworkSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                 criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
                 collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
                 if (!lastDestinationNetworkSetssCriteria.equals(criteria))
                 {
                     collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDestinationNetworkSetssCriteria = criteria;

         return collDestinationNetworkSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getDestinationNetworkSetssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
            if (!lastDestinationNetworkSetssCriteria.equals(criteria))
            {
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastDestinationNetworkSetssCriteria = criteria;

        return collDestinationNetworkSetss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related DestinationNetworkSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getDestinationNetworkSetssJoinDestinationNetworks(Criteria criteria)
        throws TorqueException
    {
        if (collDestinationNetworkSetss == null)
        {
            if (isNew())
            {
               collDestinationNetworkSetss = new ArrayList();
            }
            else
            {
                criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DestinationNetworkSetsPeer.SCENARIO_ID, getId());
            if (!lastDestinationNetworkSetssCriteria.equals(criteria))
            {
                collDestinationNetworkSetss = DestinationNetworkSetsPeer.doSelectJoinDestinationNetworks(criteria);
            }
        }
        lastDestinationNetworkSetssCriteria = criteria;

        return collDestinationNetworkSetss;
    }





    /**
     * Collection to store aggregation of collRouteSetss
     */
    protected List collRouteSetss;

    /**
     * Temporary storage of collRouteSetss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRouteSetss()
    {
        if (collRouteSetss == null)
        {
            collRouteSetss = new ArrayList();
        }
    }


    /**
     * Method called to associate a RouteSets object to this object
     * through the RouteSets foreign key attribute
     *
     * @param l RouteSets
     * @throws TorqueException
     */
    public void addRouteSets(RouteSets l) throws TorqueException
    {
        getRouteSetss().add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * Method called to associate a RouteSets object to this object
     * through the RouteSets foreign key attribute using connection.
     *
     * @param l RouteSets
     * @throws TorqueException
     */
    public void addRouteSets(RouteSets l, Connection con) throws TorqueException
    {
        getRouteSetss(con).add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * The criteria used to select the current contents of collRouteSetss
     */
    private Criteria lastRouteSetssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRouteSetss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getRouteSetss()
        throws TorqueException
    {
        if (collRouteSetss == null)
        {
            collRouteSetss = getRouteSetss(new Criteria(10));
        }
        return collRouteSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related RouteSetss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getRouteSetss(Criteria criteria) throws TorqueException
    {
        if (collRouteSetss == null)
        {
            if (isNew())
            {
               collRouteSetss = new ArrayList();
            }
            else
            {
                criteria.add(RouteSetsPeer.SCENARIO_ID, getId() );
                collRouteSetss = RouteSetsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
                if (!lastRouteSetssCriteria.equals(criteria))
                {
                    collRouteSetss = RouteSetsPeer.doSelect(criteria);
                }
            }
        }
        lastRouteSetssCriteria = criteria;

        return collRouteSetss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRouteSetss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRouteSetss(Connection con) throws TorqueException
    {
        if (collRouteSetss == null)
        {
            collRouteSetss = getRouteSetss(new Criteria(10), con);
        }
        return collRouteSetss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related RouteSetss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getRouteSetss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRouteSetss == null)
        {
            if (isNew())
            {
               collRouteSetss = new ArrayList();
            }
            else
            {
                 criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
                 collRouteSetss = RouteSetsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
                 if (!lastRouteSetssCriteria.equals(criteria))
                 {
                     collRouteSetss = RouteSetsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRouteSetssCriteria = criteria;

         return collRouteSetss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related RouteSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getRouteSetssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collRouteSetss == null)
        {
            if (isNew())
            {
               collRouteSetss = new ArrayList();
            }
            else
            {
                criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
                collRouteSetss = RouteSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
            if (!lastRouteSetssCriteria.equals(criteria))
            {
                collRouteSetss = RouteSetsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastRouteSetssCriteria = criteria;

        return collRouteSetss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related RouteSetss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getRouteSetssJoinRoutes(Criteria criteria)
        throws TorqueException
    {
        if (collRouteSetss == null)
        {
            if (isNew())
            {
               collRouteSetss = new ArrayList();
            }
            else
            {
                criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
                collRouteSetss = RouteSetsPeer.doSelectJoinRoutes(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RouteSetsPeer.SCENARIO_ID, getId());
            if (!lastRouteSetssCriteria.equals(criteria))
            {
                collRouteSetss = RouteSetsPeer.doSelectJoinRoutes(criteria);
            }
        }
        lastRouteSetssCriteria = criteria;

        return collRouteSetss;
    }





    /**
     * Collection to store aggregation of collSimulationRunss
     */
    protected List collSimulationRunss;

    /**
     * Temporary storage of collSimulationRunss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSimulationRunss()
    {
        if (collSimulationRunss == null)
        {
            collSimulationRunss = new ArrayList();
        }
    }


    /**
     * Method called to associate a SimulationRuns object to this object
     * through the SimulationRuns foreign key attribute
     *
     * @param l SimulationRuns
     * @throws TorqueException
     */
    public void addSimulationRuns(SimulationRuns l) throws TorqueException
    {
        getSimulationRunss().add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * Method called to associate a SimulationRuns object to this object
     * through the SimulationRuns foreign key attribute using connection.
     *
     * @param l SimulationRuns
     * @throws TorqueException
     */
    public void addSimulationRuns(SimulationRuns l, Connection con) throws TorqueException
    {
        getSimulationRunss(con).add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * The criteria used to select the current contents of collSimulationRunss
     */
    private Criteria lastSimulationRunssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSimulationRunss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getSimulationRunss()
        throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            collSimulationRunss = getSimulationRunss(new Criteria(10));
        }
        return collSimulationRunss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSimulationRunss(Criteria criteria) throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                criteria.add(SimulationRunsPeer.SCENARIO_ID, getId() );
                collSimulationRunss = SimulationRunsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
                if (!lastSimulationRunssCriteria.equals(criteria))
                {
                    collSimulationRunss = SimulationRunsPeer.doSelect(criteria);
                }
            }
        }
        lastSimulationRunssCriteria = criteria;

        return collSimulationRunss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSimulationRunss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSimulationRunss(Connection con) throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            collSimulationRunss = getSimulationRunss(new Criteria(10), con);
        }
        return collSimulationRunss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSimulationRunss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                 criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
                 collSimulationRunss = SimulationRunsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
                 if (!lastSimulationRunssCriteria.equals(criteria))
                 {
                     collSimulationRunss = SimulationRunsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSimulationRunssCriteria = criteria;

         return collSimulationRunss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getSimulationRunssJoinDataSources(Criteria criteria)
        throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
                collSimulationRunss = SimulationRunsPeer.doSelectJoinDataSources(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
            if (!lastSimulationRunssCriteria.equals(criteria))
            {
                collSimulationRunss = SimulationRunsPeer.doSelectJoinDataSources(criteria);
            }
        }
        lastSimulationRunssCriteria = criteria;

        return collSimulationRunss;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related SimulationRunss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getSimulationRunssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collSimulationRunss == null)
        {
            if (isNew())
            {
               collSimulationRunss = new ArrayList();
            }
            else
            {
                criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
                collSimulationRunss = SimulationRunsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(SimulationRunsPeer.SCENARIO_ID, getId());
            if (!lastSimulationRunssCriteria.equals(criteria))
            {
                collSimulationRunss = SimulationRunsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastSimulationRunssCriteria = criteria;

        return collSimulationRunss;
    }





    /**
     * Collection to store aggregation of collDefaultSimulationSettingss
     */
    protected List collDefaultSimulationSettingss;

    /**
     * Temporary storage of collDefaultSimulationSettingss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDefaultSimulationSettingss()
    {
        if (collDefaultSimulationSettingss == null)
        {
            collDefaultSimulationSettingss = new ArrayList();
        }
    }


    /**
     * Method called to associate a DefaultSimulationSettings object to this object
     * through the DefaultSimulationSettings foreign key attribute
     *
     * @param l DefaultSimulationSettings
     * @throws TorqueException
     */
    public void addDefaultSimulationSettings(DefaultSimulationSettings l) throws TorqueException
    {
        getDefaultSimulationSettingss().add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * Method called to associate a DefaultSimulationSettings object to this object
     * through the DefaultSimulationSettings foreign key attribute using connection.
     *
     * @param l DefaultSimulationSettings
     * @throws TorqueException
     */
    public void addDefaultSimulationSettings(DefaultSimulationSettings l, Connection con) throws TorqueException
    {
        getDefaultSimulationSettingss(con).add(l);
        l.setScenarios((Scenarios) this);
    }

    /**
     * The criteria used to select the current contents of collDefaultSimulationSettingss
     */
    private Criteria lastDefaultSimulationSettingssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDefaultSimulationSettingss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List getDefaultSimulationSettingss()
        throws TorqueException
    {
        if (collDefaultSimulationSettingss == null)
        {
            collDefaultSimulationSettingss = getDefaultSimulationSettingss(new Criteria(10));
        }
        return collDefaultSimulationSettingss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related DefaultSimulationSettingss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDefaultSimulationSettingss(Criteria criteria) throws TorqueException
    {
        if (collDefaultSimulationSettingss == null)
        {
            if (isNew())
            {
               collDefaultSimulationSettingss = new ArrayList();
            }
            else
            {
                criteria.add(DefaultSimulationSettingsPeer.SCENARIO_ID, getId() );
                collDefaultSimulationSettingss = DefaultSimulationSettingsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(DefaultSimulationSettingsPeer.SCENARIO_ID, getId());
                if (!lastDefaultSimulationSettingssCriteria.equals(criteria))
                {
                    collDefaultSimulationSettingss = DefaultSimulationSettingsPeer.doSelect(criteria);
                }
            }
        }
        lastDefaultSimulationSettingssCriteria = criteria;

        return collDefaultSimulationSettingss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDefaultSimulationSettingss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDefaultSimulationSettingss(Connection con) throws TorqueException
    {
        if (collDefaultSimulationSettingss == null)
        {
            collDefaultSimulationSettingss = getDefaultSimulationSettingss(new Criteria(10), con);
        }
        return collDefaultSimulationSettingss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios has previously
     * been saved, it will retrieve related DefaultSimulationSettingss from storage.
     * If this Scenarios is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDefaultSimulationSettingss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDefaultSimulationSettingss == null)
        {
            if (isNew())
            {
               collDefaultSimulationSettingss = new ArrayList();
            }
            else
            {
                 criteria.add(DefaultSimulationSettingsPeer.SCENARIO_ID, getId());
                 collDefaultSimulationSettingss = DefaultSimulationSettingsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(DefaultSimulationSettingsPeer.SCENARIO_ID, getId());
                 if (!lastDefaultSimulationSettingssCriteria.equals(criteria))
                 {
                     collDefaultSimulationSettingss = DefaultSimulationSettingsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDefaultSimulationSettingssCriteria = criteria;

         return collDefaultSimulationSettingss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Scenarios is new, it will return
     * an empty collection; or if this Scenarios has previously
     * been saved, it will retrieve related DefaultSimulationSettingss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Scenarios.
     */
    protected List getDefaultSimulationSettingssJoinScenarios(Criteria criteria)
        throws TorqueException
    {
        if (collDefaultSimulationSettingss == null)
        {
            if (isNew())
            {
               collDefaultSimulationSettingss = new ArrayList();
            }
            else
            {
                criteria.add(DefaultSimulationSettingsPeer.SCENARIO_ID, getId());
                collDefaultSimulationSettingss = DefaultSimulationSettingsPeer.doSelectJoinScenarios(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(DefaultSimulationSettingsPeer.SCENARIO_ID, getId());
            if (!lastDefaultSimulationSettingssCriteria.equals(criteria))
            {
                collDefaultSimulationSettingss = DefaultSimulationSettingsPeer.doSelectJoinScenarios(criteria);
            }
        }
        lastDefaultSimulationSettingssCriteria = criteria;

        return collDefaultSimulationSettingss;
    }



        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("ProjectId");
            fieldNames.add("NetworkConnectionSetId");
            fieldNames.add("VehicleTypeSetId");
            fieldNames.add("SignalSetId");
            fieldNames.add("SensorSetId");
            fieldNames.add("SplitRatioProfileSetId");
            fieldNames.add("WeavingFactorSetId");
            fieldNames.add("InitialDensitySetId");
            fieldNames.add("FundamentalDiagramProfileSetId");
            fieldNames.add("DemandProfileSetId");
            fieldNames.add("DownstreamBoundaryCapacityProfileSetId");
            fieldNames.add("ControllerSetId");
            fieldNames.add("EventSetId");
            fieldNames.add("EnkfNoiseParameterSetId");
            fieldNames.add("Name");
            fieldNames.add("Description");
            fieldNames.add("Created");
            fieldNames.add("Modified");
            fieldNames.add("CreatedBy");
            fieldNames.add("ModifiedBy");
            fieldNames.add("Modstamp");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return getId();
        }
        if (name.equals("ProjectId"))
        {
            return getProjectId();
        }
        if (name.equals("NetworkConnectionSetId"))
        {
            return getNetworkConnectionSetId();
        }
        if (name.equals("VehicleTypeSetId"))
        {
            return getVehicleTypeSetId();
        }
        if (name.equals("SignalSetId"))
        {
            return getSignalSetId();
        }
        if (name.equals("SensorSetId"))
        {
            return getSensorSetId();
        }
        if (name.equals("SplitRatioProfileSetId"))
        {
            return getSplitRatioProfileSetId();
        }
        if (name.equals("WeavingFactorSetId"))
        {
            return getWeavingFactorSetId();
        }
        if (name.equals("InitialDensitySetId"))
        {
            return getInitialDensitySetId();
        }
        if (name.equals("FundamentalDiagramProfileSetId"))
        {
            return getFundamentalDiagramProfileSetId();
        }
        if (name.equals("DemandProfileSetId"))
        {
            return getDemandProfileSetId();
        }
        if (name.equals("DownstreamBoundaryCapacityProfileSetId"))
        {
            return getDownstreamBoundaryCapacityProfileSetId();
        }
        if (name.equals("ControllerSetId"))
        {
            return getControllerSetId();
        }
        if (name.equals("EventSetId"))
        {
            return getEventSetId();
        }
        if (name.equals("EnkfNoiseParameterSetId"))
        {
            return getEnkfNoiseParameterSetId();
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Description"))
        {
            return getDescription();
        }
        if (name.equals("Created"))
        {
            return getCreated();
        }
        if (name.equals("Modified"))
        {
            return getModified();
        }
        if (name.equals("CreatedBy"))
        {
            return getCreatedBy();
        }
        if (name.equals("ModifiedBy"))
        {
            return getModifiedBy();
        }
        if (name.equals("Modstamp"))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setId((Long) value);
            return true;
        }
        if (name.equals("ProjectId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setProjectId((Long) value);
            return true;
        }
        if (name.equals("NetworkConnectionSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNetworkConnectionSetId((Long) value);
            return true;
        }
        if (name.equals("VehicleTypeSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setVehicleTypeSetId((Long) value);
            return true;
        }
        if (name.equals("SignalSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSignalSetId((Long) value);
            return true;
        }
        if (name.equals("SensorSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSensorSetId((Long) value);
            return true;
        }
        if (name.equals("SplitRatioProfileSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSplitRatioProfileSetId((Long) value);
            return true;
        }
        if (name.equals("WeavingFactorSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setWeavingFactorSetId((Long) value);
            return true;
        }
        if (name.equals("InitialDensitySetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setInitialDensitySetId((Long) value);
            return true;
        }
        if (name.equals("FundamentalDiagramProfileSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFundamentalDiagramProfileSetId((Long) value);
            return true;
        }
        if (name.equals("DemandProfileSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDemandProfileSetId((Long) value);
            return true;
        }
        if (name.equals("DownstreamBoundaryCapacityProfileSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDownstreamBoundaryCapacityProfileSetId((Long) value);
            return true;
        }
        if (name.equals("ControllerSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setControllerSetId((Long) value);
            return true;
        }
        if (name.equals("EventSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEventSetId((Long) value);
            return true;
        }
        if (name.equals("EnkfNoiseParameterSetId"))
        {
            // Object fields can be null
            if (value != null && ! Long.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEnkfNoiseParameterSetId((Long) value);
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Description"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDescription((String) value);
            return true;
        }
        if (name.equals("Created"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreated((Date) value);
            return true;
        }
        if (name.equals("Modified"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModified((Date) value);
            return true;
        }
        if (name.equals("CreatedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreatedBy((String) value);
            return true;
        }
        if (name.equals("ModifiedBy"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifiedBy((String) value);
            return true;
        }
        if (name.equals("Modstamp"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModstamp((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(ScenariosPeer.ID))
        {
            return getId();
        }
        if (name.equals(ScenariosPeer.PROJECT_ID))
        {
            return getProjectId();
        }
        if (name.equals(ScenariosPeer.NETWORK_CONNECTION_SET_ID))
        {
            return getNetworkConnectionSetId();
        }
        if (name.equals(ScenariosPeer.VEHICLE_TYPE_SET_ID))
        {
            return getVehicleTypeSetId();
        }
        if (name.equals(ScenariosPeer.SIGNAL_SET_ID))
        {
            return getSignalSetId();
        }
        if (name.equals(ScenariosPeer.SENSOR_SET_ID))
        {
            return getSensorSetId();
        }
        if (name.equals(ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID))
        {
            return getSplitRatioProfileSetId();
        }
        if (name.equals(ScenariosPeer.WEAVING_FACTOR_SET_ID))
        {
            return getWeavingFactorSetId();
        }
        if (name.equals(ScenariosPeer.INITIAL_DENSITY_SET_ID))
        {
            return getInitialDensitySetId();
        }
        if (name.equals(ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID))
        {
            return getFundamentalDiagramProfileSetId();
        }
        if (name.equals(ScenariosPeer.DEMAND_PROFILE_SET_ID))
        {
            return getDemandProfileSetId();
        }
        if (name.equals(ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID))
        {
            return getDownstreamBoundaryCapacityProfileSetId();
        }
        if (name.equals(ScenariosPeer.CONTROLLER_SET_ID))
        {
            return getControllerSetId();
        }
        if (name.equals(ScenariosPeer.EVENT_SET_ID))
        {
            return getEventSetId();
        }
        if (name.equals(ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID))
        {
            return getEnkfNoiseParameterSetId();
        }
        if (name.equals(ScenariosPeer.NAME))
        {
            return getName();
        }
        if (name.equals(ScenariosPeer.DESCRIPTION))
        {
            return getDescription();
        }
        if (name.equals(ScenariosPeer.CREATED))
        {
            return getCreated();
        }
        if (name.equals(ScenariosPeer.MODIFIED))
        {
            return getModified();
        }
        if (name.equals(ScenariosPeer.CREATED_BY))
        {
            return getCreatedBy();
        }
        if (name.equals(ScenariosPeer.MODIFIED_BY))
        {
            return getModifiedBy();
        }
        if (name.equals(ScenariosPeer.MODSTAMP))
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (ScenariosPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (ScenariosPeer.PROJECT_ID.equals(name))
        {
            return setByName("ProjectId", value);
        }
      if (ScenariosPeer.NETWORK_CONNECTION_SET_ID.equals(name))
        {
            return setByName("NetworkConnectionSetId", value);
        }
      if (ScenariosPeer.VEHICLE_TYPE_SET_ID.equals(name))
        {
            return setByName("VehicleTypeSetId", value);
        }
      if (ScenariosPeer.SIGNAL_SET_ID.equals(name))
        {
            return setByName("SignalSetId", value);
        }
      if (ScenariosPeer.SENSOR_SET_ID.equals(name))
        {
            return setByName("SensorSetId", value);
        }
      if (ScenariosPeer.SPLIT_RATIO_PROFILE_SET_ID.equals(name))
        {
            return setByName("SplitRatioProfileSetId", value);
        }
      if (ScenariosPeer.WEAVING_FACTOR_SET_ID.equals(name))
        {
            return setByName("WeavingFactorSetId", value);
        }
      if (ScenariosPeer.INITIAL_DENSITY_SET_ID.equals(name))
        {
            return setByName("InitialDensitySetId", value);
        }
      if (ScenariosPeer.FUNDAMENTAL_DIAGRAM_PROFILE_SET_ID.equals(name))
        {
            return setByName("FundamentalDiagramProfileSetId", value);
        }
      if (ScenariosPeer.DEMAND_PROFILE_SET_ID.equals(name))
        {
            return setByName("DemandProfileSetId", value);
        }
      if (ScenariosPeer.DOWNSTREAM_BOUNDARY_CAPACITY_PROFILE_SET_ID.equals(name))
        {
            return setByName("DownstreamBoundaryCapacityProfileSetId", value);
        }
      if (ScenariosPeer.CONTROLLER_SET_ID.equals(name))
        {
            return setByName("ControllerSetId", value);
        }
      if (ScenariosPeer.EVENT_SET_ID.equals(name))
        {
            return setByName("EventSetId", value);
        }
      if (ScenariosPeer.ENKF_NOISE_PARAMETER_SET_ID.equals(name))
        {
            return setByName("EnkfNoiseParameterSetId", value);
        }
      if (ScenariosPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (ScenariosPeer.DESCRIPTION.equals(name))
        {
            return setByName("Description", value);
        }
      if (ScenariosPeer.CREATED.equals(name))
        {
            return setByName("Created", value);
        }
      if (ScenariosPeer.MODIFIED.equals(name))
        {
            return setByName("Modified", value);
        }
      if (ScenariosPeer.CREATED_BY.equals(name))
        {
            return setByName("CreatedBy", value);
        }
      if (ScenariosPeer.MODIFIED_BY.equals(name))
        {
            return setByName("ModifiedBy", value);
        }
      if (ScenariosPeer.MODSTAMP.equals(name))
        {
            return setByName("Modstamp", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getId();
        }
        if (pos == 1)
        {
            return getProjectId();
        }
        if (pos == 2)
        {
            return getNetworkConnectionSetId();
        }
        if (pos == 3)
        {
            return getVehicleTypeSetId();
        }
        if (pos == 4)
        {
            return getSignalSetId();
        }
        if (pos == 5)
        {
            return getSensorSetId();
        }
        if (pos == 6)
        {
            return getSplitRatioProfileSetId();
        }
        if (pos == 7)
        {
            return getWeavingFactorSetId();
        }
        if (pos == 8)
        {
            return getInitialDensitySetId();
        }
        if (pos == 9)
        {
            return getFundamentalDiagramProfileSetId();
        }
        if (pos == 10)
        {
            return getDemandProfileSetId();
        }
        if (pos == 11)
        {
            return getDownstreamBoundaryCapacityProfileSetId();
        }
        if (pos == 12)
        {
            return getControllerSetId();
        }
        if (pos == 13)
        {
            return getEventSetId();
        }
        if (pos == 14)
        {
            return getEnkfNoiseParameterSetId();
        }
        if (pos == 15)
        {
            return getName();
        }
        if (pos == 16)
        {
            return getDescription();
        }
        if (pos == 17)
        {
            return getCreated();
        }
        if (pos == 18)
        {
            return getModified();
        }
        if (pos == 19)
        {
            return getCreatedBy();
        }
        if (pos == 20)
        {
            return getModifiedBy();
        }
        if (pos == 21)
        {
            return getModstamp();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("ProjectId", value);
        }
    if (position == 2)
        {
            return setByName("NetworkConnectionSetId", value);
        }
    if (position == 3)
        {
            return setByName("VehicleTypeSetId", value);
        }
    if (position == 4)
        {
            return setByName("SignalSetId", value);
        }
    if (position == 5)
        {
            return setByName("SensorSetId", value);
        }
    if (position == 6)
        {
            return setByName("SplitRatioProfileSetId", value);
        }
    if (position == 7)
        {
            return setByName("WeavingFactorSetId", value);
        }
    if (position == 8)
        {
            return setByName("InitialDensitySetId", value);
        }
    if (position == 9)
        {
            return setByName("FundamentalDiagramProfileSetId", value);
        }
    if (position == 10)
        {
            return setByName("DemandProfileSetId", value);
        }
    if (position == 11)
        {
            return setByName("DownstreamBoundaryCapacityProfileSetId", value);
        }
    if (position == 12)
        {
            return setByName("ControllerSetId", value);
        }
    if (position == 13)
        {
            return setByName("EventSetId", value);
        }
    if (position == 14)
        {
            return setByName("EnkfNoiseParameterSetId", value);
        }
    if (position == 15)
        {
            return setByName("Name", value);
        }
    if (position == 16)
        {
            return setByName("Description", value);
        }
    if (position == 17)
        {
            return setByName("Created", value);
        }
    if (position == 18)
        {
            return setByName("Modified", value);
        }
    if (position == 19)
        {
            return setByName("CreatedBy", value);
        }
    if (position == 20)
        {
            return setByName("ModifiedBy", value);
        }
    if (position == 21)
        {
            return setByName("Modstamp", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(ScenariosPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ScenariosPeer.doInsert((Scenarios) this, con);
                    setNew(false);
                }
                else
                {
                    ScenariosPeer.doUpdate((Scenarios) this, con);
                }
            }


            if (collNetworkSetss != null)
            {
                for (int i = 0; i < collNetworkSetss.size(); i++)
                {
                    ((NetworkSets) collNetworkSetss.get(i)).save(con);
                }
            }

            if (collDestinationNetworkSetss != null)
            {
                for (int i = 0; i < collDestinationNetworkSetss.size(); i++)
                {
                    ((DestinationNetworkSets) collDestinationNetworkSetss.get(i)).save(con);
                }
            }

            if (collRouteSetss != null)
            {
                for (int i = 0; i < collRouteSetss.size(); i++)
                {
                    ((RouteSets) collRouteSetss.get(i)).save(con);
                }
            }

            if (collSimulationRunss != null)
            {
                for (int i = 0; i < collSimulationRunss.size(); i++)
                {
                    ((SimulationRuns) collSimulationRunss.get(i)).save(con);
                }
            }

            if (collDefaultSimulationSettingss != null)
            {
                for (int i = 0; i < collDefaultSimulationSettingss.size(); i++)
                {
                    ((DefaultSimulationSettings) collDefaultSimulationSettingss.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setId(new Long(((NumberKey) key).longValue()));
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setId(new Long(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Scenarios copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Scenarios copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Scenarios copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Scenarios(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Scenarios copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Scenarios(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Scenarios copyInto(Scenarios copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Scenarios copyInto(Scenarios copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Scenarios copyInto(Scenarios copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setProjectId(projectId);
        copyObj.setNetworkConnectionSetId(networkConnectionSetId);
        copyObj.setVehicleTypeSetId(vehicleTypeSetId);
        copyObj.setSignalSetId(signalSetId);
        copyObj.setSensorSetId(sensorSetId);
        copyObj.setSplitRatioProfileSetId(splitRatioProfileSetId);
        copyObj.setWeavingFactorSetId(weavingFactorSetId);
        copyObj.setInitialDensitySetId(initialDensitySetId);
        copyObj.setFundamentalDiagramProfileSetId(fundamentalDiagramProfileSetId);
        copyObj.setDemandProfileSetId(demandProfileSetId);
        copyObj.setDownstreamBoundaryCapacityProfileSetId(downstreamBoundaryCapacityProfileSetId);
        copyObj.setControllerSetId(controllerSetId);
        copyObj.setEventSetId(eventSetId);
        copyObj.setEnkfNoiseParameterSetId(enkfNoiseParameterSetId);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNetworkSetss = getNetworkSetss();
        if (vNetworkSetss != null)
        {
            for (int i = 0; i < vNetworkSetss.size(); i++)
            {
                NetworkSets obj = (NetworkSets) vNetworkSetss.get(i);
                copyObj.addNetworkSets(obj.copy());
            }
        }
        else
        {
            copyObj.collNetworkSetss = null;
        }


        List vDestinationNetworkSetss = getDestinationNetworkSetss();
        if (vDestinationNetworkSetss != null)
        {
            for (int i = 0; i < vDestinationNetworkSetss.size(); i++)
            {
                DestinationNetworkSets obj = (DestinationNetworkSets) vDestinationNetworkSetss.get(i);
                copyObj.addDestinationNetworkSets(obj.copy());
            }
        }
        else
        {
            copyObj.collDestinationNetworkSetss = null;
        }


        List vRouteSetss = getRouteSetss();
        if (vRouteSetss != null)
        {
            for (int i = 0; i < vRouteSetss.size(); i++)
            {
                RouteSets obj = (RouteSets) vRouteSetss.get(i);
                copyObj.addRouteSets(obj.copy());
            }
        }
        else
        {
            copyObj.collRouteSetss = null;
        }


        List vSimulationRunss = getSimulationRunss();
        if (vSimulationRunss != null)
        {
            for (int i = 0; i < vSimulationRunss.size(); i++)
            {
                SimulationRuns obj = (SimulationRuns) vSimulationRunss.get(i);
                copyObj.addSimulationRuns(obj.copy());
            }
        }
        else
        {
            copyObj.collSimulationRunss = null;
        }


        List vDefaultSimulationSettingss = getDefaultSimulationSettingss();
        if (vDefaultSimulationSettingss != null)
        {
            for (int i = 0; i < vDefaultSimulationSettingss.size(); i++)
            {
                DefaultSimulationSettings obj = (DefaultSimulationSettings) vDefaultSimulationSettingss.get(i);
                copyObj.addDefaultSimulationSettings(obj.copy());
            }
        }
        else
        {
            copyObj.collDefaultSimulationSettingss = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Scenarios copyInto(Scenarios copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setProjectId(projectId);
        copyObj.setNetworkConnectionSetId(networkConnectionSetId);
        copyObj.setVehicleTypeSetId(vehicleTypeSetId);
        copyObj.setSignalSetId(signalSetId);
        copyObj.setSensorSetId(sensorSetId);
        copyObj.setSplitRatioProfileSetId(splitRatioProfileSetId);
        copyObj.setWeavingFactorSetId(weavingFactorSetId);
        copyObj.setInitialDensitySetId(initialDensitySetId);
        copyObj.setFundamentalDiagramProfileSetId(fundamentalDiagramProfileSetId);
        copyObj.setDemandProfileSetId(demandProfileSetId);
        copyObj.setDownstreamBoundaryCapacityProfileSetId(downstreamBoundaryCapacityProfileSetId);
        copyObj.setControllerSetId(controllerSetId);
        copyObj.setEventSetId(eventSetId);
        copyObj.setEnkfNoiseParameterSetId(enkfNoiseParameterSetId);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(createdBy);
        copyObj.setModifiedBy(modifiedBy);
        copyObj.setModstamp(modstamp);

        copyObj.setId((Long)null);

        if (deepcopy)
        {


        List vNetworkSetss = getNetworkSetss(con);
        if (vNetworkSetss != null)
        {
            for (int i = 0; i < vNetworkSetss.size(); i++)
            {
                NetworkSets obj = (NetworkSets) vNetworkSetss.get(i);
                copyObj.addNetworkSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collNetworkSetss = null;
        }


        List vDestinationNetworkSetss = getDestinationNetworkSetss(con);
        if (vDestinationNetworkSetss != null)
        {
            for (int i = 0; i < vDestinationNetworkSetss.size(); i++)
            {
                DestinationNetworkSets obj = (DestinationNetworkSets) vDestinationNetworkSetss.get(i);
                copyObj.addDestinationNetworkSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDestinationNetworkSetss = null;
        }


        List vRouteSetss = getRouteSetss(con);
        if (vRouteSetss != null)
        {
            for (int i = 0; i < vRouteSetss.size(); i++)
            {
                RouteSets obj = (RouteSets) vRouteSetss.get(i);
                copyObj.addRouteSets(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRouteSetss = null;
        }


        List vSimulationRunss = getSimulationRunss(con);
        if (vSimulationRunss != null)
        {
            for (int i = 0; i < vSimulationRunss.size(); i++)
            {
                SimulationRuns obj = (SimulationRuns) vSimulationRunss.get(i);
                copyObj.addSimulationRuns(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collSimulationRunss = null;
        }


        List vDefaultSimulationSettingss = getDefaultSimulationSettingss(con);
        if (vDefaultSimulationSettingss != null)
        {
            for (int i = 0; i < vDefaultSimulationSettingss.size(); i++)
            {
                DefaultSimulationSettings obj = (DefaultSimulationSettings) vDefaultSimulationSettingss.get(i);
                copyObj.addDefaultSimulationSettings(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collDefaultSimulationSettingss = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ScenariosPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return ScenariosPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Scenarios:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("ProjectId = ")
           .append(getProjectId())
           .append("\n");
        str.append("NetworkConnectionSetId = ")
           .append(getNetworkConnectionSetId())
           .append("\n");
        str.append("VehicleTypeSetId = ")
           .append(getVehicleTypeSetId())
           .append("\n");
        str.append("SignalSetId = ")
           .append(getSignalSetId())
           .append("\n");
        str.append("SensorSetId = ")
           .append(getSensorSetId())
           .append("\n");
        str.append("SplitRatioProfileSetId = ")
           .append(getSplitRatioProfileSetId())
           .append("\n");
        str.append("WeavingFactorSetId = ")
           .append(getWeavingFactorSetId())
           .append("\n");
        str.append("InitialDensitySetId = ")
           .append(getInitialDensitySetId())
           .append("\n");
        str.append("FundamentalDiagramProfileSetId = ")
           .append(getFundamentalDiagramProfileSetId())
           .append("\n");
        str.append("DemandProfileSetId = ")
           .append(getDemandProfileSetId())
           .append("\n");
        str.append("DownstreamBoundaryCapacityProfileSetId = ")
           .append(getDownstreamBoundaryCapacityProfileSetId())
           .append("\n");
        str.append("ControllerSetId = ")
           .append(getControllerSetId())
           .append("\n");
        str.append("EventSetId = ")
           .append(getEventSetId())
           .append("\n");
        str.append("EnkfNoiseParameterSetId = ")
           .append(getEnkfNoiseParameterSetId())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Description = ")
           .append(getDescription())
           .append("\n");
        str.append("Created = ")
           .append(getCreated())
           .append("\n");
        str.append("Modified = ")
           .append(getModified())
           .append("\n");
        str.append("CreatedBy = ")
           .append(getCreatedBy())
           .append("\n");
        str.append("ModifiedBy = ")
           .append(getModifiedBy())
           .append("\n");
        str.append("Modstamp = ")
           .append(getModstamp())
           .append("\n");
        return(str.toString());
    }
}
